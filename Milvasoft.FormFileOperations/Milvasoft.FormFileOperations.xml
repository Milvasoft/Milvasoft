<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.FormFileOperations</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.FormFileOperations.Enums.FileType">
            <summary>
            <para> File types.</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.Image">
            <summary> 
            <para>File Type Image</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.Video">
            <summary> 
            <para>File Type Video</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.ARModel">
            <summary>
            <para>File Type ARModel</para>          
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.Audio">
            <summary> 
            <para>File Type Audio</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.Document">
            <summary> 
            <para>File Type Document</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.Compressed">
            <summary> 
            <para>File Type Compressed</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.EMail">
            <summary> 
            <para>File Type EMail</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.Font">
            <summary> 
            <para>File Type Font</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileType.InternetRelated">
            <summary> 
            <para>File Type InternetRelated</para>
            </summary>
        </member>
        <member name="T:Milvasoft.FormFileOperations.Enums.FileValidationResult">
            <summary>
            <para> File validation results. </para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileValidationResult.Valid">
            <summary> 
            <para>Valid file result.</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileValidationResult.FileSizeTooBig">
            <summary> 
            <para>File size too big result.</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileValidationResult.InvalidFileExtension">
            <summary> 
            <para>Invalid file extension result.</para>
            </summary>
        </member>
        <member name="F:Milvasoft.FormFileOperations.Enums.FileValidationResult.NullFile">
            <summary> 
            <para>Invalid file extension result.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.FormFileOperations.FormFileOperations.DefaultAllowedExtensions">
            <summary>
            <para> Allowed file extensions for media files. </para>
            </summary>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.SaveFileToPathAsync``1(Microsoft.AspNetCore.Http.IFormFile,``0,System.String,Milvasoft.FormFileOperations.FormFileOperations.FilesFolderNameCreator,System.String)">
            <summary>
            <para><b>EN: </b>Save uploaded IFormFile file to physical file path. Target Path will be : "<paramref name ="basePath"></paramref>/<b><paramref name="folderNameCreator"/>()</b>/<paramref name="entity"></paramref>.<paramref name="propertyName"/>"</para>
            <para><b>TR: </b>Yüklenen IFormFile dosyasını fiziksel bir dosya yoluna kaydedin. Hedef Yol: <paramref name ="basePath"></paramref>/<b><paramref name="folderNameCreator"/>()</b>/<paramref name ="entity"></paramref>.<paramref name="propertyName"/>" olacaktır</para>
            </summary>
            
            <para><b>Remarks:</b></para>
            
            <remarks>
            
            <para> Don't forget validate file with <see cref="M:Milvasoft.FormFileOperations.FormFileOperations.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,Milvasoft.FormFileOperations.Enums.FileType,System.Int64,System.Collections.Generic.List{System.String})"/>, before use this method.</para>
            
            </remarks>
            
            <typeparam name="TEntity"></typeparam>
            <param name="file"> Uploaded file in entity. </param>
            <param name="entity"></param>
            <param name="basePath"></param>
            <param name="folderNameCreator"></param>
            <param name="propertyName"></param>
            <returns> Completed Task </returns>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.SaveFilesToPathAsync``1(System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile},``0,System.String,Milvasoft.FormFileOperations.FormFileOperations.FilesFolderNameCreator,System.String)">
            <summary>
            <para><b>EN: </b>Save uploaded IFormFile file to physical file path. Target Path will be : "<paramref name ="basePath"></paramref>/<b><paramref name="folderNameCreator"/>()</b>/<paramref name="entity"></paramref>.<paramref name="propertyName"/>"</para>
            <para><b>TR: </b>Yüklenen IFormFile dosyasını fiziksel bir dosya yoluna kaydedin. Hedef Yol: <paramref name ="basePath"></paramref>/<b><paramref name="folderNameCreator"/>()</b>/<paramref name ="entity"></paramref>.<paramref name="propertyName"/>" olacaktır</para>
            </summary>
            
            <para><b>Remarks:</b></para>
            
            <remarks>
            
            <para> Don't forget validate file with <see cref="M:Milvasoft.FormFileOperations.FormFileOperations.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,Milvasoft.FormFileOperations.Enums.FileType,System.Int64,System.Collections.Generic.List{System.String})"/>, before use this method.</para>
            
            </remarks>
            
            <typeparam name="TEntity"></typeparam>
            <param name="files"> Uploaded file in entity. </param>
            <param name="entity"></param>
            <param name="basePath"></param>
            <param name="folderNameCreator"></param>
            <param name="propertyName"></param>
            <returns> Completed Task </returns>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,Milvasoft.FormFileOperations.Enums.FileType,System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            <para><b>EN: </b>Checks that the file compatible the upload rules.</para>
            <para><b>TR: </b>Dosyanın yükleme kurallarıyla uyumlu olup olmadığını kontrol eder.</para>
            </summary>
            <param name="file"> Uploaded file. </param>
            <param name="fileType"> Uploaded file type. (e.g image,video,sound..) </param>
            <param name="maxFileSize"> Maximum file size in bytes of uploaded file. </param>
            <param name="allowedFileExtensions"> Allowed file extensions for <paramref name="fileType"/>. </param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.GetFileUrlPathSectionFromFilePath(System.String,System.String)">
            <summary>
            <para><b>EN: </b>Returns the path of the uploaded file.</para>
            <para><b>TR: </b>Yüklenen dosyanın yolunu döndürür.</para>
            </summary>
            <param name="originalFilePath"> Uploaded file. </param>
            <param name="requestPath"> Request path section. (e.g. api/ImageLibrary) </param>
            <returns> "api/ImageLibrary/1/1.jpeg" </returns>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.GetFileFromPathAsync(System.String,Milvasoft.FormFileOperations.Enums.FileType)">
            <summary>
            <para><b>EN: </b>Gets image file in requested path.</para>
            <para><b>TR: </b>İstenen yolda görüntü dosyasını alır.</para>
            </summary>
            <param name="path"></param>
            <param name="fileType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RemoveDirectoryFileIsIn(System.String)">
            <summary>
            <para><b>EN: </b> Removes the folder the file is in.</para> 
            <para><b>TR: </b> Dosyanın bulunduğu klasörü kaldırır.</para> 
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RemoveFileByPath(System.String)">
            <summary>
            <para><b>EN: </b> Removes file.</para> 
            <para><b>TR: </b> Dosyayı siler.</para> 
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RemoveFilesByPath(System.Collections.Generic.List{System.String})">
            <summary>
            <para><b>EN: </b> Removes file.</para> 
            <para><b>TR: </b> Dosyayı siler.</para> 
            </summary>
            <param name="filePaths"></param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RemoveFilesInFolder(System.String)">
            <summary>
            Delete all files in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RemoveFilesInFolder(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Delete matching files in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
            <param name="fileNames"> File names should contains extension. </param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RemoveDirectoriesInFolder(System.String)">
            <summary>
            Delete all directories in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RemoveDirectoriesInFolder(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Delete matching directories in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
            <param name="directoryNames"></param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RemoveDirectoriesAndFolder(System.String)">
            <summary>
            Delete all files and directories in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.RenameFolderAndFileName(System.String,System.Guid)">
            <summary>
            <para><b>EN: </b>It is used to change the folder and name information of the uploaded file.</para>
            <para><b>TR: </b>Yüklenen dosyanın klasör ve isim bilgisini değiştirmeye yarar</para>
            </summary>
            <param name="oldPath"> Old file path. </param>
            <param name="newId"> New id of item. </param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.GetContentType(System.String)">
            <summary>
            <para><b>EN: </b>Allows learning of the file type.</para>
            <para><b>TR: </b>Dosya tipinin ögrenilmesini saglar.</para>
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.GetMimeTypes">
            <summary>
            <para><b>EN: </b>File types to be accepted.</para>
            <para><b>TR: </b>Kabul edilecn dosya tipleri.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.GetDefaultFileExtensions(Milvasoft.FormFileOperations.Enums.FileType)">
            <summary>
            Gets default defined file extensions by <paramref name="fileType"/>.
            </summary>
            <param name="fileType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.PropertyExists``1(System.String)">
            <summary>
            Checks <paramref name="propertyName"/> exists in <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.Combine(System.String[])">
            <summary>
            <para>Basically a Path.Combine for URLs. Ensures exactly one '/' separates each segment,and exactly on '&amp;' separates each query parameter.
            	  URL-encodes illegal characters but not reserved characters.</para>
            
            </summary>
            <param name="parts">URL parts to combine.</param>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.EncodeIllegalCharacters(System.String,System.Boolean)">
            <summary>
            <para> URL-encodes characters in a string that are neither reserved nor unreserved. Avoids encoding reserved characters such as '/' and '?'. Avoids encoding '%' if it begins a %-hex-hex sequence (i.e. avoids double-encoding).</para>
            </summary>
            <param name="s">The string to encode.</param>
            <param name="encodeSpaceAsPlus">If true, spaces will be encoded as + signs. Otherwise, they'll be encoded as %20.</param>
            <returns>The encoded URL.</returns>
        </member>
        <member name="M:Milvasoft.FormFileOperations.FormFileOperations.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            <para><b>EN: </b>Checks whether or not collection is null or empty. Assumes collection can be safely enumerated multiple times.</para>
            <para><b>TR: </b>Koleksiyonun boş veya boş olup olmadığını denetler. Koleksiyonun birden çok kez güvenli bir şekilde numaralandırılabileceğini varsayar.</para>
            </summary>
        </member>
    </members>
</doc>
