<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.Helpers</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.Helpers.Attributes.ActionFilter.ControllerFilterAttribute">
            <summary>
            Provides the attribute validation exclude opportunity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ControllerFilterAttribute.DisabledProperties">
            <summary>
            Defines the features will be cancelled required.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ControllerFilterAttribute.DisabledNestedProperties">
            <summary>
            Defines the features will be cancelled required. 
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ControllerFilterAttribute.AssemblyTypeForNestedProps">
            <summary>
            Assembly type for disable nested type prop validations.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ControllerFilterAttribute.DTOFolderAssemblyName">
            <summary>
            Folder assembly name for disable nested type prop validations.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ControllerFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ControllerFilterAttribute.GetProperties(System.String)">
            <summary>
            Gets properties.
            </summary>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.ActionFilter.PreventStringInjectionForParametersAttribute">
            <summary>
            Specifies that the class or method that this attribute is applied to requires the specified prevent string injection attacks and min/max length checks.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.PreventStringInjectionForParametersAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.PreventStringInjectionForParametersAttribute.MaximumLength">
            <summary>
            Gets the maximum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.PreventStringInjectionForParametersAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.PreventStringInjectionForParametersAttribute.ResourceType">
            <summary>
            Dummy class type for resource location.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.PreventStringInjectionForParametersAttribute.MailContent">
            <summary>
            If injection attack exist. Validation method will be send mail. 
            If has value mail will be send.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.PreventStringInjectionForParametersAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="minimumLength">The minimum length, inclusive.  It may not be negative.</param>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.PreventStringInjectionForParametersAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute">
            <summary>
            Specifies that the class or method that this attribute is applied to requires the specified the valid id.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute.EntityName">
            <summary>
            Gets or sets error message content.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute.#ctor">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute"/> for localization.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute.#ctor(System.Type)">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute"/> for localization.
            </summary>
            <param name="resourceType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.MilvasoftRegularExpressionAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified must match the localized regex.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MilvasoftRegularExpressionAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MilvasoftRegularExpressionAttribute.ExampleFormatLocalizerKey">
            <summary>
            Gets or sets localized examle regex format.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MilvasoftRegularExpressionAttribute.IsRequired">
            <summary>
            Gets or sets property is required.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MilvasoftRegularExpressionAttribute.#ctor">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MilvasoftRegularExpressionAttribute.#ctor(System.Type)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MilvasoftRegularExpressionAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MilvasoftRegularExpressionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute">
            <summary>
            Determines minimum decimal value.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute.LocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute.FullMessage">
            <summary>
            Gets or sets the full error message spesific content.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute.MinValue">
            <summary>
            Minimum decimal value of requested validate scope.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute.#ctor">
            <summary>
            Constructor of atrribute.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute.#ctor(System.Type)">
            <summary>
            Constructor of atrribute.
            </summary>
            <param name="resourceType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute.#ctor(System.Int32)">
            <summary>
            Constructor of atrribute.
            </summary>
            <param name="minValue"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute.#ctor(System.Int32,System.Type)">
            <summary>
            Constructor of atrribute.
            </summary>
            <param name="minValue"></param>
            <param name="resourceType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MinDecimalValueAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified prevent string injection attacks and min/max length checks.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.MaximumLength">
            <summary>
            Gets the maximum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.ResourceType">
            <summary>
            Dummy class type for resource location.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.MailContent">
            <summary>
            If injection attack exist. Validation method will be send mail. 
            If has value mail will be send.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
            <param name="localizedPropertyName"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="minimumLength">The minimum length, inclusive.  It may not be negative.</param>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
            <param name="localizedPropertyName"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="minimumLength">The minimum length, inclusive.  It may not be negative.</param>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.PreventListStringInjectionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified prevent string injection attacks and min/max length checks.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute.MaximumLength">
            <summary>
            Gets the maximum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute.MailContent">
            <summary>
            If injection attack exist. Validation method will be send mail. 
            If has value mail will be send.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute.ResourceType">
            <summary>
            Dummy class type for resource location.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="minimumLength">The minimum length, inclusive.  It may not be negative.</param>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.PreventStringInjectionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified the valid id.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets member name localizer key.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.ErrorMessageLocalizerKey">
            <summary>
            Gets or sets error message localizer key.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.DontCheckNullable">
            <summary>
            If this is true, validation method won't check list is null.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.#ctor">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.#ctor(System.Type)">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute"/> for localization.
            </summary>
            <param name="resourceType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.CommonHelper">
            <summary>
            Common Helper class.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.PropertyExists``1(System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b>typeof(<typeparamref name="T"/>)</b>. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.PropertyExists(System.Object,System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="content"/></b>. 
            </summary>
            <param name="content"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.PropertyExists(System.Type,System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="type"/></b>. 
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.CreateOrderByKeySelector``1(System.String)">
            <summary>
            Creates order by key selector by <paramref name="orderByPropertyName"/>.
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="T"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <typeparam name="T"></typeparam>
            <param name="orderByPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.EnsureLegalLengths(System.Int32,System.Int32,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Checks that MinimumLength and MaximumLength have legal values.  Throws InvalidOperationException if not.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetDesciption``1(``0)">
            <summary>
            Gets enum description.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.ToGuid(System.Int32)">
            <summary>
            This method return int value to guid value. For DataStore and Test projects.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.IBaseEntity`1">
            <summary>
            <para>  Base interface for abstraction. </para>
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.IBaseEntity`1.Id">
            <summary>
            <para> Primary Key for entity. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.IBaseEntity`1.InsertedDate">
            <summary>
            <para> Date added to database for entity. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.IBaseEntity`1.LastUpdatedDate">
            <summary>
            <para> Update date in database for entity. </para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.IBaseIndelibleEntity`1">
            <summary>
            <para> Base entity for all of indelible entities. All indelible entities have this values.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.IBaseIndelibleEntity`1.DeletedDate">
            <summary>
            <para> Gets or sets the DeletedDate. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.IBaseIndelibleEntity`1.IsDeleted">
            <summary>
            <para> Gets or sets a value indicating whether IsDeleted.</para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3">
            <summary>
            <para>  Base repository for concrete repositories. All repositories must be have this methods. </para> 
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetSoftDeletedEntities">
            <summary>
            Gets or sets GetSoftDeletedEntities. Default is false.
            If value is true, all methods returns all entities.
            If value is false, all methods returns entities which only "IsDeleted" property's value is false.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ResetSoftDeleteState">
            <summary>
            Gets or sets ResetSoftDeleteState. Default is true.
            If value is true, resets 'GetSoftDeletedEntities' property value to false after when every conditional method invoked. 
            Otherwise 
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.CreateIsDeletedFalseExpression">
            <summary>
            Gets <b>entity => entity.IsDeleted == false</b> expression, if <typeparamref name="TEntity"/> is assignable from <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.IBaseIndelibleEntity`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetFirstOrDefaultAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetSingleOrDefaultAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAllAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range. 
                  If the condition is requested, it also provides that condition.</para> 
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                   If the condition is requested, it also provides that condition.</para> 
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.</para> 
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.</para> 
                    
             </summary>
             
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.</para> 
                  
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.</para> 
                    
             </summary>
             
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                  If the condition is requested, it also provides that condition.</para> 
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                  If the condition is requested, it also provides that condition.</para> 
                  
            </summary>
            
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                    If the condition is requested, it also provides that condition.</para> 
                    
             </summary>
            
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
            <para> Returns one entity by entity Id from database asynchronously.</para> 
             </summary>
             <param name="id"></param>
             <param name=""></param>
             <param name="conditionExpression"></param>
             <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetRequiredByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns one entity by entity Id from database asynchronously. </para> 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetByIdAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetRequiredByIdAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.AddAsync(`0)">
            <summary>
            <para> Adds single entity to database asynchronously.</para> 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para> Adds multiple entities to database asynchronously.</para> 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.UpdateAsync(`0)">
            <summary>
            <para> Updates specified entity in database asynchronously.</para> 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para> Updates multiple entities in database asynchronously.</para> 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.DeleteAsync(`0)">
            <summary>
            <para> Deletes single entity from database asynchronously..</para> 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para> Deletes multiple entity from database asynchronously. </para> 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetGroupedAndCountAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Groups entities with <paramref name="groupByPropertyName"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="groupByPropertyName"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> var dbSet = _contextRepository.GetDbSet{Poco}();  <see cref="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetDbSet``1"></see> </para>
            
              <para> var groupByClause =<para> from poco in dbSet </para>                                                                     </para>
              <para>                           group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                           select new PocoDTO                                                                             </para>
              <para>                           {                                                                                              </para>
              <para>                                Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                           };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClause).ConfigureAwait(false);                        </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="groupedClause"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAsync``1(System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> Func{IQueryablePocoDTO>} groupByClauseFunc = () => <para>  from poco in _contextRepository.GetDbSet{Poco}() </para>                                       </para>
              <para>                                                            group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                                                            select new PocoDTO                                                                             </para>
              <para>                                                            {                                                                                              </para>
              <para>                                                                 Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                                                 PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                                                 PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                                                            };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClauseFunc).ConfigureAwait(false);                                                     </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAndPaginatedAsync``1(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> Func{IQueryablePocoDTO>} groupByClauseFunc = () => <para>  from poco in _contextRepository.GetDbSet{Poco}() </para>                                       </para>
              <para>                                                            group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                                                            select new PocoDTO                                                                             </para>
              <para>                                                            {                                                                                              </para>
              <para>                                                                 Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                                                 PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                                                 PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                                                            };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, groupByClauseFunc).ConfigureAwait(false);                                              </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAndPaginatedAndOrderedAsync``1(System.Int32,System.Int32,System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> Func{IQueryablePocoDTO>} groupByClauseFunc = () => <para>  from poco in _contextRepository.GetDbSet{Poco}() </para>                                       </para>
              <para>                                                            group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                                                            select new PocoDTO                                                                             </para>
              <para>                                                            {                                                                                              </para>
              <para>                                                                 Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                                                 PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                                                 PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                                                            };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, "PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                           </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAnOrderedAsync``1(System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> Func{IQueryablePocoDTO>} groupByClauseFunc = () => <para>  from poco in _contextRepository.GetDbSet{Poco}() </para>                                       </para>
              <para>                                                            group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                                                            select new PocoDTO                                                                             </para>
              <para>                                                            {                                                                                              </para>
              <para>                                                                 Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                                                 PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                                                 PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                                                            };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}("PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                                  </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetMaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get max value of entities.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetMaxAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get max value of entities. With includes.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetMaxOfPropertyAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxPropertyName"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetMaxOfPropertyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get count of entities.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ReplaceOldsWithNewsAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ReplaceOldsWithNewsInSeperateDatabaseProcessAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.RemoveAllAsync">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ExecuteQueryAsync(System.String)">
            <summary>
            <para> Executes sql query to database asynchronously.(e.g. trigger, event) </para> 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Action)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.InitializeUpdating``2(``0)">
            <summary>
            <para> User update process. </para>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.RemoveExpiredTokensAsync``2(Microsoft.AspNetCore.Identity.UserManager{``0},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para> Removes expired tokens from the system. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks :</b></para>
            
            <para> Your DbContext(<typeparamref name="TContext"/>) must inherit from <see cref="T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext"/>. </para>
            <para> Your DbContext(<typeparamref name="TContext"/>) must contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/> DbSet of name "UserTokens". </para>
            
            </remarks>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TContext"/>'s properties doesn't contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/> of name 'UserTokens'. </exception>
            
            <param name="userManager"> User manager </param>
            <param name="loginProvider"> Login Provider (e.g. Facebook) </param>
            <param name="tokenName"> Token Type </param>
            <param name="cachedTokenDictionary"> Dictionary params : Key = userName of <typeparamref name="TUser"/>. Value = JWT security Token as string. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.GetDbSet``1">
            <summary>
            Gets requested DbSet by <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.BaseEntity`1">
            <summary>
            <para> Base entity for all of erasable entities. All erasable entities have this values. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.BaseEntity`1.Id">
            <summary>
            <para> Unique database key. Represents primary key.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.BaseEntity`1.InsertedDate">
            <summary>
            <para> Date added to database for entity.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.BaseEntity`1.LastUpdatedDate">
            <summary>
            <para> Update date in database for entity.</para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.BaseIndelibleEntity`1">
            <summary>
            <para> Base entity for all of indelible entities. All indelible entities have this values. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.BaseIndelibleEntity`1.DeletedDate">
            <summary>
            <para> Delete date in database for entity. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.BaseIndelibleEntity`1.IsDeleted">
            <summary>
            <para> State of entity in the database. Default value is true. </para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3">
            <summary>
            <para> Base repository for concrete repositories. All Ops!yon repositories must be have this methods. </para> 
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3._dbContext">
            <summary>
            DbContext object.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetSoftDeletedEntities">
            <summary>
            Gets or sets GetSoftDeletedEntities. Default is false.
            If value is true, all methods returns all entities.
            If value is false, all methods returns entities which only "IsDeleted" property's value is false.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ResetSoftDeleteState">
            <summary>
            Gets or sets ResetSoftDeleteState. Default is true.
            If value is true, resets 'GetSoftDeletedEntities' property value to false after when every conditional method invoked. 
            Otherwise 
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.#ctor(`2)">
            <summary>
            Constructor of BaseRepository for <paramref name="dbContext"/> injection.
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.CreateIsDeletedFalseExpression">
            <summary>
            Gets <b>entity => entity.IsDeleted == false</b> expression, if <typeparamref name="TEntity"/> is assignable from <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.IBaseIndelibleEntity`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetFirstOrDefaultAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetSingleOrDefaultAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAllAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range. 
                  If the condition is requested, it also provides that condition.</para> 
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                   If the condition is requested, it also provides that condition.</para> 
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.</para> 
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.</para> 
                    
             </summary>
             
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.</para> 
                  
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.</para> 
                    
             </summary>
             
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsOrderedAsync(System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                  If the condition is requested, it also provides that condition.</para> 
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                    If the condition is requested, it also provides that condition.</para> 
                    
             </summary>
            
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                  If the condition is requested, it also provides that condition.</para> 
                  
            </summary>
            
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
             <para> Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                    If the condition is requested, it also provides that condition.</para> 
                    
             </summary>
            
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
            <para> Returns one entity by entity Id from database asynchronously.</para> 
             </summary>
             <param name="id"></param>
             <param name=""></param>
             <param name="conditionExpression"></param>
             <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetRequiredByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns one entity by entity Id from database asynchronously. </para> 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetByIdAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetRequiredByIdAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <para> Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition.</para> 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.AddAsync(`0)">
            <summary>
            <para> Adds single entity to database asynchronously.</para> 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para> Adds multiple entities to database asynchronously.</para> 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.UpdateAsync(`0)">
            <summary>
            <para> Updates specified entity in database asynchronously.</para> 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para> Updates multiple entities in database asynchronously.</para> 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.DeleteAsync(`0)">
            <summary>
            <para> Deletes single entity from database asynchronously..</para> 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para> Deletes multiple entity from database asynchronously. </para> 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetGroupedAndCountAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Groups entities with <paramref name="groupByPropertyName"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="groupByPropertyName"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> var dbSet = _contextRepository.GetDbSet{Poco}();  <see cref="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetDbSet``1"></see> </para>
            
              <para> var groupByClause =<para> from poco in dbSet </para>                                                                     </para>
              <para>                           group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                           select new PocoDTO                                                                             </para>
              <para>                           {                                                                                              </para>
              <para>                                Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                           };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClause).ConfigureAwait(false);                        </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="groupedClause"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAsync``1(System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> Func{IQueryablePocoDTO>} groupByClauseFunc = () => <para>  from poco in _contextRepository.GetDbSet{Poco}() </para>                                       </para>
              <para>                                                            group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                                                            select new PocoDTO                                                                             </para>
              <para>                                                            {                                                                                              </para>
              <para>                                                                 Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                                                 PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                                                 PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                                                            };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClauseFunc).ConfigureAwait(false);                                                     </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAndPaginatedAsync``1(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> Func{IQueryablePocoDTO>} groupByClauseFunc = () => <para>  from poco in _contextRepository.GetDbSet{Poco}() </para>                                       </para>
              <para>                                                            group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                                                            select new PocoDTO                                                                             </para>
              <para>                                                            {                                                                                              </para>
              <para>                                                                 Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                                                 PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                                                 PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                                                            };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, groupByClauseFunc).ConfigureAwait(false);                                              </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAndPaginatedAndOrderedAsync``1(System.Int32,System.Int32,System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> Func{IQueryablePocoDTO>} groupByClauseFunc = () => <para>  from poco in _contextRepository.GetDbSet{Poco}() </para>                                       </para>
              <para>                                                            group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                                                            select new PocoDTO                                                                             </para>
              <para>                                                            {                                                                                              </para>
              <para>                                                                 Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                                                 PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                                                 PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                                                            };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, "PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                           </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAnOrderedAsync``1(System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
              <para> Func{IQueryablePocoDTO>} groupByClauseFunc = () => <para>  from poco in _contextRepository.GetDbSet{Poco}() </para>                                       </para>
              <para>                                                            group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                </para>       
              <para>                                                            select new PocoDTO                                                                             </para>
              <para>                                                            {                                                                                              </para>
              <para>                                                                 Id = groupedPocos.Key.Id,                                                                 </para>
              <para>                                                                 PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
              <para>                                                                 PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
              <para>                                                            };                                                                                             </para>
                                   
              <para> var result = await _pocoRepository.GetGroupedAsync{PocoDTO}("PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                                  </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetMaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get max value of entities.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetMaxAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get max value of entities. With includes.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetMaxOfPropertyAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxPropertyName"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetMaxOfPropertyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get count of entities.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ReplaceOldsWithNewsInSeperateDatabaseProcessAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ReplaceOldsWithNewsAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.RemoveAllAsync">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1._dbContext">
            <summary>
            DbContext object.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.#ctor(`0)">
            <summary>
            Constructor of ContextRepository for inject context.
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ExecuteQueryAsync(System.String)">
             <summary>
            <para> Executes sql query to database asynchronously.(e.g. trigger, event). </para> 
             </summary>
             <param name="query"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Action)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.InitializeUpdating``2(``0)">
            <summary>
            <para> User update process. </para>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.RemoveExpiredTokensAsync``2(Microsoft.AspNetCore.Identity.UserManager{``0},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para> Removes expired tokens from the system. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks :</b></para>
            
            <para> Your DbContext(<typeparamref name="TContext"/>) must inherit from <see cref="T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext"/>. </para>
            <para> Your DbContext(<typeparamref name="TContext"/>) must contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/> DbSet of name "UserTokens". </para>
            <para> Your DbContext(<typeparamref name="TContext"/>) must contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUser`1"/> DbSet of name "Users". </para>
            
            </remarks>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TContext"/>'s properties doesn't contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUser`1"/> of name 'Users'. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TContext"/>'s properties doesn't contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/> of name 'UserTokens'. </exception>
            
            <param name="userManager"> User manager </param>
            <param name="loginProvider"> Login Provider (e.g. Facebook) </param>
            <param name="tokenName"> Token Type </param>
            <param name="cachedTokenDictionary"> Dictionary params : Key = userName of <typeparamref name="TUser"/>. Value = JWT security Token as string. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetRequiredContents``1">
            <summary>
            Gets requested contents by <typeparamref name="TEntity"/> DbSet.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetRequiredContents(System.Type)">
            <summary>
            Gets requested contents by <paramref name="type"/> DbSet.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetDbSet``1">
            <summary>
            Gets requested DbSet by <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable">
             <summary>
            <para><b>EN: </b> Supports queryable Include/ThenInclude chaining operators.</para> 
            <para><b>TR: </b>Sorgulanabilir Include / ThenInclude zincirleme operatörlerini destekler.</para> 
             </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable`1">
             <summary>
            <para><b>EN: </b>Supports queryable Include/ThenInclude chaining operators.</para> 
            <para><b>TR: </b>Sorgulanabilir Include / ThenInclude zincirleme operatörlerini destekler.</para> 
             </summary>
             <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable`2">
             <summary>
            <para><b>EN: </b>Supports queryable Include/ThenInclude chaining operators.</para> 
            <para><b>TR: </b>Sorgulanabilir Include / ThenInclude zincirleme operatörlerini destekler.</para> 
             </summary>
             <typeparam name="TEntity"></typeparam>
             <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.Includable`1">
             <summary>
            <para><b>EN: </b> Supports queryable Include/ThenInclude chaining operators.</para> 
            <para><b>TR: </b>Sorgulanabilir Include / ThenInclude zincirleme operatörlerini destekler.</para> 
             </summary>
             <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.Includable`2">
             <summary>
            <para><b>EN: </b>Supports queryable Include/ThenInclude chaining operators.</para> 
            <para><b>TR: </b>Sorgulanabilir Include / ThenInclude zincirleme operatörlerini destekler.</para> 
             </summary>
             <typeparam name="TEntity"></typeparam>
             <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions">
            <summary>
            Includable extension for Ops!yon API. For reason to use that class: We cannot use default include process which in EntityFramework. Because of mysql and context. 
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions.Include``2(Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0,``2},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0,System.Collections.Generic.IEnumerable{``2}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0,System.Collections.Generic.ICollection{``2}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludeMultipleClass">
            <summary>
            Allows to include multiple class.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludeMultipleClass.IncludeMultiple``1(System.Linq.IQueryable{``0},System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable})">
             <summary>
            <para><b>EN: </b> Supports queryable Include/ThenInclude chaining operators.</para> 
            <para><b>TR: </b>Sorgulanabilir Include / ThenInclude zincirleme operatörlerini destekler.</para> 
             </summary>
             <example>
             var personnelTable = _personnelTableRepository.GetAllWithIncludes(i => i.Include(p=>p.personnel).Include(p=>p.tableSetting));
             </example>
             <typeparam name="T"></typeparam>
             <param name="query"></param>
             <param name="includes"></param>
             <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Enums.MailSubject">
            <summary>
            Mail subjects.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.MailSubject.Error">
            <summary>
            The enum that should be sent for error messages.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.MailSubject.Hack">
            <summary>
            The enum that should be sent for hack warning.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.MailSubject.ShutDown">
            <summary>
            The enum that should be sent for hack warning.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.AddingNewEntityWithExistsIdException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.AddingNewEntityWithExistsIdException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.AddingNewEntityWithExistsIdException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.AddingNewEntityWithExistsIdException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.AddingNewEntityWithExistsIdException"/> class with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.AddingNewEntityWithExistsIdException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.AddingNewEntityWithExistsIdException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.CannotFindEntityException">
            <summary>
            <para><b>EN: </b>The exception that is thrown when attempt to search for an entity not found in the Repository.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotFindEntityException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotFindEntityException"/> class with defined default message by constructor.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotFindEntityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotFindEntityException"/> class with an entity id not found in the Repository.
            The spesific message of base class uses this invalid id when does not send a specific message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotFindEntityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotFindEntityException"/> class with an entity id not found in the Repository.
            The spesific message of base class uses this invalid id when does not send a specific message.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.CannotFindEnumByIdException">
            <summary>
            The exception that is thrown when attempt to get enum by invalid id.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotFindEnumByIdException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotFindEnumByIdException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotFindEnumByIdException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotFindEnumByIdException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotFindEnumByIdException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotFindEnumByIdException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>s
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.CannotStartRedisServerException">
            <summary>
            Exception class to be thrown when Redis Server fails to start.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotStartRedisServerException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotStartRedisServerException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotStartRedisServerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotStartRedisServerException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotStartRedisServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotStartRedisServerException"/> class  with a specified error message.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.CannotUpdateOrDeleteDefaultRecordException">
            <summary>
            The exception that is thrown when attempt to add an unstockable product to Product Stock table.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotUpdateOrDeleteDefaultRecordException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotUpdateOrDeleteDefaultRecordException"/> class with defined default message by constructor.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotUpdateOrDeleteDefaultRecordException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotUpdateOrDeleteDefaultRecordException"/> class with defined default message by constructor.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.CannotUpdateOrDeleteDefaultRecordException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.CannotUpdateOrDeleteDefaultRecordException"/> class with defined default message by constructor.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException">
            <summary>
            The exception that is thrown when attempt to deleting invalid entities.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException"/> class.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.DeletingInvalidEntityException">
            <summary>
            The exception that is thrown when attempt to delete an entity that is not in the Repository.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.DeletingInvalidEntityException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <c>ABKExceptionLibrary.DeletingInvalidEntityException</c> class  with an entity id not found in the Repository. 
            The spesific message of base class uses this invalid id when does not send a specific message.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.DeletingInvalidEntityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException"/> class with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.DeletingInvalidEntityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.DeletingEntityWithRelationsException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.EmptyListException">
            <summary>
            The exception that is thrown when attempt to do process on empty list.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.EmptyListException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.EmptyListException"/> class with defined default message by constructor.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.EmptyListException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.EmptyListException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.EmptyListException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.EmptyListException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.ExpiredDemoException">
            <summary>
            The exception that is thrown when attempt to do operation with null objects.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.ExpiredDemoException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.ExpiredDemoException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.ExpiredDemoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.ExpiredDemoException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.ExpiredDemoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.ExpiredDemoException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.FeatureNotImplementedException">
            <summary>
            The exception that is thrown when attempt to do operation with not implemented method.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.FeatureNotImplementedException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.FeatureNotImplementedException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.FeatureNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.FeatureNotImplementedException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.FeatureNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.FeatureNotImplementedException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.IdentityResultException">
            <summary>
            The exception that is thrown when identity exceptions.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.IdentityResultException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.IdentityResultException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.IdentityResultException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.IdentityResultException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.IdentityResultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.IdentityResultException"/> class with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.IdentityResultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.IdentityResultException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.InvalidLicenceException">
            <summary>
            The exception that is thrown when attempt to do operation with null objects.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidLicenceException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidLicenceException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidLicenceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidLicenceException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidLicenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidLicenceException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.InvalidNumericValueException">
            <summary>
            The exception that is thrown when attempt to process invalid numeric value in the conditions of situation.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidNumericValueException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            <para><b>EN: </b>Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidNumericValueException"/> class.</para>
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidNumericValueException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidNumericValueException"/> class  with invalid value. 
            The spesific message of base class uses this invalid value when does not send a specific message.
            </summary>
            <param name="invalidValue"></param>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidNumericValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidNumericValueException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidNumericValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidNumericValueException"/> class  with invalid value. 
            The spesific message of base class uses this invalid value when does not send a specific message.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.InvalidParameterException">
            <summary>
            The exception that is thrown when attempt to get enum by invalid id.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidParameterException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidParameterException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidParameterException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidParameterException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidParameterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidParameterException"/> class with a specified error message.
            </summary>
            <summary>
            
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidParameterException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.InvalidRelatedProcessException">
            <summary>
            The exception that is thrown when attempt to do operation with null objects.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidRelatedProcessException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidRelatedProcessException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidRelatedProcessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidRelatedProcessException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.InvalidRelatedProcessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.InvalidRelatedProcessException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.MilvasoftBaseException">
            <summary>
            Base exception class.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Exceptions.MilvasoftBaseException.ErrorCode">
            <summary>
            Defines error code.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvasoftBaseException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvasoftBaseException"/> class  with a specified error message.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvasoftBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvasoftBaseException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvasoftBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvasoftBaseException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode">
            <summary>
            Defines the MilvasoftExceptionCode.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.BaseException">
            <summary>
            Defines the UnknownError.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.CannotFindEntity">
            <summary>
            Defines the CannotFindEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.AddingNewEntityWithExsistId">
            <summary>
            Defines the AddingNewEntityWithExsistId.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.CannotBeAddedProductToStock">
            <summary>
            Defines the CannotBeAddedProductToStock.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.CannotAddTheEntitiesToAllOfRepositories">
            <summary>
            Defines the CannotAddTheEntitiesToAllOfRepositories.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.CannotFindEnumById">
            <summary>
            Defines the CannotFindEnumById.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.CannotStartRedisServer">
            <summary>
            Defines the CannotStartRedisServer.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.DeletingEntityWithRelations">
            <summary>
            Defines the DeletingEntityWithRelations.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.DeletingInvalidEntity">
            <summary>
            Defines the DeletingInvalidEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.DeletingSupplierWithDebt">
            <summary>
            Defines the DeletingSupplierWithDebt.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.EmptyList">
            <summary>
            Defines the EmptyList.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.InvalidNumericValue">
            <summary>
            Defines the InvalidNumericValue.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.InvalidParameter">
            <summary>
            Defines the InvalidParameter.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.InvalidStringExpression">
            <summary>
            Defines the InvalidStringExpression.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.NullParameter">
            <summary>
            Defines the NullParameter.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.UnknownStockType">
            <summary>
            Defines the UnknownStockType.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.UpdatingInvalidEntity">
            <summary>
            Defines the UpdatingInvalidEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.NotLoggedInUser">
            <summary>
            Defines the NotLoggedInUser.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.AnotherLoginExists">
            <summary>
            Defines the AnotherLoginExists.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.OldVersion">
            <summary>
            Defines the OldVersion.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.InvalidLicence">
            <summary>
            Defines the InvalidLicence.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.ExpiredDemo">
            <summary>
            Defines the ExpiredDemo.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.NeedForceOperation">
            <summary>
            Defines the NeedForceOperation.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.OutOfStock">
            <summary>
            Defines the OutOfStock.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.InvalidMateralDeficit">
            <summary>
            Defines the InvalidMateralDeficit.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.CannotUpdateOrDeleteDefaultRecord">
            <summary>
            Defines the CannotUpdateOrDeleteDefaultRecord.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.ValidationError">
            <summary>
            Defines the ValidationError.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.GeneralException">
            <summary>
            Defines the GeneralException.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.InvalidRelatedProcess">
            <summary>
            Defines the InvalidRelatedProcess.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.FeatureNotImplementedException">
            <summary>
            Defines the FeatureNotImplementedException.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvasoftExceptionCode.IdentityResultException">
            <summary>
            Defines the IdentityResultException.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.MilvasoftValidationException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvasoftValidationException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvasoftValidationException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvasoftValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvasoftValidationException"/> class with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvasoftValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvasoftValidationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.NeedForceOperationException">
            <summary>
            The exception that is thrown when attempt to search for an entity not found in the Repository.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.NeedForceOperationException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.NeedForceOperationException"/> class with defined default message by constructor.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.NeedForceOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.NeedForceOperationException"/> class with an entity id not found in the Repository. 
            The spesific message of base class uses this invalid id when does not send a specific message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.NeedForceOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.NeedForceOperationException"/> class with an entity id not found in the Repository.
            The spesific message of base class uses this invalid id when does not send a specific message.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.NullParameterException">
            <summary>
            The exception that is thrown when attempt to do operation with null objects.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.NullParameterException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.NullParameterException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.NullParameterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.NullParameterException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.NullParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.NullParameterException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.OldVersionException">
            <summary>
            The exception that is thrown when attempt to do operation with null objects.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.OldVersionException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.OldVersionException"/> class.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.OldVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.OldVersionException"/> class  with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.OldVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.OldVersionException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.UpdatingInvalidEntityException">
            <summary>
            The exception that is thrown when attempt to update an entity that is not in the Repository.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.UpdatingInvalidEntityException.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.UpdatingInvalidEntityException"/> class with an entity id not found in the Repository. 
            The spesific message of base class uses this invalid id when does not send a specific message.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.UpdatingInvalidEntityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.UpdatingInvalidEntityException"/> class with a specified error message.
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.UpdatingInvalidEntityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.UpdatingInvalidEntityException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="customMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.Append``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.ExpressionType)">
            <summary>
            Appends <paramref name="right"/> to <paramref name="left"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="expressionAppendType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a lambda expression that represents a conditional AND operation
            </summary>
            <param name="left">An expression to set the left property of the binary expression</param>
            <param name="right">An expression to set the right property of the binary expression</param>
            <returns>A binary expression that has the node type property equal to AndAlso, 
            and the left and right properties set to the specified values</returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a lambda expression that represents a conditional OR operation
            </summary>
            <param name="left">An expression to set the left property of the binary expression</param>
            <param name="right">An expression to set the right property of the binary expression</param>
            <returns>A binary expression that has the node type property equal to OrElse, 
            and the left and right properties set to the specified values</returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            <para><b>EN: </b>Determines the right casting and pets property from expression with this right casting.</para>
            <para><b>TR: </b>Bu doğru döküm ile ifadeden doğru döküm ve evcil hayvan özelliğini belirler.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            <para><b>EN: </b>Determines the right casting and pets property name from expression with this right casting.</para>
            <para><b>TR: </b>Bu doğru döküm ile ifadeden doğru döküm ve evcil hayvan özellik adını belirler.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.GenericCollection.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            <para><b>EN: </b>Checks whether or not collection is null or empty. Assumes collection can be safely enumerated multiple times.</para>
            <para><b>TR: </b>Koleksiyonun boş veya boş olup olmadığını denetler. Koleksiyonun birden çok kez güvenli bir şekilde numaralandırılabileceğini varsayar.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Filter.FilterByDate``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}})">
             <summary>
             <para> Filter <paramref name="contentList"/> by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
             </summary>
             
             <remarks>
             
             <para><b>Remarks: </b></para>
             
             <para> If a selection has been made between two dates, it will return those between the two dates. </para>
             <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
             <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
             
             </remarks>
            
             <typeparam name="T"></typeparam>
             <param name="contentList"></param>
             <param name="dateTopValue"></param>
             <param name="dateLowerValue"></param>
             <param name="dateProperty"></param>
             <returns> Filtered <paramref name="contentList"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Filter.CreateDateFilterExpression``1(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}})">
            <summary>
            <para> Creates expression by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks: </b></para>
            
            <para> If a selection has been made between two dates, it will return those between the two dates. </para>
            <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
            <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
            
            </remarks>
            
            <typeparam name="T"></typeparam>
            <param name="dateTopValue"></param>
            <param name="dateLowerValue"></param>
            <param name="dateProperty"></param>
            <returns> 
            
            Example Return when both values has value :
            
            <code> i => i.<paramref name="dateProperty"/> <b>biggerThanOrEqual</b> <paramref name="dateLowerValue"/> <b>AND</b> i.<paramref name="dateProperty"/> <b>lessThanOrEqual</b> <paramref name="dateTopValue"/> </code>
            
            </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Filter.CreateDateFilterExpression``1(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.DateTime}})">
            <summary>
            <para> Creates expression by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks: </b></para>
            
            <para> If a selection has been made between two dates, it will return those between the two dates. </para>
            <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
            <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
            
            </remarks>
            
            <typeparam name="T"></typeparam>
            <param name="dateTopValue"></param>
            <param name="dateLowerValue"></param>
            <param name="dateProperty"></param>
            <returns> 
            
            Example Return when both values has value :
            
            <code> i => i.<paramref name="dateProperty"/> <b>biggerThanOrEqual</b> <paramref name="dateLowerValue"/> <b>AND</b> i.<paramref name="dateProperty"/> <b>lessThanOrEqual</b> <paramref name="dateTopValue"/> </code>
            
            </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Filter.GetSpecMaxValues``2(System.Collections.Generic.IEnumerable{``0},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}}[])">
            <summary>
            <para>Gets maximum list values of matching properties of <paramref name="maxValuesObject"/> and <typeparamref name = "T" />.</para>
            <para>Returns that max values in <paramref name="maxValuesObject"/>.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturnObject"></typeparam>
            <param name="entities"></param>
            <param name="maxValuesObject"></param>
            <param name="requestedProperties"></param>
            <returns> Mapped <paramref name="maxValuesObject"/> </returns>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7">
            <summary>
            Provides Identity operations like sign in, sign out.
            </summary>
            <typeparam name="TUserManager"></typeparam>
            <typeparam name="TDbContext"></typeparam>
            <typeparam name="TLocalizer"></typeparam>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TLoginResultDTO"></typeparam>
            <typeparam name="TSignUpDTO"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.LoginProvider">
            <summary>
            The authentication scheme for the provider the token is associated with.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.TokenName">
            <summary>
            The name of token.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.UserValidation">
            <summary>
            Delegate for user validation.
            </summary>
            <param name="loginDTO"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.UserValidationByUserType">
            <summary>
            Delegate for user validation.
            </summary>
            <param name="loginDTO"></param>
            <param name="user"></param>
            <param name="isUserType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.SignInAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,Milvasoft.Helpers.Identity.Abstract.IIdentityOperations{`0,`1,`2,`3,`4,`5,`6}.UserValidation,System.DateTime)">
            <summary>
            Signs in for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <param name="loginDTO"></param>
            <param name="userValidation"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.SignInAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,System.Boolean,Milvasoft.Helpers.Identity.Abstract.IIdentityOperations{`0,`1,`2,`3,`4,`5,`6}.UserValidationByUserType,System.DateTime)">
            <summary>
            Signs in for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <param name="loginDTO"></param>
            <param name="isUserType"></param>
            <param name="userValidationByUserType"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.SignOutAsync">
            <summary>
            Signs out from database. Returns null if already signed out.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.DeleteUserAsync(System.Guid)">
            <summary>
            Delete user by <paramref name="userId"/>.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ResetPasswordAsync(System.String)">
            <summary>
            Resetes current user's password.
            </summary>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ChangeCurrentUserPasswordAsync(System.String,System.String)">
            <summary>
            Change current user's password.
            </summary>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ChangePasswordAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> password.
            </summary>
            <param name="user"></param>
            <param name="currentPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ChangeEmailAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> email.
            </summary>
            <param name="user"></param>
            <param name="newEmail"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ChangePhoneNumberAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> phone number.
            </summary>
            <param name="user"></param>
            <param name="newPhoneNumber"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ThrowErrorMessagesIfNotSuccess(Microsoft.AspNetCore.Identity.IdentityResult)">
            <summary>
            If <paramref name="identityResult"/> is not succeeded throwns <see cref="T:Milvasoft.Helpers.Exceptions.InvalidParameterException"/>.
            </summary>
            <param name="identityResult"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ValidateUser(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,`3)">
            <summary>
            Validating user to login.
            </summary>
            <param name="loginDTO"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.GenerateTokenWithRoleAsync(`3,System.DateTime)">
            <summary>
            Roll is added according to user type and token is produced.
            </summary>
            <param name="user"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.GenerateToken(System.String,System.Collections.Generic.IList{System.String},System.DateTime)">
            <summary>
            If Authentication is successful, JWT tokens are generated.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ValidateTokenGetExpiredTime(System.String)">
            <summary>
            Decode Process of Token returns the time inside by Decoding the Token
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.GetPrincipalForAccessToken(System.String)">
            <summary>
            Returns Claims in token for token decode
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.ILoginDTO">
            <summary>
            Login and sign up processes are happens with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ILoginDTO.Username">
            <summary>
            Username of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ILoginDTO.Email">
            <summary>
            Email of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ILoginDTO.Password">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ILoginDTO.Persistent">
            <summary>
            Remember me option.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO">
            <summary>
            Login and sign up processes are happens with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO.Username">
            <summary>
            Username of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO.Email">
            <summary>
            Email of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO.Password">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO.PhoneNumber">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7">
            <summary>
            Provides Identity operations like sign in, sign out.
            </summary>
            <typeparam name="TUserManager"></typeparam>
            <typeparam name="TDbContext"></typeparam>
            <typeparam name="TLocalizer"></typeparam>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TLoginResultDTO"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.LoginProvider">
            <summary>
            The authentication scheme for the provider the token is associated with.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.TokenName">
            <summary>
            The name of token.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.#ctor(`0,Microsoft.AspNetCore.Identity.SignInManager{`3},Milvasoft.Helpers.Identity.Concrete.ITokenManagement,Milvasoft.Helpers.DataAccess.Abstract.IContextRepository{`1},`2,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            <para><b>EN: </b> Performs constructor injection for repository interfaces used in this service.</para>
            <para><b>TR: </b> Bu hizmette kullanılan depo arabirimleri için yapıcı enjeksiyonu gerçekleştirir.</para>
            </summary>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="tokenManagement"></param>
            <param name="httpClient"></param>
            <param name="contextRepository"></param>
            <param name="localizer"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.SignInAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,Milvasoft.Helpers.Identity.Abstract.IIdentityOperations{`0,`1,`2,`3,`4,`5,`6}.UserValidation,System.DateTime)">
            <summary>
            Signs in for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <param name="loginDTO"></param>
            <param name="userValidation"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.SignInAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,System.Boolean,Milvasoft.Helpers.Identity.Abstract.IIdentityOperations{`0,`1,`2,`3,`4,`5,`6}.UserValidationByUserType,System.DateTime)">
            <summary>
            Signs in for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <param name="loginDTO"></param>
            <param name="isUserType"></param>
            <param name="userValidationByUserType"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.SignOutAsync">
            <summary>
            Signs out from database. Returns null if already signed out.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.DeleteUserAsync(System.Guid)">
            <summary>
            Delete user by <paramref name="userId"/>.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ResetPasswordAsync(System.String)">
            <summary>
            Resetes current user's password.
            </summary>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ChangeCurrentUserPasswordAsync(System.String,System.String)">
            <summary>
            Change current user's password.
            </summary>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ChangePasswordAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> password.
            </summary>
            <param name="user"></param>
            <param name="currentPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ChangeEmailAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> email.
            </summary>
            <param name="user"></param>
            <param name="newEmail"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ChangePhoneNumberAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> phone number.
            </summary>
            <param name="user"></param>
            <param name="newPhoneNumber"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ThrowErrorMessagesIfNotSuccess(Microsoft.AspNetCore.Identity.IdentityResult)">
            <summary>
            If <paramref name="identityResult"/> is not succeeded throwns <see cref="T:Milvasoft.Helpers.Exceptions.InvalidParameterException"/>.
            </summary>
            <param name="identityResult"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ValidateUser(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,`3)">
            <summary>
            Validating user to login.
            </summary>
            <param name="loginDTO"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.GenerateTokenWithRoleAsync(`3,System.DateTime)">
            <summary>
            Roll is added according to user type and token is produced.
            </summary>
            <param name="user"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.GenerateToken(System.String,System.Collections.Generic.IList{System.String},System.DateTime)">
            <summary>
            If Authentication is successful, JWT tokens are generated.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ValidateTokenGetExpiredTime(System.String)">
            <summary>
            Decode Process of Token returns the time inside by Decoding the Token
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.GetPrincipalForAccessToken(System.String)">
            <summary>
            Returns Claims in token for token decode
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1">
            <summary>
            Provides localized identity error messages. All error's code is nameof(<see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/>) method. (e.g. Code = "DefaultError")
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.#ctor(`0)">
            <summary>
            Constructor for localizer dependenct injection.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.DefaultError">
            <summary>
            An unknown failure has occurred. Localizer Key : IdentityDefaultError
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.DuplicateUserName(System.String)">
            <summary>
            There is another user with this username. Localizer Key : IdentityDuplicateUsername
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.DuplicateEmail(System.String)">
            <summary>
            There is another user with this email. Localizer Key : IdentityDuplicateEmail
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.InvalidUserName(System.String)">
            <summary>
            Invalid username. Localizer Key : IdentityInvalidUsername
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.InvalidEmail(System.String)">
            <summary>
            Invalid email. Localizer Key : IdentityInvalidEmail
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.ConcurrencyFailure">
            <summary>
            Concurrency failure, data has been modified. Localizer Key : IdentityConcurrencyFailure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.DuplicateRoleName(System.String)">
            <summary>
            This role is already exist. Localizer Key : IdentityDuplicateRoleName
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.InvalidRoleName(System.String)">
            <summary>
            Invalid role name. Localizer Key : IdentityInvalidRoleName
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.InvalidToken">
            <summary>
            Invalid credentials. Localizer Key : IdentityInvalidToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.LoginAlreadyAssociated">
            <summary>
            This user is already logged in. Localizer Key : IdentityLoginAlreadyAssociated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.PasswordMismatch">
            <summary>
            Incorrect password. Localizer Key : IdentityPasswordMismatch
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.PasswordRequiresDigit">
            <summary>
            Password must have at least one digit. Localizer Key : IdentityPasswordRequiresDigit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.PasswordRequiresLower">
            <summary>
            Password must have at least one lowercase. Localizer Key : IdentityPasswordRequiresLower
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.PasswordRequiresNonAlphanumeric">
            <summary>
            Password must have at least one alphanumeric character. Localizer Key : IdentityPasswordRequiresNonAlphanumeric
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.PasswordRequiresUniqueChars(System.Int32)">
            <summary>
            Password must have at least one special character. Localizer Key : IdentityPasswordRequiresUniqueChars
            </summary>
            <param name="uniqueChars"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.PasswordRequiresUpper">
            <summary>
            Password must have at least one uppercase. Localizer Key : IdentityPasswordRequiresUpper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.PasswordTooShort(System.Int32)">
            <summary>
            Password lenght is too short. Localizer Key : IdentityPasswordTooShort
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.RecoveryCodeRedemptionFailed">
            <summary>
            Recovery failed. Localizer Key : IdentityRecoveryCodeRedemptionFailed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.UserAlreadyHasPassword">
            <summary>
            User already has password. Localizer Key : IdentityUserAlreadyHasPassword
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.UserAlreadyInRole(System.String)">
            <summary>
            The user is already assigned to this role. Localizer Key : IdentityUserAlreadyInRole
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.UserLockoutNotEnabled">
            <summary>
            Lockout is not enabled for this user. Localizer Key : IdentityUserLockoutNotEnabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftIdentityDescriber`1.UserNotInRole(System.String)">
            <summary>
            User is not assigned to this role. Localizer Key : IdentityUserNotInRole
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.MilvasoftUserValidation`2">
            <summary>
            Provides an abstraction for user validation.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftUserValidation`2.#ctor(`1)">
            <summary>
            Constructor for localizer dependenct injection.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvasoftUserValidation`2.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Validates the specified user as an asynchronous operation.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.SignedInUsers">
            <summary>
            Contains userId and Token pair for authentication.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.SignedInUsers.SignedInUserTokens">
            <summary>
            UserName and token pairs for each logged in user.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.MilvasoftMail">
            <summary>
            Provides send mail.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MilvasoftMail.OpsiyonSendMail(System.String,System.String,System.String,System.Net.NetworkCredential,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="networkCredential"></param>
            <param name="smtpPort"></param>
            <param name="smtpHost"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MilvasoftMail.OpsiyonSendMail(System.String,System.String,Milvasoft.Helpers.Enums.MailSubject,System.Net.NetworkCredential,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="networkCredential"></param>
            <param name="smtpPort"></param>
            <param name="smtpHost"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Models.BaseDTO`1">
            <summary>
            Base dto for all of deletable dtos. All deletable dtos have this values.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.BaseDTO`1.Id">
            <summary>
            Unique key. Represents primary key.
            </summary>    
        </member>
        <member name="P:Milvasoft.Helpers.Models.BaseDTO`1.InsertedDate">
            <summary> 
            Date added to database for dto.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.BaseDTO`1.LastUpdatedDate">
            <summary> 
            Update date in database for dto.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.BaseIndelibleDTO`1">
            <summary>
            Base DTO for all of indelible entities. All indelible DTOs have this values.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.BaseIndelibleDTO`1.DeletedDate">
            <summary>
            Delete date in database for entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.BaseIndelibleDTO`1.IsDeleted">
            <summary>
            State of entity in the database. Default value is true.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.InvalidString">
            <summary>
            <para><b>EN: </b> Invalid strings for prevent hacking or someting ;)  </para>
            <para><b>TR: </b> Hacking veya başka bir şeyi önlemek için geçersiz string değerler ;) </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.InvalidString.Name">
            <summary>
             <para><b>EN: </b> Name of invalid string.  </para>
             <para><b>TR: </b> Geçersiz string'in adı. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.InvalidString.Values">
            <summary>
            <para><b>EN: </b> Invalid values.  </para>
            <para><b>TR: </b> Geçersiz değerler. </para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.PaginationDTO`1">
            <summary>
            <para> Stores pagination information. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.PaginationDTO`1.DTOList">
            <summary>
            Items in page. 
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.PaginationDTO`1.PageCount">
            <summary>
            Page count information.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.PaginationDTO`1.TotalDataCount">
            <summary>
            Total data count of all pages.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.BaseResponse">
            <summary>
            <para><b>EN: </b>Base response model for API responses.</para>
            <para><b>TR: </b>API yanıtları için temel yanıt modeli.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.BaseResponse.Success">
            <summary>
            <para> Default = true. </para>
            <para> Information of whether the request was successful. </para>
            <para> If request is success: Success = true. </para>
            <para> If request is fail: Success = false. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.BaseResponse.Message">
            <summary>
            <para> Default: İşlem başarılı!! </para>
            <para> Message of response. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.BaseResponse.StatusCode">
            <summary>
            <para> Default = <see cref="F:Milvasoft.Helpers.MilvasoftStatusCodes.Status200OK"/> </para>
            <para> Http status code of response. </para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.ExceptionResponse">
            <summary>
            <para><b>EN: </b>Model of Exception.</para>
            <para><b>TR: </b>İstisna Modeli.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ExceptionResponse.Result">
            <summary>
            <para><b>EN: </b>Result of request.</para>
            <para><b>TR: </b>Talebin sonucu.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ExceptionResponse.ErrorCodes">
            <summary>
            <para><b>EN: </b>Error codes of request, if exists.</para>
            <para><b>TR: </b>Varsa, isteğin hata kodları.</para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1">
            <summary>
            <para><b>EN: </b>Response model for requests that return a multiple object(List).</para>
            <para><b>TR: </b>Birden çok nesne (Liste) döndüren istekler için yanıt modeli.</para>
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1.Result">
            <summary>
            <para><b>EN: </b>Result list. </para>
            <para><b>TR: </b>Sonuç listesi.</para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1">
            <summary>
            <para><b>EN: </b> Response model for requests that return a single object.</para>
            <para><b>TR: </b>Tek bir nesne döndüren istekler için yanıt modeli.</para>
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1.Result">
            <summary>
            <para><b>EN: </b>Result object.</para>
            <para><b>TR: </b>Sonuç nesnesi.</para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.ValidationError">
            <summary>
            <para><b>EN: </b> Validation error model for property.</para>
            <para><b>TR: </b>Mülk için doğrulama hata modeli.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ValidationError.ValidationFieldName">
            <value>
            <para><b>EN: </b>Property where validation error occurred. </para>
            <para><b>TR: </b>Doğrulama hatasının oluştuğu mülk.</para>
            </value>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ValidationError.ErrorMessageList">
            <value>
            <para><b>EN: </b>Property's validation error messages</para>
            <para><b>TR: </b>Mülkün doğrulama hata mesajları</para>
            </value>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.ValidationResponse">
            <summary>
            <para> Response model for requests that return a validation error.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ValidationResponse.Result">
            <summary>
            <para> Result of request </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ValidationResponse.ErrorCodes">
            <summary>
            <para> Error codes of request, if exists. </para>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.GetIPAddressesAsync">
            <summary>
            Gets all the IP addresses of the server machine hosting the application.
            </summary>
            <returns>a string array containing all the IP addresses of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.GetIPAddressAsync(System.Int32)">
            <summary>
            Gets the IP address of the server machine hosting the application.
            </summary>
            <param name="num">if set, it will return the Nth available IP address: if not set, the first available one will be returned.</param>
            <returns>the (first available or chosen) IP address of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.HasIPAddressAsync(System.Net.IPAddress)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.HasIPAddressAsync(System.String)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.GetIPAddresses">
            <summary>
            Gets all the IP addresses of the server machine hosting the application.
            </summary>
            <returns>a string array containing all the IP addresses of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.GetIPAddress(System.Int32)">
            <summary>
            Gets the IP address of the server machine hosting the application.
            </summary>
            <param name="num">if set, it will return the Nth available IP address: if not set, the first available one will be returned.</param>
            <returns>the (first available or chosen) IP address of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.HasIPAddress(System.Net.IPAddress)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.HasIPAddress(System.String)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="T:Milvasoft.Helpers.RegexMatcher">
            <summary>
            Helper class for match input string and regex.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.RegexMatcher.MatchRegex(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regex"/>.
            </summary>
            <param name="regex"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.RegexMatcher.MatchRegex(System.String,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regexString"/>.
            </summary>
            <param name="input"></param>
            <param name="regexString"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Request">
            <summary>
            Helper class for request processes.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="content"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Object,System.Version,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="content"></param>
            <param name="version"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.SendRequestDeserializeSingle``1(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends request by <paramref name="httpRequestMessage"/>.
            <para><b> If you want to use the "ErrorCodes" property, change the return value to (ExceptionResponse) where necessary.</b></para> 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpRequestMessage"></param>
            <param name="httpClient"></param>
            <returns> ObjectResponse </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.SendRequestDeserializeMultiple``1(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends request by <paramref name="httpRequestMessage"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpRequestMessage"></param>
            <param name="httpClient"></param>
            <returns> ObjectResponse </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.SendRequestDeserialize``1(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends request by <paramref name="httpRequestMessage"/>.
            </summary>
            <param name="httpRequestMessage"></param>
            <param name="httpClient"></param>
            <typeparam name="TReturn"></typeparam>
            <returns> <typeparamref name="TReturn"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.PropertyExists(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Checks <paramref name="propertyName"/> exists in <paramref name="jObject"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="jObject"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestUrl(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <b>Makes reques url from requested params.</b> <para> For more detailed information of URL Sections, please refer to the remarks section where the method is described.</para>
            </summary>
            
            Remarks:
            
              https: //www.milvasoft.com:444/api/v1/products/product?id=1
              _____   ________________  ___ _______________________  ____  
                |             |          |              |              |   
              protocol        |          |           pathName        query 
                          hostName       |                                 
                                        port                               
            
            
            
             !!! Hostname can be IP Address. (e.g. 127.20.10.1) 
            
            <param name="protocol"></param>
            <param name="hostName"></param>
            <param name="port"></param>
            <param name="pathName"></param>
            <param name="query"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestUrlFromAddress(System.String,System.String,System.String,System.String)">
            <summary>
            <b>Makes reques url from requested params.</b>  <para> For more detailed information of URL Sections, please refer to the remarks section where the method is described. </para>
            </summary>
            
            Remarks:
            
              https: //www.milvasoft.com:444/api/v1/products/product?id=1
              _________________________  ___ _______________________  ____  
                           |              |              |              |   
                        address           |           pathName        query 
                                          |                                 
                                         port                               
            
            
            
             !!! Hostname can be IP Address. (e.g. 127.20.10.1) 
            
            <param name="address"></param>
            <param name="pathName"></param>
            <param name="query"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.IsSuccessStatusCode(Milvasoft.Helpers.Models.Response.BaseResponse)">
            <summary>
            Determines <paramref name="baseResponse"/>'s status code success or fail.
            </summary>
            <param name="baseResponse"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Response">
            <summary>
            <para>Helper class to generate the same type of response.</para>
            <para>All methods return <see cref="T:Milvasoft.Helpers.Models.Response.BaseResponse"/> type in ActionResult. Base response can be <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1" /> or <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/></para>
            <para>All methods return HTTP status code 200 OK.</para>
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Response._defaultErrorMessage">
            <summary>
            Default error message : "An error occured while processing"
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnArrayResponseForGetAll``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            <para> Return <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/> in <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/>. </para>
            <para> If <paramref name="contentList"/> isn't null or empty, sets the <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>.Message to <paramref name="successMessage"/>. </para>
            <para> Otherwise if <paramref name="errorMessage"/> is null sets the <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>.Message to <b><see cref="F:Milvasoft.Helpers.Response._defaultErrorMessage"/></b>. </para>
            <para> Otherwise sets the <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>.Message to <paramref name="errorMessage"/>. </para>
            <para> Also in this conditions sets the <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>.StatusCode to <see cref="F:Milvasoft.Helpers.MilvasoftStatusCodes.Status204NoContent"/>
                    and <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>.Success to true. Reason to be considered the <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>.Success true is request was successful.  </para>
            </summary>
            
            <param name="contentList"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForGetById``1(``0,System.String,System.String)">
            <summary>
            <para> Return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/>. </para>
            <para> If <paramref name="content"/> isn't null, sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <paramref name="successMessage"/>. </para>
            <para> Otherwise if <paramref name="errorMessage"/> is null sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <b><see cref="F:Milvasoft.Helpers.Response._defaultErrorMessage"/></b>. </para>
            <para> Otherwise sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <paramref name="errorMessage"/>. </para>
            <para> Also in this conditions sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.StatusCode to <see cref="F:Milvasoft.Helpers.MilvasoftStatusCodes.Status204NoContent"/>
                    and <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Success to true. Reason to be considered the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Success true is request was successful.  </para>
            </summary>
            
            <param name="content"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnReportResponse``1(Milvasoft.Helpers.Models.PaginationDTO{``0},System.String,System.String)">
            <summary>
            <para> Return <paramref name="paginationDTO"/> in <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="paginationDTO"/>.DTOList isn't null or empty, sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <paramref name="successMessage"/>. </para>
            <para> Otherwise if <paramref name="errorMessage"/> is null sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <b><see cref="F:Milvasoft.Helpers.Response._defaultErrorMessage"/></b>. </para>
            <para> Otherwise sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <paramref name="errorMessage"/>. </para>
            <para> Also in this conditions sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.StatusCode to <see cref="F:Milvasoft.Helpers.MilvasoftStatusCodes.Status204NoContent"/>
                    and <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Success to true. Reason to be considered the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Success true is request was successful.  </para>
            </summary>
            
            <param name="paginationDTO"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnInstantReportResponse``1(Milvasoft.Helpers.Models.PaginationDTO{``0},System.String,System.String)">
            <summary>
            <para> Return <paramref name="paginationDTO"/> in <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="paginationDTO"/>.DTOList isn't null or empty, sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <paramref name="successMessage"/>. </para>
            <para> Otherwise if <paramref name="errorMessage"/> is null sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <b><see cref="F:Milvasoft.Helpers.Response._defaultErrorMessage"/></b>. </para>
            <para> Otherwise sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message to <paramref name="errorMessage"/>. </para>
            <para> Also in this conditions sets the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.StatusCode to <see cref="F:Milvasoft.Helpers.MilvasoftStatusCodes.Status204NoContent"/>
                    and <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Success to true. Reason to be considered the <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Success true is request was successful.  </para>
            </summary>
            
            <param name="paginationDTO"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnArrayResponseForDeleteAsync``2(System.Runtime.CompilerServices.ConfiguredTaskAwaitable,System.Collections.Generic.IEnumerable{``1},System.String,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="idList"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnArrayResponseForDeleteAsync``2(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.String,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="idList"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.MultipleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleResponseForDeleteAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleResponseForDeleteAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{``0},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleResponseForDeleteAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Object},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForAddOrUpdateAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForAddOrUpdateAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Object},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForAddOrUpdateAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{``0},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForAddOrUpdateAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Guid},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForAddOrUpdateAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Int32},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForAddOrUpdateAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.SByte},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForSpecifedProcessAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForSpecifedProcessAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{``0},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.ReturnSingleObjectResponseForSpecifedProcessAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Object},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.SingleObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetErrorMessageForGetAll(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Gets error messages for get all operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetSuccessMessageForGetAll(Microsoft.Extensions.Localization.IStringLocalizer,System.String,System.Int32)">
            <summary>
            Gets error messages for get all operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetErrorMessageForFiltering(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Gets error messages for get all and filtering operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetErrorMessageForGetById(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Gets error messages for get by id operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetSuccessMessageForAdd(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Gets success messages for adding operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetSuccessMessageForUpdate(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Gets success messages for updating operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetErrorMessageForDelete(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Gets error messages for deleting operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetSucccesMessageForDelete(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Gets success messages for deleting operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetMessageForSpecifiedProcess(Microsoft.Extensions.Localization.IStringLocalizer,System.String)">
            <summary>
            Gets success messages for get all operation.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DependencyInjection.IMilvasoftLogger">
            <summary>
            Logger interface for DI.
            </summary>
        </member>
        <member name="M:Milvasoft.DependencyInjection.IMilvasoftLogger.LogInfo(System.String)">
            <summary>
            <para><b>EN: </b>Saves the log at info level.</para>
            <para><b>TR: </b>Log kaydını info seviyesinde kaydeder.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.DependencyInjection.IMilvasoftLogger.LogWarning(System.String)">
            <summary>
            <para><b>EN: </b>Saves the log at warn level.</para>
            <para><b>TR: </b>Log kaydını debug warn kaydeder.</para>s
            </summary>
        </member>
        <member name="M:Milvasoft.DependencyInjection.IMilvasoftLogger.LogDebug(System.String)">
            <summary>
            <para><b>EN: </b>Saves the log at debug level.</para>
            <para><b>TR: </b>Log kaydını debug seviyesinde kaydeder.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.DependencyInjection.IMilvasoftLogger.LogError(System.String)">
            <summary>
            <para><b>EN: </b>Saves the log at error level.</para>
            <para><b>TR: </b>Log kaydını error seviyesinde kaydeder.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.DependencyInjection.IMilvasoftLogger.LogFatal(System.String)">
            <summary>
            Saves the log at fatal level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.DependencyInjection.IMilvasoftLogger.LogFatal(System.String,Milvasoft.Helpers.Enums.MailSubject)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubject"></param>
        </member>
    </members>
</doc>
