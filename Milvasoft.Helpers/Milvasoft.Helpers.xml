<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.Helpers</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute">
            <summary>
            Specifies that the class or method that this attribute is applied to requires the specified the valid id.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute.EntityName">
            <summary>
            Gets or sets error message content.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute.#ctor">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute"/> for localization.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute.#ctor(System.Type)">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute"/> for localization.
            </summary>
            <param name="resourceType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidateIdParameterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.ActionFilter.ValidateStringParameterAttribute">
            <summary>
            Specifies that the class or method that this attribute is applied to requires the specified prevent string injection attacks and min/max length checks.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidateStringParameterAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidateStringParameterAttribute.MaximumLength">
            <summary>
            Gets the maximum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidateStringParameterAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidateStringParameterAttribute.ResourceType">
            <summary>
            Dummy class type for resource location.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidateStringParameterAttribute.MailContent">
            <summary>
            If injection attack exist. Validation method will be send mail. 
            If has value mail will be send.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidateStringParameterAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="minimumLength">The minimum length, inclusive.  It may not be negative.</param>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidateStringParameterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.ActionFilter.ValidationFilterAttribute">
            <summary>
            Provides the attribute validation exclude opportunity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidationFilterAttribute.DisabledProperties">
            <summary>
            Defines the features will be cancelled required.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidationFilterAttribute.DisabledNestedProperties">
            <summary>
            Defines the features will be cancelled required. 
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidationFilterAttribute.AssemblyTypeForNestedProps">
            <summary>
            Assembly type for disable nested type prop validations.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.ActionFilter.ValidationFilterAttribute.DTOFolderAssemblyName">
            <summary>
            Folder assembly name for disable nested type prop validations.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidationFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.ActionFilter.ValidationFilterAttribute.GetProperties(System.String)">
            <summary>
            Gets properties.
            </summary>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.MilvaRegexAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified must match the localized regex.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MilvaRegexAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MilvaRegexAttribute.ExampleFormatLocalizerKey">
            <summary>
            Gets or sets localized examle regex format.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.MilvaRegexAttribute.IsRequired">
            <summary>
            Gets or sets property is required.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MilvaRegexAttribute.#ctor">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MilvaRegexAttribute.#ctor(System.Type)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MilvaRegexAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.MilvaRegexAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute">
            <summary>
            Determines minimum decimal value.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute.LocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute.FullMessage">
            <summary>
            Gets or sets the full error message spesific content.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute.MinValue">
            <summary>
            Minimum decimal value of requested validate scope.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute.#ctor">
            <summary>
            Constructor of atrribute.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute.#ctor(System.Type)">
            <summary>
            Constructor of atrribute.
            </summary>
            <param name="resourceType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute.#ctor(System.Int32)">
            <summary>
            Constructor of atrribute.
            </summary>
            <param name="minValue"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute.#ctor(System.Int32,System.Type)">
            <summary>
            Constructor of atrribute.
            </summary>
            <param name="minValue"></param>
            <param name="resourceType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateDecimalAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified the valid id.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets member name localizer key.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.ErrorMessageLocalizerKey">
            <summary>
            Gets or sets error message localizer key.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.DontCheckNullable">
            <summary>
            If this is true, validation method won't check list is null.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.#ctor">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.#ctor(System.Type)">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute"/> for localization.
            </summary>
            <param name="resourceType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateIdPropertyAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified prevent string injection attacks and min/max length checks.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.MemberNameLocalizerKey">
            <summary>
            Gets or sets the error message spesific content
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.MaximumLength">
            <summary>
            Gets the maximum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum acceptable length of the string
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.MailContent">
            <summary>
            If injection attack exist. Validation method will be send mail. 
            If has value mail will be send.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.ResourceType">
            <summary>
            Dummy class type for resource location.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="minimumLength">The minimum length, inclusive.  It may not be negative.</param>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
            <param name="memberNameLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="minimumLength">The minimum length, inclusive.  It may not be negative.</param>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
            <param name="memberNameLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Attributes.Validation.ValidateStringAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Caching.IRedisCacheService">
            <summary>
            Provides caching operations.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.IsConnected">
            <summary>
            Gets redis client connection state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.ConnectAsync">
            <summary>
            Connects redis database if there is no connection. Otherwise this method does nothing.
            </summary>
            <returns> Returns connected status. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.DisconnectAsync">
            <summary>
            Close all connections.
            If connection exists, closes the connection.
            If connection not exists, disposes client object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.GetAsync``1(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.GetAsync(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.SetAsync(System.String,System.Object)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Sets <paramref name="value"/> to <paramref name="key"/> with <paramref name="expiration"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.RemoveAsync(System.String)">
            <summary>
            Removes <paramref name="key"/> and value.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.KeyExistsAsync(System.String)">
            <summary>
            Checks if there is a <paramref name="key"/> in database. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.KeyExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.KeyExpireAsync(System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.FlushDatabaseAsync">
            <summary>
            Flushs default database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.PerformRedisActionAsync(System.Func{System.Threading.Tasks.Task},System.String,Milvasoft.Helpers.DependencyInjection.IMilvaLogger)">
            <summary>
            It performs the requested redis action in try catch blocks. If redis client not connected, connects.
            If an error occurs when performing action or connecting to redis, it throws the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> error along with the message key. 
            Fatal logging if <paramref name="milvaLogger"/> object is not null.
            </summary>
            <param name="action"></param>
            <param name="userFriendlyMessageLocalizerKey"></param>
            <param name="milvaLogger"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.PerformRedisActionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,Milvasoft.Helpers.DependencyInjection.IMilvaLogger)">
            <summary>
            It performs the requested redis action in try catch blocks. If redis client not connected, connects.
            If an error occurs when performing action or connecting to redis, it throws the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> error along with the message key. 
            Fatal logging if <paramref name="milvaLogger"/> object is not null.
            </summary>
            <param name="action"></param>
            <param name="userFriendlyMessageLocalizerKey"></param>
            <param name="milvaLogger"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.Connect">
            <summary>
            Connects redis database if there is no connection. Otherwise this method does nothing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.Disconnect">
            <summary>
            Close all connections.
            If connection exists, closes the connection.
            If connection not exists, disposes client object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.Get``1(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.Get(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.Set(System.String,System.String)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.Set``1(System.String,``0)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Sets <paramref name="value"/> to <paramref name="key"/> with <paramref name="expiration"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.Remove(System.String)">
            <summary>
            Removes <paramref name="key"/> and value.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.IRedisCacheService.KeyExists(System.String)">
            <summary>
            Checks if there is a <paramref name="key"/> in database. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Caching.RedisCacheService">
            <summary>
            Provides redis cache operations.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.#ctor(Milvasoft.Helpers.Caching.RedisCacheServiceOptions)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.Caching.RedisCacheService"/> with <paramref name="cacheServiceOptions"/>.
            </summary>
            <param name="cacheServiceOptions"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.IsConnected">
            <summary>
            Gets redis client connection state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.ConnectAsync">
            <summary>
            Connects redis database if there is no connection. Otherwise this method does nothing.
            </summary>
            <returns> Returns connected status. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.DisconnectAsync">
            <summary>
            Close all connections.
            If connection exists, closes the connection.
            If connection not exists, disposes client object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.GetAsync``1(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.GetAsync(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.SetAsync(System.String,System.Object)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Sets <paramref name="value"/> to <paramref name="key"/> with <paramref name="expiration"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.RemoveAsync(System.String)">
            <summary>
            Removes <paramref name="key"/> and value.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.KeyExistsAsync(System.String)">
            <summary>
            Checks if there is a <paramref name="key"/> in database. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.KeyExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.KeyExpireAsync(System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.FlushDatabaseAsync">
            <summary>
            Flushs default database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.PerformRedisActionAsync(System.Func{System.Threading.Tasks.Task},System.String,Milvasoft.Helpers.DependencyInjection.IMilvaLogger)">
            <summary>
            It performs the requested redis action in try catch blocks. If redis client not connected, connects.
            If an error occurs when performing action or connecting to redis, it throws the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> error along with the message key. 
            Fatal logging if <paramref name="milvaLogger"/> object is not null.
            </summary>
            <param name="action"></param>
            <param name="userFriendlyMessageLocalizerKey"></param>
            <param name="milvaLogger"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.PerformRedisActionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,Milvasoft.Helpers.DependencyInjection.IMilvaLogger)">
            <summary>
            It performs the requested redis action in try catch blocks. If redis client not connected, connects.
            If an error occurs when performing action or connecting to redis, it throws the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> error along with the message key. 
            Fatal logging if <paramref name="milvaLogger"/> object is not null.
            </summary>
            <param name="action"></param>
            <param name="userFriendlyMessageLocalizerKey"></param>
            <param name="milvaLogger"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.Connect">
            <summary>
            Connects redis database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.Disconnect">
            <summary>
            Close all connections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.Get``1(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.Get(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.Set(System.String,System.String)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.Set``1(System.String,``0)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Sets <paramref name="value"/> to <paramref name="key"/> with <paramref name="expiration"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.Remove(System.String)">
            <summary>
            Removes <paramref name="key"/> and value.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheService.KeyExists(System.String)">
            <summary>
            Checks if there is a <paramref name="key"/> in database. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Caching.RedisCacheServiceOptions">
            <summary>
            The options relevant to a set of redis connections
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Caching.RedisCacheServiceOptions.Lifetime">
            <summary>
            Specifies the lifetime of a <see cref="T:Milvasoft.Helpers.Caching.IRedisCacheService"/>.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Caching.RedisCacheServiceOptions.ConnectWhenCreatingNewInstance">
            <summary>
            Determines object creation option.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Caching.RedisCacheServiceOptions.ConfigurationOptions">
            <summary>
            Redis configurations.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.RedisCacheServiceOptions.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.Caching.RedisCacheServiceOptions"/>.
            <paramref name="connectionString"/> will be added in <see cref="P:StackExchange.Redis.ConfigurationOptions.EndPoints"/>.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Caching.ServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extension for adding <see cref="T:Milvasoft.Helpers.Caching.IRedisCacheService"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Caching.ServiceCollectionExtension.AddMilvaRedisCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection,Milvasoft.Helpers.Caching.RedisCacheServiceOptions)">
            <summary>
            Adds <see cref="T:Milvasoft.Helpers.Caching.IRedisCacheService"/> to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> by <see cref="P:Milvasoft.Helpers.Caching.RedisCacheServiceOptions.Lifetime"/>.
            </summary>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.CommonHelper">
            <summary>
            Common Helper class.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.PropertyExists``1(System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b>typeof(<typeparamref name="T"/>)</b>. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.PropertyExists(System.Object,System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="content"/></b>. 
            </summary>
            <param name="content"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.PropertyExists(System.Type,System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="type"/></b>. 
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.CreateOrderByKeySelector``1(System.String)">
            <summary>
            Creates order by key selector by <paramref name="orderByPropertyName"/>.
            </summary>
            
            <exception cref="T:Milvasoft.Helpers.Exceptions.MilvaDeveloperException"> Throwns when type of <typeparamref name="T"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <typeparam name="T"></typeparam>
            <param name="orderByPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.CreatePropertySelector``2(System.String)">
            <summary>
            Create property selector predicate.(e.g. i => i.User).
            If <typeparamref name="T"/> doesn't contains <paramref name="propertyName"/> throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaDeveloperException"/>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.CreateRequiredPropertySelector``2(System.String)">
            <summary>
            Create property selector predicate.(e.g. i => i.User).
            If <typeparamref name="T"/> doesn't contains <paramref name="propertyName"/> returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Provides get nested property value.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.EnsureLegalLengths(System.Int32,System.Int32,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Checks that MinimumLength and MaximumLength have legal values.  Throws InvalidOperationException if not.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetEnumDesciption``1(``0)">
            <summary>
            Gets enum description.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.ToGuid(System.Int32)">
            <summary>
            This method return int value to guid value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetRequiredLocalizerInstance``1(System.IServiceProvider)">
            <summary>
            Creates localizer instance if IStringLocalizerFactory registered to service collection.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetLocalizerInstance``1(System.IServiceProvider)">
            <summary>
            Creates localizer instance if IStringLocalizerFactory registered to service collection.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetRequiredLocalizerInstance``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Creates localizer instance if IStringLocalizerFactory registered to service collection.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetLocalizerInstance``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Creates localizer instance if IStringLocalizerFactory registered to service collection.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetRequiredLocalizerInstance(System.IServiceProvider,System.Type)">
            <summary>
            Creates localizer instance if IStringLocalizerFactory registered to service collection.
            </summary>
            <param name="serviceProvider"></param>
            <param name="resourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.GetLocalizerInstance(System.IServiceProvider,System.Type)">
            <summary>
            Creates localizer instance if IStringLocalizerFactory registered to service collection.
            </summary>
            <param name="serviceProvider"></param>
            <param name="resourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.ToJson(System.Object)">
            <summary>
            Converts <paramref name="value"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.CommonHelper.ToObject``1(System.String)">
            <summary>
            Converts <paramref name="value"/> to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasCreator`1">
            <summary>
            Determines entity has creator.
            </summary>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasCreator`1.CreatorUserId">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasCreator">
            <summary>
            Determines entity has creator.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasCreator.CreatorUserId">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasDeleter`1">
            <summary>
            Determines entity has deleter.
            </summary>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasDeleter`1.DeleterUserId">
            <summary>
            Deleter of entity.
            </summary>er
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasDeleter">
            <summary>
            Determines entity has deleter.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasDeleter.DeleterUserId">
            <summary>
            Deleter of entity.
            </summary>er
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasModifier`1">
            <summary>
            Determines entity has modifier.
            </summary>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasModifier`1.LastModifierUserId">
            <summary>
            Last modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasModifier">
            <summary>
            Determines entity has modifier.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.IHasModifier.LastModifierUserId">
            <summary>
            Last modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.ISoftDeletable">
            <summary>
            Determines entity has deletion date.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.ISoftDeletable.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.Auditing.ISoftDeletable.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`1">
            <summary>
            Determines entity is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`2">
            <summary>
            Determines entity is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`3">
            <summary>
            Adds navigation properties to <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`1"/> interface for user.
            </summary>
            <typeparam name="TKey">Primary key of the user</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`3.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditableWithCustomUser`3">
            <summary>
            Adds navigation properties to <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`1"/> interface for custom user.
            </summary>
            <typeparam name="TKey">Primary key of the user</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditableWithCustomUser`3.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditableWithoutUser`1">
            <summary>
            Determines entity is auditable without modifier.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditableWithoutUser`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IBaseEntity`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IBaseEntity">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IEntityBase`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.IEntityBase`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditable`1">
            <summary>
            Determines entity's creation is auditable with user information.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditable`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditable`2">
            <summary>
            Determines entity's creation is auditable with user information.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditable`3">
            <summary>
            Adds navigation properties to <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditable`1"/> interface for user.
            </summary>
            <typeparam name="TKey">Key of the user</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditable`3.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditableWithCustomUser`3">
            <summary>
            Adds navigation properties to <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditable`1"/> interface for user.
            </summary>
            <typeparam name="TKey">Key of the user</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditableWithCustomUser`3.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditableWithoutUser`1">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditableWithoutUser`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`1">
            <summary>
            Determines entity is fully auditable with user information.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`2">
            <summary>
            Determines entity is fully auditable with user information.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`3">
            <summary>
            Adds navigation properties to <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`1"/> interface for user.
            </summary>
            <typeparam name="TKey">Key of the user</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`3.DeleterUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditableWithCustomUser`3">
            <summary>
            Adds navigation properties to <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`1"/> interface for user.
            </summary>
            <typeparam name="TKey">Key of the user</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditableWithCustomUser`3.DeleterUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditableWithoutUser`1">
            <summary>
            Determines entity is fully auditable.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3">
            <summary>
            Base repository for concrete repositories. All repositories must be have this methods.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.SoftDeleteState(System.Boolean)">
            <summary>
            Determines whether soft deleted entities in the database are fetched from the database.
            <para><b>Default is false.</b></para>
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ResetSoftDeleteState(System.Boolean)">
            <summary>
            Determines whether the default value of the variable that determines the status of deleted data in the database is assigned to the default value after database operation.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.CreateIsDeletedFalseExpression">
            <summary>
            Gets <b>entity => entity.IsDeleted == false</b> expression, if <typeparamref name="TEntity"/> is assignable from <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetFirstOrDefaultAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetSingleOrDefaultAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAllAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range. 
                  If the condition is requested, it also provides that condition.
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                   If the condition is requested, it also provides that condition.
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetRequiredByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns one entity by entity Id from database asynchronously. 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetByIdAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetRequiredByIdAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.AddAsync(`0)">
            <summary>
             Adds single entity to database asynchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database asynchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.UpdateAsync(`0)">
            <summary>
             Updates specified entity in database asynchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Updates multiple entities in database asynchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.DeleteAsync(`0)">
            <summary>
             Deletes single entity from database asynchronously..
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Deletes multiple entity from database asynchronously. 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetGroupedAndCountAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Groups entities with <paramref name="groupByPropertyName"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="groupByPropertyName"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   var dbSet = _contextRepository.GetDbSet{Poco}();  <see cref="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetDbSet``1"></see> </para>
            
            <para>   var groupByClause = from poco in dbSet                                                                             </para>
                                         group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                       select new PocoDTO                                                                             </para>
            <para>                       {                                                                                              </para>
            <para>                            Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                            PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                            PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                       };                                                                                             </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClause).ConfigureAwait(false);                  </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="groupedClause"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAsync``1(System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClauseFunc).ConfigureAwait(false);                                       </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAndPaginatedAsync``1(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                               </para>
            <para>                                                              {                                                                                </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                   </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                       </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                    </para>
            <para>                                                              };                                                                               </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, groupByClauseFunc).ConfigureAwait(false);                                </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAndPaginatedAndOrderedAsync``1(System.Int32,System.Int32,System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para><b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                                             </para>
            <para>                                                              {                                                                                              </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                                                              };                                                                                             </para>
                                 
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, "PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                           </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetAsGroupedAnOrderedAsync``1(System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}("PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                    </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetMaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get max value of entities.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetMaxAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get max value of entities. With includes.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetMaxOfPropertyAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxPropertyName"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetMaxOfPropertyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get count of entities.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ReplaceOldsWithNewsAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ReplaceOldsWithNewsInSeperateDatabaseProcessAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.RemoveAllAsync">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ExistsAsync(`1)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="id"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IBaseRepository`3.ExistsAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ExecuteQueryAsync(System.String)">
            <summary>
            Executes sql query to database asynchronously.(e.g. trigger, event)
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Action)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.InitializeUpdating``2(``0)">
            <summary>
            User update process.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.RemoveExpiredTokensAsync``2(Microsoft.AspNetCore.Identity.UserManager{``0},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para> Removes expired tokens from the system. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks :</b></para>
            
            <para> Your DbContext(<typeparamref name="TContext"/>) must inherit from <see cref="T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext"/>. </para>
            <para> Your DbContext(<typeparamref name="TContext"/>) must contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/> DbSet of name "UserTokens". </para>
            
            </remarks>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TContext"/>'s properties doesn't contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/> of name 'UserTokens'. </exception>
            
            <param name="userManager"> User manager </param>
            <param name="loginProvider"> Login Provider (e.g. Facebook) </param>
            <param name="tokenName"> Token Type </param>
            <param name="cachedTokenDictionary"> Dictionary params : Key = userName of <typeparamref name="TUser"/>. Value = JWT security Token as string. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.GetDbSet``1">
            <summary>
            Gets requested DbSet by <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Abstract.IContextRepository`1.ExistsAsync``2(``1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Attributes.MilvaDefaultValueAttribute">
            <summary>
            Attribute for adding default value in context level.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Attributes.MilvaDefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Specifies this property has a default value upon creation.
            </summary>
            <param name="defaultValue">The default value of the property.</param>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Attributes.MilvaDefaultValueAttribute.DefaultValue">
            <summary>
            Default value of tagged property.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Attributes.MilvaEncryptedAttribute">
            <summary>
            Specifies that the value field value should be encrypted.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3">
            <summary>
             Base repository for concrete repositories. All Ops!yon repositories must be have this methods.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3._dbContext">
            <summary>
            DbContext object.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.SoftDeleteState(System.Boolean)">
            <summary>
            Determines whether soft deleted entities in the database are fetched from the database.
            <para><b>Default is false.</b></para>
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ResetSoftDeleteState(System.Boolean)">
            <summary>
            Determines whether the default value of the variable that determines the status of deleted data in the database is assigned to the default value after database operation.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.#ctor(`2)">
            <summary>
            Constructor of BaseRepository for <paramref name="dbContext"/> injection.
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.CreateIsDeletedFalseExpression">
            <summary>
            Gets <b>entity => entity.IsDeleted == false</b> expression, if <typeparamref name="TEntity"/> is assignable from <see cref="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetFirstOrDefaultAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetSingleOrDefaultAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAllAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range. 
                  If the condition is requested, it also provides that condition.
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                   If the condition is requested, it also provides that condition.
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsOrderedAsync(System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
             <summary>
              Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetRequiredByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns one entity by entity Id from database asynchronously.
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetByIdAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetRequiredByIdAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.AddAsync(`0)">
            <summary>
             Adds single entity to database asynchronously. 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database asynchronously. 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.UpdateAsync(`0)">
            <summary>
             Updates specified entity in database asynchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Updates multiple entities in database asynchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.DeleteAsync(`0)">
            <summary>
             Deletes single entity from database asynchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Deletes multiple entity from database asynchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetGroupedAndCountAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Groups entities with <paramref name="groupByPropertyName"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="groupByPropertyName"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetGroupedAndCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Groups entities with <paramref name="keySelector"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="keySelector"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   var dbSet = _contextRepository.GetDbSet{Poco}();  <see cref="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetDbSet``1"></see> </para>
            
            <para>   var groupByClause = from poco in dbSet                                                                             </para>
                                         group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                       select new PocoDTO                                                                             </para>
            <para>                       {                                                                                              </para>
            <para>                            Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                            PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                            PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                       };                                                                                             </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClause).ConfigureAwait(false);                  </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="groupedClause"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAsync``1(System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClauseFunc).ConfigureAwait(false);                                       </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAndPaginatedAsync``1(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                               </para>
            <para>                                                              {                                                                                </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                   </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                       </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                    </para>
            <para>                                                              };                                                                               </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, groupByClauseFunc).ConfigureAwait(false);                                </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAndPaginatedAndOrderedAsync``1(System.Int32,System.Int32,System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                                    </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                                             </para>
            <para>                                                              {                                                                                              </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                                                              };                                                                                             </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, "PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                           </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetAsGroupedAnOrderedAsync``1(System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}("PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                    </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetMaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get max value of entities.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetMaxAsync(System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get max value of entities. With includes.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetMaxOfPropertyAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxPropertyName"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetMaxOfPropertyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get count of entities.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ReplaceOldsWithNewsInSeperateDatabaseProcessAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ReplaceOldsWithNewsAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.RemoveAllAsync">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ExistsAsync(`1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.ExistsAsync(`1,System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{`0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.InitalizeEdit(`0)">
            <summary>
            For configure entity state. Change tracking.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.BaseRepository`3.InitalizeEdit(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            For configure entity state. Change tracking.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1._dbContext">
            <summary>
            DbContext object.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.#ctor(`0)">
            <summary>
            Constructor of ContextRepository for inject context.
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ExecuteQueryAsync(System.String)">
            <summary>
            Executes sql query to database asynchronously.(e.g. trigger, event).
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Action)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.InitializeUpdating``2(``0)">
            <summary>
            User update process.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.RemoveExpiredTokensAsync``2(Microsoft.AspNetCore.Identity.UserManager{``0},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para> Removes expired tokens from the system. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks :</b></para>
            
            <para> Your DbContext(<typeparamref name="TContext"/>) must inherit from <see cref="T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext"/>. </para>
            <para> Your DbContext(<typeparamref name="TContext"/>) must contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/> DbSet of name "UserTokens". </para>
            <para> Your DbContext(<typeparamref name="TContext"/>) must contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUser`1"/> DbSet of name "Users". </para>
            
            </remarks>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TContext"/>'s properties doesn't contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUser`1"/> of name 'Users'. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TContext"/>'s properties doesn't contain <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserToken`1"/> of name 'UserTokens'. </exception>
            
            <param name="userManager"> User manager </param>
            <param name="loginProvider"> Login Provider (e.g. Facebook) </param>
            <param name="tokenName"> Token Type </param>
            <param name="cachedTokenDictionary"> Dictionary params : Key = userName of <typeparamref name="TUser"/>. Value = JWT security Token as string. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetRequiredContents``1">
            <summary>
            Gets requested contents by <typeparamref name="TEntity"/> DbSet.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetRequiredContents(System.Type)">
            <summary>
            Gets requested contents by <paramref name="type"/> DbSet.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.GetDbSet``1">
            <summary>
            Gets requested DbSet by <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.ExistsAsync``2(``1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.ContextRepository`1.CreateIsDeletedFalseExpression``1">
            <summary>
            Gets <b>entity => entity.IsDeleted == false</b> expression, if <typeparamref name="TEntity"/> is assignable from <see cref="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`1.LastModifierUserId">
            <summary>
            Last modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`2">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`2.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`2.LastModifierUserId">
            <summary>
            Last modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`3">
            <summary>
            This class can be used to simplify implementing <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`1"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`3.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntity`3.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntityWithCustomUser`3">
            <summary>
            This class can be used to simplify implementing <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IAuditable`1"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntityWithCustomUser`3.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntityWithCustomUser`3.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntityWithoutUser`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.AuditableEntityWithoutUser`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.BaseEntity`1">
            <summary>
            Base entity for all of entities.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.BaseEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.Entity.BaseEntity`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.BaseEntity`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.EntityBase`1">
            <summary>
            Base entity for all of entities.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.EntityBase`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.Concrete.Entity.EntityBase`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.BaseEntity`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntity`1">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntity`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntity`2">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntity`2.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntity`2.CreatorUserId">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntity`3">
            <summary>
            This class can be used to simplify implementing <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditable`3"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntity`3.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntityEntityWithCustomUser`3">
            <summary>
            This class can be used to simplify implementing <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.ICreationAuditableWithCustomUser`3"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntityEntityWithCustomUser`3.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntityWithoutUser`1">
            <summary>
            Determines entity's creation is auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.CreationAuditableEntityWithoutUser`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.EntityPropertyNames">
            <summary>
            Auditing property names.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`1">
            <summary>
            Determines entity is fully auditable soft deletable entity.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`2">
            <summary>
            Determines entity is fully auditable soft deletable entity.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`2.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`2.DeleterUserId">
            <summary>
            Deleter of entity.
            </summary>er
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`2.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`3">
            <summary>
            Implements <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`3"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`3.DeletionDate">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`3.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`3.DeleterUser">
            <summary>
            Reference to the deleter user of this entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntity`3.IsDeleted">
            <summary>
            Is this entity Deleted?
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntityWithCustomUser`3">
            <summary>
            Implements <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditableWithCustomUser`3"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
            <typeparam name="TUserKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntityWithCustomUser`3.DeletionDate">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntityWithCustomUser`3.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntityWithCustomUser`3.DeleterUser">
            <summary>
            Reference to the deleter user of this entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntityWithCustomUser`3.IsDeleted">
            <summary>
            Is this entity Deleted?
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntityWithoutUser`1">
            <summary>
            Determines entity is fully auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntityWithoutUser`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.Concrete.Entity.FullAuditableEntityWithoutUser`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable">
            <summary>
            Supports queryable Include/ThenInclude chaining operators. 
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable`1">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable`2">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.Includable`1">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.Includable`2">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions">
            <summary>
            Includable extension for Ops!yon API. For reason to use that class: We cannot use default include process which in EntityFramework. Because of mysql and context. 
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions.Include``2(Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0,``2},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0,System.Collections.Generic.IEnumerable{``2}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0,System.Collections.Generic.ICollection{``2}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludeMultipleClass">
            <summary>
            Allows to include multiple class.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.IncludeLibrary.IncludeMultipleClass.IncludeMultiple``1(System.Linq.IQueryable{``0},System.Func{Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable{``0},Milvasoft.Helpers.DataAccess.IncludeLibrary.IIncludable})">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <example>
            var personnelTable = _personnelTableRepository.GetAllWithIncludes(i => i.Include(p=>p.personnel).Include(p=>p.tableSetting));
            </example>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.MilvaContext.AuditConfiguration">
            <summary>
            Entity auditing configuration. You can register this configuration in startup as singleton.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.AuditConfiguration.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Entity auditing configuration. You can register this configuration in startup as singleton.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3">
            <summary>
            This class handles all database operations.
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration"/> in your application startup. </para>
            </remarks>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.CurrentUser">
            <summary>
            Current user.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.AuditConfiguration">
            <summary>
            Audit configuration.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.IgnoreSoftDelete">
            <summary>
            If its true ignores soft delete.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Helpers.DependencyInjection.IAuditConfiguration)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3"></see>.
            </summary>
            <param name="options"></param>
            <param name="httpContextAccessor"></param>
            <param name="auditConfiguration"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase{`0,`1,`2}},Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Helpers.DependencyInjection.IAuditConfiguration)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3"></see>.
            </summary>
            <param name="options"></param>
            <param name="httpContextAccessor"></param>
            <param name="auditConfiguration"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.IgnoreSoftDeleteForNextProcess">
            <summary>
            Ignores soft delete for next process.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.ActivateSoftDelete">
            <summary>
            Activate soft delete.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.SaveChanges">
            <summary>
            Overrided the SaveChanges method for soft deleting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Overrided the SaveChangesAsync method for soft deleting.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.GetRequiredContents(System.Type)">
            <summary>
            Gets requested contents by <paramref name="type"/> DbSet.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.GetRequiredContentsAsync``1">
            <summary>
            Gets requested contents by <typeparamref name="TEntity"/> DbSet.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.GetMaxValueAsync``1(System.String)">
            <summary>
            Gets the requested <typeparamref name="TEntity"/>'s property's(<paramref name="propName"/>) max value.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.CreateIsDeletedFalseExpression``1">
            <summary>
            Gets <b>entity => entity.IsDeleted == false</b> expression, if <typeparamref name="TEntity"/> is assignable from <see cref="T:Milvasoft.Helpers.DataAccess.Abstract.Entity.IFullAuditable`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.SoftDelete(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Soft delete operation.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.AuditDeletion(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Entity auditing for delete. 
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.AuditDate(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String)">
            <summary>
            Entity auditing by date. 
            </summary>
            <param name="entry"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.AuditPerformerUser(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String)">
            <summary>
            Entity auditing by performer user.
            </summary>
            <param name="entry"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.AuditEntites">
            <summary>
            Provides auditing entities by <see cref="F:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.AuditConfiguration"/>.
            If deletion process happens then sets the <see cref="F:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContextBase`3.IgnoreSoftDelete"/> variable to true at the end of process.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3">
            <summary>
            This class handles all database operations.
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration"/> in your application startup. </para>
            </remarks>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Helpers.DependencyInjection.IAuditConfiguration)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3"></see>.
            </summary>
            <param name="options"></param>
            <param name="httpContextAccessor"></param>
            <param name="auditConfiguration"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext{`0,`1,`2}},Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Helpers.DependencyInjection.IAuditConfiguration)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3"></see>.
            </summary>
            <param name="options"></param>
            <param name="httpContextAccessor"></param>
            <param name="auditConfiguration"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions">
            <summary>
            Extension methods for <c cref="T:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaDbContext`3"></c>.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.UseTenantId(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/> converters to <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/> typed properties.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.UseAnnotationEncryption(Microsoft.EntityFrameworkCore.ModelBuilder,Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider)">
            <summary>
            Adds value converter(<see cref="T:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionConverter"/>) to string properties which marked with <see cref="T:Milvasoft.Helpers.DataAccess.Attributes.MilvaEncryptedAttribute"/>.
            </summary>
            <param name="modelBuilder"></param>
            <param name="encryptionProvider"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.UseEncryption(Microsoft.EntityFrameworkCore.ModelBuilder,Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider)">
            <summary>
            Adds value converter(<see cref="T:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionConverter"/>) to all strings properties.
            </summary>
            <param name="modelBuilder"></param>
            <param name="encryptionProvider"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.ConfigureStringProperties(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            For PostgreSql, makes string properties for Turkish character compatible.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.AddIndexToIndelibleEntities(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds an index for each indelible entity for IsDeleted property.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.ConfigureDefaultValue(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures default value for update database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.FilterDeletedEntities(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Enable the query filter for indelible entities.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.IgnoreDefaultRecords(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Enable the query filter for indelible entities.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.ConfigureDecimalProperties(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the decimal property of entities with decimal properties in decimal (18.2) format.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.IncludeAll``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Allows to all entities associated with deletions to be Included to the entity(s) to be included in the process.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.MilvaContext.MilvaModelBuilderExtensions.IncludeLang``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Allows to all entities associated with deletions to be Included to the entity(s) to be included in the process.
            Entities must be contains "Langs" navigation property for include process. (e.g. ProductLangs)
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration">
            <summary>
            Configuration for entity auditing. You can register this configuration in startup as singleton.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration.AuditCreationDate">
            <summary>
            Determines whether the entity auditing by the creation date.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration.AuditCreator">
            <summary>
            Determines whether the entity auditing by the creator.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration.AuditModificationDate">
            <summary>
            Determines whether the entity auditing by the modification date.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration.AuditModifier">
            <summary>
            Determines whether the entity auditing by the modifier.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration.AuditDeletionDate">
            <summary>
            Determines whether the entity auditing by the deletion date.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DependencyInjection.IAuditConfiguration.AuditDeleter">
            <summary>
            Determines whether the entity auditing by the deleter.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.DependencyInjection.IMapper">
            <summary>
            Responsible interface for mapping from the source object to the object we want to access.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMapper.Map``1(System.Object)">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMapper.Map``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMapper.Map``1(System.Object,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMapper.Map``1(System.Object,System.Int32,System.Boolean,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="preserveReference"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMapper.Map``2(``0)">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMapper.Map``2(``0,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMapper.Map``2(``0,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMapper.Map``2(``0,System.Int32,System.Boolean,System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="preserveReference"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DependencyInjection.IMilvaLogger">
            <summary>
            Logger interface for DI.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogVerbose(System.String)">
            <summary>
            Saves the log at verbose level.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogInfo(System.String)">
            <summary>
            Saves the log at info level.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogWarning(System.String)">
            <summary>
            Saves the log at warn level.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogDebug(System.String)">
            <summary>
            Saves the log at debug level.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogError(System.String)">
            <summary>
            Saves the log at error level.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogFatal(System.String)">
            <summary>
            Saves the log at fatal level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogFatal(System.String,System.String)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubject"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogFatalAsync(System.String,System.String)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubject"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogFatal(System.String,Milvasoft.Helpers.Enums.MailSubject)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubject"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DependencyInjection.IMilvaLogger.LogFatalAsync(System.String,Milvasoft.Helpers.Enums.MailSubject)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubject"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider">
            <summary>
            Provides file encryption and decryption with AES Algorithm. Milvasoft Corporation is not responsible of possible data loss.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider.EncryptAsync(System.String)">
            <summary>
            Encrypt <paramref name="value"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider.DecryptAsync(System.String)">
            <summary>
            Decrypt <paramref name="value"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider.EncryptFileAsync(System.String)">
            <summary>
            Encrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider.DecryptFileAsync(System.String)">
            <summary>
            Decrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypt <paramref name="value"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypt <paramref name="value"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider.EncryptFile(System.String)">
            <summary>
            Encrypt file in <paramref name="filePath"/> with key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider.DecryptFile(System.String)">
            <summary>
            Decrypt file in <paramref name="filePath"/> with key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionConverter">
            <summary>
            Defines the internal encryption converter for string values.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionConverter.#ctor(Milvasoft.Helpers.Encryption.Abstract.IMilvaEncryptionProvider,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
            Creates a new <see cref="T:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionConverter"/> instance.
            </summary>
            <param name="encryptionProvider">Encryption provider</param>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="T:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider">
            <summary>
            Provides file encryption and decryption with AES Algorithm. Milvasoft Corporation is not responsible of possible data loss.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.AesBlockSize">
            <summary>
            AES block size constant.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.InitializationVectorSize">
            <summary>
            Initialization vector size constant.(IV)
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.#ctor(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Creates a new <see cref="T:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider"/> instance.
            </summary>
            <param name="key"> Must be between 128-256 bit.</param>
            <param name="mode"></param>
            <param name="padding"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.EncryptAsync(System.String)">
            <summary>
            Encrypt <paramref name="value"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.DecryptAsync(System.String)">
            <summary>
            Decrypt <paramref name="value"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.EncryptFileAsync(System.String)">
            <summary>
            Encrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.DecryptFileAsync(System.String)">
            <summary>
            Decrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.EncryptFileAsync(System.String,System.Text.Encoding)">
            <summary>
            Encrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
            <param name="encoding"> e.g. <see cref="P:System.Text.Encoding.UTF8"/></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.DecryptFileAsync(System.String,System.Text.Encoding)">
            <summary>
            Decrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
            <param name="encoding"> e.g. <see cref="P:System.Text.Encoding.UTF8"/></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypt <paramref name="value"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypt <paramref name="value"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.EncryptFile(System.String)">
            <summary>
            Encrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.DecryptFile(System.String)">
            <summary>
            Decrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.EncryptFile(System.String,System.Text.Encoding)">
            <summary>
            Encrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
            <param name="encoding"> e.g. <see cref="P:System.Text.Encoding.UTF8"/></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.DecryptFile(System.String,System.Text.Encoding)">
            <summary>
            Decrypt file in <paramref name="filePath"/> with AES Algorithm and key.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <param name="filePath"></param>
            <param name="encoding"> e.g. <see cref="P:System.Text.Encoding.UTF8"/></param>
        </member>
        <member name="M:Milvasoft.Helpers.Encryption.Concrete.MilvaEncryptionProvider.CreateCryptographyProvider">
            <summary>
            Creates an AES cryptography provider.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Enums.CrudOperation">
            <summary>
            CRUD operation enum.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.CrudOperation.Add">
            <summary>
            Add operation
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.CrudOperation.Update">
            <summary>
            Update operation
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.CrudOperation.Delete">
            <summary>
            Delete operation
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.CrudOperation.GetById">
            <summary>
            GetById operation
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.CrudOperation.GetAll">
            <summary>
            GetAll operation
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.CrudOperation.Filtering">
            <summary>
            Filtering operation
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.CrudOperation.Specific">
            <summary>
            Specific operation
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Enums.MailSubject">
            <summary>
            Mail subjects.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.MailSubject.Error">
            <summary>
            The enum that should be sent for error messages.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.MailSubject.Hack">
            <summary>
            The enum that should be sent for hack warning.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.MailSubject.ShutDown">
            <summary>
            The enum that should be sent for hack warning.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Enums.MailSubject.Information">
            <summary>
            The enum that should be sent for information.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.MilvaBaseException">
            <summary>
            Base exception class.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Exceptions.MilvaBaseException.ExceptionCode">
            <summary>
            Gets or sets error code.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Exceptions.MilvaBaseException.ExceptionObject">
            <summary>
            Gets or sets object of exception.
            Default value is null.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Exceptions.MilvaBaseException.UseLocalizerKey">
            <summary>
            Variable for exception middleware.
            Default value is null.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaBaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaBaseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaBaseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaBaseException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.MilvaDeveloperException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaDeveloperException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaDeveloperException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaDeveloperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaDeveloperException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaDeveloperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaDeveloperException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.MilvaException">
            <summary>
            Defines the Milvasoft Exception Codes.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.Base">
            <summary>
            Defines the UnknownError.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.General">
            <summary>
            Defines the CannotFindEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.CannotFindEntity">
            <summary>
            Defines the CannotFindEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.AddingNewEntityWithExistsId">
            <summary>
            Defines the AddingNewEntityWithExsistId.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.Encryption">
            <summary>
            Defines the EncryptionError.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.CannotFindEnumById">
            <summary>
            Defines the CannotFindEnumById.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.CannotStartRedisServer">
            <summary>
            Defines the CannotStartRedisServer.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.DeletingEntityWithRelations">
            <summary>
            Defines the DeletingEntityWithRelations.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.DeletingInvalidEntity">
            <summary>
            Defines the DeletingInvalidEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.TenancyNameRequired">
            <summary>
            Defines the TenancyNameRequired.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.EmptyList">
            <summary>
            Defines the EmptyList.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.InvalidNumericValue">
            <summary>
            Defines the InvalidNumericValue.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.InvalidParameter">
            <summary>
            Defines the InvalidParameter.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.InvalidStringExpression">
            <summary>
            Defines the InvalidStringExpression.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.NullParameter">
            <summary>
            Defines the NullParameter.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.FeatureNotImplemented">
            <summary>
            Defines the FeatureNotImplemented.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.UpdatingInvalidEntity">
            <summary>
            Defines the UpdatingInvalidEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.NotLoggedInUser">
            <summary>
            Defines the NotLoggedInUser.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.AnotherLoginExists">
            <summary>
            Defines the AnotherLoginExists.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.OldVersion">
            <summary>
            Defines the OldVersion.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.InvalidLicence">
            <summary>
            Defines the InvalidLicence.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.ExpiredDemo">
            <summary>
            Defines the ExpiredDemo.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.NeedForceOperation">
            <summary>
            Defines the NeedForceOperation.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.CannotGetResponse">
            <summary>
            Defines the CannotGetResponse.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.IdentityResult">
            <summary>
            Defines the IdentityResult.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.CannotUpdateOrDeleteDefaultRecord">
            <summary>
            Defines the CannotUpdateOrDeleteDefaultRecord.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.Validation">
            <summary>
            Defines the ValidationError.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.InvalidRelatedProcess">
            <summary>
            Defines the InvalidRelatedProcess.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.WrongPaginationParams">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.WrongRequestedPageNumber">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Exceptions.MilvaException.WrongRequestedItemCount">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="useLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String,Milvasoft.Helpers.Exceptions.MilvaException)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String,Milvasoft.Helpers.Exceptions.MilvaException,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(Milvasoft.Helpers.Exceptions.MilvaException)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(Milvasoft.Helpers.Exceptions.MilvaException,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="exceptionCode"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Boolean,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="useLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Exceptions.MilvaValidationException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaValidationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaValidationException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Exceptions.MilvaValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Helpers.Exceptions.MilvaValidationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Extensions.Expressions">
            <summary>
            Expression extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.Append``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.ExpressionType)">
            <summary>
            Appends <paramref name="right"/> to <paramref name="left"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="expressionAppendType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a lambda expression that represents a conditional AND operation
            </summary>
            <param name="left">An expression to set the left property of the binary expression</param>
            <param name="right">An expression to set the right property of the binary expression</param>
            <returns>A binary expression that has the node type property equal to AndAlso, 
            and the left and right properties set to the specified values</returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a lambda expression that represents a conditional OR operation
            </summary>
            <param name="left">An expression to set the left property of the binary expression</param>
            <param name="right">An expression to set the right property of the binary expression</param>
            <returns>A binary expression that has the node type property equal to OrElse, 
            and the left and right properties set to the specified values</returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Determines the right casting and pets property from expression with this right casting.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Expressions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Determines the right casting and pets property name from expression with this right casting.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Extensions.GenericCollection">
            <summary>
            Generic collection helper extension methods.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.GenericCollection.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks whether or not collection is null or empty. Assumes collection can be safely enumerated multiple times.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.GenericCollection.PropertyExists``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Checks whether property exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.GenericCollection.OrderByProperty``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Order <paramref name="source"/> by <paramref name="propertyName"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.GenericCollection.OrderByPropertyDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Order by descending <paramref name="source"/>, by <paramref name="propertyName"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Extensions.Helpers.ExpressionParameterReplacer">
            <summary>
            Expression parameter replacer for expression builder.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Helpers.ExpressionParameterReplacer.#ctor(System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Constructor of <see cref="T:Milvasoft.Helpers.Extensions.Helpers.ExpressionParameterReplacer"/>
            </summary>
            <param name="fromParameters"></param>
            <param name="toParameters"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Helpers.ExpressionParameterReplacer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="node"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="T:Milvasoft.Helpers.Extensions.Strings">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Strings.ToUpperFirst(System.String)">
            <summary>
            Uppercases the first letter of the word.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Strings.ToUpperInVariantFirst(System.String)">
            <summary>
            Uppercases the first letter of the word using the casing rules of the invariant culture.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Strings.ToLowerFirst(System.String)">
            <summary>
            Lowercases the first letter of the word.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Strings.ToLowerInVariantFirst(System.String)">
            <summary>
            Lowercases the first letter of the word using the casing rules of the invariant culture.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Strings.GetByteArray(System.String)">
            <summary>
            Gets <paramref name="str"/>'s bytes.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Strings.GetString(System.Byte[])">
            <summary>
            Gets string from <paramref name="array"/>.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Strings.HashToByteArray(System.String)">
            <summary>
            Hashes <paramref name="str"/> with <see cref="T:System.Security.Cryptography.SHA256"/>
            </summary>
            <param name="str"></param>
            <returns> Hashed <paramref name="str"/> as byte content. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Extensions.Strings.HashToString(System.String)">
            <summary>
            Hashes <paramref name="str"/> with <see cref="T:System.Security.Cryptography.SHA256"/>
            </summary>
            <param name="str"></param>
            <returns> Hashed <paramref name="str"/> as string. </returns>
        </member>
        <member name="T:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations">
            <summary>
            Provides add-edit-delete-get process json files that hold one list.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
            
            [
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             },
             {
               "Id": 2,
               "Name": "poco2",
               "Which": true
             },
             {
               "Id": 3,
               "Name": "poco3",
               "Which": true
             }
            ]
            
            </code>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetRequiredContentFromJsonFileAsync``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetContentFromJsonFileAsync``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content list is null or empty. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.AddContentToJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="contents"/> to json file in <paramref name="filePath"/>.
            If content has "Id" property which type is "System.Int32" . Send <paramref name="contentsHasId"/> param "true". The code will be increase Id automatically.
            </summary>
            <remarks>
            
            <para> If <paramref name="cultureInfo"/> is null, default is ("en-US")</para> 
            
            <para><b> yourjsonfile.json file must contains list or must be empty.</b> </para> 
            
            </remarks>
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be added. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="contentsHasId"> Determines whether the contents are added in auto increment by "Id" property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.UpdateContentFromJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Globalization.CultureInfo)">
            <summary>
            Updates contents from json file in <paramref name="filePath"/>.
            </summary>
            <remarks>
            Updates by requested Property. Don't forget send <paramref name="mappingProperty"/> !!!
            </remarks>
            <exception cref="M:System.Exception.#ctor">
            Throwns when not valid <paramref name="mappingProperty"/> or requested Entity type does not have that <paramref name="mappingProperty"/>.
            </exception>
            <exception cref="M:System.Exception.#ctor">
            Throwns when json file in <paramref name="filePath"/> not contains <paramref name="contents"/> .
            </exception>
            <remarks>
            
            Send all the properties of the object to be updated. Otherwise, unsent properties are updated to null.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>  
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.DeleteContentFromJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Globalization.CultureInfo)">
            <summary>
            Deletes record from requested json file.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param> 
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetRequiredSingleContentFromJsonFileAsync``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetSingleContentFromJsonFileAsync``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content is null. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/> if content isn't null.  </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.AddOrUpdateSingleContentToJsonFileAsync``1(``0,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="content"/> to json file in <paramref name="filePath"/>.
            (like Auto Increment)
            </summary>
            
            <remarks>
            
            yourjsonfile.json file must contains exact same type of <typeparamref name="T"/> or file must be empty.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="content"> Content to be added or updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.ClearJSONFileAsync(System.String)">
            <summary>
            Clears json file in <paramref name="filePath"/>.
            </summary>
            <param name="filePath"> Path to json file to get data from. </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetRequiredContentFromCryptedJsonFileAsync``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from crypted json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetContentFromCryptedJsonFileAsync``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content list is null or empty. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.AddContentToCryptedJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Boolean,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="contents"/> to json file in <paramref name="filePath"/> with <paramref name="key"/>.
            If content has "Id" property which type is "System.Int32" . Send <paramref name="contentsHasId"/> param "true". The code will be increase Id automatically.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <remarks>
            
            <para> If <paramref name="cultureInfo"/> is null, default is ("en-US")</para> 
            
            <para><b> yourjsonfile.json file must contains list or must be empty.</b> </para> 
            
            </remarks>
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be added. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="contentsHasId"> Determines whether the contents are added in auto increment by "Id" property. </param>
            <param name="key"> Key of encrypted file. </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.UpdateContentFromCryptedJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Globalization.CultureInfo)">
            <summary>
            Updates contents from json file in <paramref name="filePath"/> with  <paramref name="key"/>.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <remarks>
            Updates by requested Property. Don't forget send <paramref name="mappingProperty"/> !!!
            </remarks>
            <exception cref="M:System.Exception.#ctor">
            Throwns when not valid <paramref name="mappingProperty"/> or requested Entity type does not have that <paramref name="mappingProperty"/>.
            </exception>
            <exception cref="M:System.Exception.#ctor">
            Throwns when json file in <paramref name="filePath"/> not contains <paramref name="contents"/> .
            </exception>
            <remarks>
            
            Send all the properties of the object to be updated. Otherwise, unsent properties are updated to null.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="key"> Key of encrypted file. </param>        
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>  
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.DeleteContentFromCryptedJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Globalization.CultureInfo)">
            <summary>
            Deletes record from requested json file with <paramref name="key"/>.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="key"> Key of encrypted file. </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param> 
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetRequiredSingleContentCryptedFromJsonFileAsync``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetSingleContentFromCryptedJsonFileAsync``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content is null. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <param name="key"> Key of encrypted file. </param>        
            <returns> A single content of type <typeparamref name="T"/> if content isn't null.  </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.AddOrUpdateSingleContentToCryptedJsonFileAsync``1(``0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="content"/> to json file in <paramref name="filePath"/> with <paramref name="key"/>.
            (like Auto Increment)
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            </summary>
            
            <remarks>
            
            yourjsonfile.json file must contains exact same type of <typeparamref name="T"/> or file must be empty.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="content"> Content to be added or updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <param name="key"> Key of encrypted file. </param>       
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetRequiredContentFromJsonFile``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content list is null or empty. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetContentFromJsonFile``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.AddContentToJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="contents"/> to json file in <paramref name="filePath"/>.
            If content has "Id" property which type is "System.Int32" . Send <paramref name="contentsHasId"/> param "true". The code will be increase Id automatically.
            </summary>
            <remarks>
            
            <para> If <paramref name="cultureInfo"/> is null, default is ("en-US")</para> 
            
            <para><b> yourjsonfile.json file must contains list or must be empty.</b> </para> 
            
            </remarks>
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be added. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="contentsHasId"> Determines whether the contents are added in auto increment by "Id" property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.UpdateContentFromJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Globalization.CultureInfo)">
            <summary>
            Updates contents from json file in <paramref name="filePath"/>.
            </summary>
            <remarks>
            Updates by requested Property. Don't forget send <paramref name="mappingProperty"/> !!!
            </remarks>
            <exception cref="M:System.Exception.#ctor">
            Throwns when not valid <paramref name="mappingProperty"/> or requested Entity type does not have that <paramref name="mappingProperty"/>.
            </exception>
            <exception cref="M:System.Exception.#ctor">
            Throwns when json file in <paramref name="filePath"/> not contains <paramref name="contents"/> .
            </exception>
            <remarks>
            
            Send all the properties of the object to be updated. Otherwise, unsent properties are updated to null.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>  
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.DeleteContentFromJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Globalization.CultureInfo)">
            <summary>
            Deletes record from requested json file.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param> 
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetRequiredSingleContentFromJsonFile``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetSingleContentFromJsonFile``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content is null. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/> if content isn't null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.AddOrUpdateSingleContentToJsonFile``1(``0,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="content"/> to json file in <paramref name="filePath"/>.
            (like Auto Increment)
            </summary>
            
            <remarks>
            
            yourjsonfile.json file must contains exact same type of <typeparamref name="T"/> or file must be empty.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="content"> Content to be added or updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.ClearJSONFile(System.String)">
            <summary>
            Clears json file in <paramref name="filePath"/>.
            </summary>
            <param name="filePath"> Path to json file to get data from. </param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetRequiredContentFromCryptedJsonFile``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from crypted json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetContentFromCryptedJsonFile``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content list is null or empty. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.AddContentToCryptedJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Boolean,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="contents"/> to json file in <paramref name="filePath"/> with <paramref name="key"/>.
            If content has "Id" property which type is "System.Int32" . Send <paramref name="contentsHasId"/> param "true". The code will be increase Id automatically.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <remarks>
            
            <para> If <paramref name="cultureInfo"/> is null, default is ("en-US")</para> 
            
            <para><b> yourjsonfile.json file must contains list or must be empty.</b> </para> 
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be added. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="contentsHasId"> Determines whether the contents are added in auto increment by "Id" property. </param>
            <param name="key"> Key of encrypted file. </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.UpdateContentFromCryptedJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Globalization.CultureInfo)">
            <summary>
            Updates contents from json file in <paramref name="filePath"/> with  <paramref name="key"/>.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <remarks>
            Updates by requested Property. Don't forget send <paramref name="mappingProperty"/> !!!
            </remarks>
            <exception cref="M:System.Exception.#ctor">
            Throwns when not valid <paramref name="mappingProperty"/> or requested Entity type does not have that <paramref name="mappingProperty"/>.
            </exception>
            <exception cref="M:System.Exception.#ctor">
            Throwns when json file in <paramref name="filePath"/> not contains <paramref name="contents"/> .
            </exception>
            <remarks>
            
            Send all the properties of the object to be updated. Otherwise, unsent properties are updated to null.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="key"> Key of encrypted file. </param>        
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>  
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.DeleteContentFromCryptedJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Globalization.CultureInfo)">
            <summary>
            Deletes record from requested json file with <paramref name="key"/>.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="key"> Key of encrypted file. </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param> 
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetRequiredSingleContentCryptedFromJsonFile``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetSingleContentFromCryptedJsonFile``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <param name="key"> Key of encrypted file. </param>        
            <returns> A single content of type <typeparamref name="T"/> if content isn't null.  </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.AddOrUpdateSingleContentToCryptedJsonFile``1(``0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="content"/> to json file in <paramref name="filePath"/> with <paramref name="key"/>.
            (like Auto Increment)
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            </summary>
            
            <remarks>
            
            yourjsonfile.json file must contains exact same type of <typeparamref name="T"/> or file must be empty.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="content"> Content to be added or updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <param name="key"> Key of encrypted file. </param>       
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations.GetLastIdIfHasId``1(System.Nullable{System.Int32}@,System.Collections.Generic.List{``0})">
            <summary>
            Gets last id from <paramref name="contentList"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lastId"></param>
            <param name="contentList"></param>
        </member>
        <member name="T:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> operations for .NET Core.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.FilesFolderNameCreator">
            <summary>
            File name creator delegate.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.SaveFileToPathAsync``1(Microsoft.AspNetCore.Http.IFormFile,``0,System.String,Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.FilesFolderNameCreator,System.String)">
            <summary>
            Saves uploaded IFormFile file to physical file path. If <paramref name="file"/>.Lenght is lower or equal than 0 then returns empty string.
            Target Path will be : "<paramref name ="basePath"></paramref>/<b><paramref name="folderNameCreator"/>()</b>/<paramref name="entity"></paramref>.<paramref name="propertyName"/>"
            </summary>
            
            <para><b>Remarks:</b></para>
            
            <remarks>
            
            <para> Don't forget validate file with <see cref="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,System.Int64,System.Collections.Generic.List{System.String},Milvasoft.Helpers.FileOperations.Enums.FileType)"/>, before use this method.</para>
            
            </remarks>
            
            <typeparam name="TEntity"></typeparam>
            <param name="file"> Uploaded file in entity. </param>
            <param name="entity"></param>
            <param name="basePath"></param>
            <param name="folderNameCreator"></param>
            <param name="propertyName"></param>
            <returns> Completed Task </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.SaveFilesToPathAsync``1(System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile},``0,System.String,Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.FilesFolderNameCreator,System.String)">
            <summary>
            Saves uploaded IFormFile files to physical file path. If file list is null or empty returns empty <see cref="T:System.Collections.Generic.List`1"/> 
            Target Path will be : "<paramref name ="basePath"></paramref>/<b><paramref name="folderNameCreator"/>()</b>/<paramref name="entity"></paramref>.<paramref name="propertyName"/>"
            </summary>
            
            <para><b>Remarks:</b></para>
            
            <remarks>
            
            <para> Don't forget validate files with <see cref="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,System.Int64,System.Collections.Generic.List{System.String},Milvasoft.Helpers.FileOperations.Enums.FileType)"/>, before use this method.</para>
            
            </remarks>
            
            <typeparam name="TEntity"></typeparam>
            <param name="files"> Uploaded file in entity. </param>
            <param name="entity"></param>
            <param name="basePath"></param>
            <param name="folderNameCreator"></param>
            <param name="propertyName"></param>
            <returns> Completed Task </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.SaveFilesToPathAsync``1(Microsoft.AspNetCore.Http.IFormFileCollection,``0,System.String,Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.FilesFolderNameCreator,System.String)">
            <summary>
            Saves uploaded IFormFile files to physical file path. If file list is null or empty returns empty <see cref="T:System.Collections.Generic.List`1"/> 
            Target Path will be : "<paramref name ="basePath"></paramref>/<b><paramref name="folderNameCreator"/>()</b>/<paramref name="entity"></paramref>.<paramref name="propertyName"/>"
            </summary>
            
            <para><b>Remarks:</b></para>
            
            <remarks>
            
            <para> Don't forget validate files with <see cref="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,System.Int64,System.Collections.Generic.List{System.String},Milvasoft.Helpers.FileOperations.Enums.FileType)"/>, before use this method.</para>
            
            </remarks>
            
            <typeparam name="TEntity"></typeparam>
            <param name="files"> Uploaded file in entity. </param>
            <param name="entity"></param>
            <param name="basePath"></param>
            <param name="folderNameCreator"></param>
            <param name="propertyName"></param>
            <returns> Completed Task </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.SaveFilesToPathAsync``3(System.Collections.Generic.List{``1},``0,System.String,Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.FilesFolderNameCreator,System.String)">
            <summary>
            Saves uploaded IFormFile files to physical file path. If file list is null or empty returns empty <see cref="T:System.Collections.Generic.List`1"/> 
            Target Path will be : "<paramref name ="basePath"></paramref>/<b><paramref name="folderNameCreator"/>()</b>/<paramref name="entity"></paramref>.<paramref name="propertyName"/>"
            </summary>
            
            <para><b>Remarks:</b></para>
            
            <remarks>
            
            <para> Don't forget validate files with <see cref="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,System.Int64,System.Collections.Generic.List{System.String},Milvasoft.Helpers.FileOperations.Enums.FileType)"/>, before use this method.</para>
            
            </remarks>
            
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TFileDTO"></typeparam>
            <typeparam name="TFileEntity"></typeparam>
            <param name="fileDTOList"> Uploaded file in entity. </param>
            <param name="entity"></param>
            <param name="basePath"></param>
            <param name="folderNameCreator"></param>
            <param name="propertyName"></param>
            <returns> Completed Task </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,System.Int64,System.Collections.Generic.List{System.String},Milvasoft.Helpers.FileOperations.Enums.FileType)">
            <summary>
            Checks that the file compatible the upload rules. 
            File extension validation is not case sensitive.
            </summary>
            <param name="file"> Uploaded file. </param>
            <param name="fileType"> Uploaded file type. (e.g image,video,sound..) </param>
            <param name="maxFileSize"> Maximum file size in bytes of uploaded file. </param>
            <param name="allowedFileExtensions"> Allowed file extensions for <paramref name="fileType"/>. </param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.ValidateFiles(System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile},System.Int64,System.Collections.Generic.List{System.String},Milvasoft.Helpers.FileOperations.Enums.FileType)">
            <summary>
            Checks that the files compatible the upload rules. 
            File extension validation is not case sensitive.
            </summary>
            <param name="files"> Uploaded files. </param>
            <param name="fileType"> Uploaded file type. (e.g image,video,sound..) </param>
            <param name="maxFileSize"> Maximum file size in bytes of uploaded file. </param>
            <param name="allowedFileExtensions"> Allowed file extensions for <paramref name="fileType"/>. </param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.GetFileUrlPathSectionFromFilePath(System.String,System.String)">
            <summary>
            Returns the path of the uploaded file.
            </summary>
            <param name="originalFilePath"> Uploaded file. </param>
            <param name="requestPath"> Request path section. (e.g. api/ImageLibrary) </param>
            <returns> "api/ImageLibrary/1/1.jpeg" </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.GetFileFromPathAsync(System.String,Milvasoft.Helpers.FileOperations.Enums.FileType)">
            <summary>
            Gets file as <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from requested path.
            </summary>
            <param name="path"></param>
            <param name="fileType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.ConvertToFormFile(System.String)">
            <summary>
            Converts data URI formatted base64 string to IFormFile.
            </summary>
            <param name="milvaBase64"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RemoveDirectoryFileIsIn(System.String)">
            <summary>
            Removes the folder the file is in.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RemoveFileByPath(System.String)">
            <summary>
            Removes file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RemoveFilesByPath(System.Collections.Generic.List{System.String})">
            <summary>
            Removes file.
            </summary>
            <param name="filePaths"></param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RemoveFilesInFolder(System.String)">
            <summary>
            Delete all files in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RemoveFilesInFolder(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Delete matching files in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
            <param name="fileNames"> File names should contains extension. </param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RemoveDirectoriesInFolder(System.String)">
            <summary>
            Delete all directories in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RemoveDirectoriesInFolder(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Delete matching directories in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
            <param name="directoryNames"></param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RemoveDirectoriesAndFolder(System.String)">
            <summary>
            Delete all files and directories in directory on <paramref name="folderPath"/>.
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.RenameFolderAndFileName(System.String,System.Guid)">
            <summary>
            It is used to change the folder and name information of the uploaded file.
            </summary>
            <param name="oldPath"> Old file path. </param>
            <param name="newId"> New id of item. </param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.GetContentType(System.String)">
            <summary>
            Allows learning of the file type.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.GetExtension(System.String,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regexString"/>.
            </summary>
            <param name="input"></param>
            <param name="regexString"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.GetMimeTypes(System.String)">
            <summary>
            File types to be accepted.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.GetDefaultFileExtensions(Milvasoft.Helpers.FileOperations.Enums.FileType)">
            <summary>
            Gets default defined file extensions by <paramref name="fileType"/>.
            </summary>
            <param name="fileType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.Combine(System.String[])">
            <summary>
            Basically a Path.Combine for URLs. Ensures exactly one '/' separates each segment,and exactly on '&amp;' separates each query parameter.
            URL-encodes illegal characters but not reserved characters.
            </summary>
            <param name="parts">URL parts to combine.</param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.FormFileOperations.EncodeIllegalCharacters(System.String,System.Boolean)">
            <summary>
            URL-encodes characters in a string that are neither reserved nor unreserved. 
            Avoids encoding reserved characters such as '/' and '?'. Avoids encoding '%' if it begins a %-hex-hex sequence (i.e. avoids double-encoding).
            </summary>
            <param name="s">The string to encode.</param>
            <param name="encodeSpaceAsPlus">If true, spaces will be encoded as + signs. Otherwise, they'll be encoded as %20.</param>
            <returns>The encoded URL.</returns>
        </member>
        <member name="T:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations">
            <summary>
            Provides add-edit-delete-get process json files that hold one list.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
            
            [
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             },
             {
               "Id": 2,
               "Name": "poco2",
               "Which": true
             },
             {
               "Id": 3,
               "Name": "poco3",
               "Which": true
             }
            ]
            
            </code>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetRequiredContentFromJsonFileAsync``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetContentFromJsonFileAsync``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content list is null or empty. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.AddContentToJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="contents"/> to json file in <paramref name="filePath"/>.
            If content has "Id" property which type is "System.Int32" . Send <paramref name="contentsHasId"/> param "true". The code will be increase Id automatically.
            </summary>
            <remarks>
            
            <para> If <paramref name="cultureInfo"/> is null, default is ("en-US")</para> 
            
            <para><b> yourjsonfile.json file must contains list or must be empty.</b> </para> 
            
            </remarks>
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be added. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="contentsHasId"> Determines whether the contents are added in auto increment by "Id" property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.UpdateContentFromJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Globalization.CultureInfo)">
            <summary>
            Updates contents from json file in <paramref name="filePath"/>.
            </summary>
            <remarks>
            Updates by requested Property. Don't forget send <paramref name="mappingProperty"/> !!!
            </remarks>
            <exception cref="M:System.Exception.#ctor">
            Throwns when not valid <paramref name="mappingProperty"/> or requested Entity type does not have that <paramref name="mappingProperty"/>.
            </exception>
            <exception cref="M:System.Exception.#ctor">
            Throwns when json file in <paramref name="filePath"/> not contains <paramref name="contents"/> .
            </exception>
            <remarks>
            
            Send all the properties of the object to be updated. Otherwise, unsent properties are updated to null.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>  
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.DeleteContentFromJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Globalization.CultureInfo)">
            <summary>
            Deletes record from requested json file.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
             
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param> 
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetRequiredSingleContentFromJsonFileAsync``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetSingleContentFromJsonFileAsync``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content is null. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/> if content isn't null.  </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.AddOrUpdateSingleContentToJsonFileAsync``1(``0,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="content"/> to json file in <paramref name="filePath"/>.
            (like Auto Increment)
            </summary>
            
            <remarks>
            
            yourjsonfile.json file must contains exact same type of <typeparamref name="T"/> or file must be empty.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="content"> Content to be added or updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.ClearJSONFileAsync(System.String)">
            <summary>
            Clears json file in <paramref name="filePath"/>.
            </summary>
            <param name="filePath"> Path to json file to get data from. </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetRequiredContentFromCryptedJsonFileAsync``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from crypted json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR  </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetContentFromCryptedJsonFileAsync``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content list is null or empty. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR  </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.AddContentToCryptedJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Boolean,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="contents"/> to json file in <paramref name="filePath"/> with <paramref name="key"/>.
            If content has "Id" property which type is "System.Int32" . Send <paramref name="contentsHasId"/> param "true". The code will be increase Id automatically.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <remarks>
            
            <para> If <paramref name="cultureInfo"/> is null, default is ("en-US")</para> 
            
            <para><b> yourjsonfile.json file must contains list or must be empty.</b> </para> 
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be added. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="contentsHasId"> Determines whether the contents are added in auto increment by "Id" property. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR  </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.UpdateContentFromCryptedJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Globalization.CultureInfo)">
            <summary>
            Updates contents from json file in <paramref name="filePath"/> with  <paramref name="key"/>.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <remarks>
            Updates by requested Property. Don't forget send <paramref name="mappingProperty"/> !!!
            </remarks>
            <exception cref="M:System.Exception.#ctor">
            Throwns when not valid <paramref name="mappingProperty"/> or requested Entity type does not have that <paramref name="mappingProperty"/>.
            </exception>
            <exception cref="M:System.Exception.#ctor">
            Throwns when json file in <paramref name="filePath"/> not contains <paramref name="contents"/> .
            </exception>
            <remarks>
            
            Send all the properties of the object to be updated. Otherwise, unsent properties are updated to null.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR  </param>        
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>  
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.DeleteContentFromCryptedJsonFileAsync``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Globalization.CultureInfo)">
            <summary>
            Deletes record from requested json file with <paramref name="key"/>.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR  </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param> 
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetRequiredSingleContentCryptedFromJsonFileAsync``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetSingleContentFromCryptedJsonFileAsync``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>        
            <returns> A single content of type <typeparamref name="T"/> if content isn't null.  </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.AddOrUpdateSingleContentToCryptedJsonFileAsync``1(``0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="content"/> to json file in <paramref name="filePath"/> with <paramref name="key"/>.
            (like Auto Increment)
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            </summary>
            
            <remarks>
            
            yourjsonfile.json file must contains exact same type of <typeparamref name="T"/> or file must be empty.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="content"> Content to be added or updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR  </param>       
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetRequiredContentFromJsonFile``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content list is null or empty. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetContentFromJsonFile``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.AddContentToJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="contents"/> to json file in <paramref name="filePath"/>.
            If content has "Id" property which type is "System.Int32" . Send <paramref name="contentsHasId"/> param "true". The code will be increase Id automatically.
            </summary>
            <remarks>
            
            <para> If <paramref name="cultureInfo"/> is null, default is ("en-US")</para> 
            
            <para><b> yourjsonfile.json file must contains list or must be empty.</b> </para> 
            
            </remarks>
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be added. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="contentsHasId"> Determines whether the contents are added in auto increment by "Id" property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.UpdateContentFromJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Globalization.CultureInfo)">
            <summary>
            Updates contents from json file in <paramref name="filePath"/>.
            </summary>
            <remarks>
            Updates by requested Property. Don't forget send <paramref name="mappingProperty"/> !!!
            </remarks>
            <exception cref="M:System.Exception.#ctor">
            Throwns when not valid <paramref name="mappingProperty"/> or requested Entity type does not have that <paramref name="mappingProperty"/>.
            </exception>
            <exception cref="M:System.Exception.#ctor">
            Throwns when json file in <paramref name="filePath"/> not contains <paramref name="contents"/> .
            </exception>
            <remarks>
            
            Send all the properties of the object to be updated. Otherwise, unsent properties are updated to null.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>  
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.DeleteContentFromJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Globalization.CultureInfo)">
            <summary>
            Deletes record from requested json file.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param> 
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetRequiredSingleContentFromJsonFile``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetSingleContentFromJsonFile``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/>. 
            Returns them as the requested list of type.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content is null. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/> if content isn't null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.AddOrUpdateSingleContentToJsonFile``1(``0,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="content"/> to json file in <paramref name="filePath"/>.
            (like Auto Increment)
            </summary>
            
            <remarks>
            
            yourjsonfile.json file must contains exact same type of <typeparamref name="T"/> or file must be empty.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="content"> Content to be added or updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.ClearJSONFile(System.String)">
            <summary>
            Clears json file in <paramref name="filePath"/>.
            </summary>
            <param name="filePath"> Path to json file to get data from. </param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetRequiredContentFromCryptedJsonFile``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from crypted json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetContentFromCryptedJsonFile``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets all content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content list is null or empty. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A content list of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.AddContentToCryptedJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Boolean,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="contents"/> to json file in <paramref name="filePath"/> with <paramref name="key"/>.
            If content has "Id" property which type is "System.Int32" . Send <paramref name="contentsHasId"/> param "true". The code will be increase Id automatically.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <remarks>
            
            <para> If <paramref name="cultureInfo"/> is null, default is ("en-US")</para> 
            
            <para><b> yourjsonfile.json file must contains list or must be empty.</b> </para> 
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be added. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="contentsHasId"> Determines whether the contents are added in auto increment by "Id" property. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.UpdateContentFromCryptedJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Globalization.CultureInfo)">
            <summary>
            Updates contents from json file in <paramref name="filePath"/> with  <paramref name="key"/>.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            <remarks>
            Updates by requested Property. Don't forget send <paramref name="mappingProperty"/> !!!
            </remarks>
            <exception cref="M:System.Exception.#ctor">
            Throwns when not valid <paramref name="mappingProperty"/> or requested Entity type does not have that <paramref name="mappingProperty"/>.
            </exception>
            <exception cref="M:System.Exception.#ctor">
            Throwns when json file in <paramref name="filePath"/> not contains <paramref name="contents"/> .
            </exception>
            <remarks>
            
            Send all the properties of the object to be updated. Otherwise, unsent properties are updated to null.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>        
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>  
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.DeleteContentFromCryptedJsonFile``1(System.Collections.Generic.List{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Globalization.CultureInfo)">
            <summary>
            Deletes record from requested json file with <paramref name="key"/>.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="contents"> Contents to be updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="mappingProperty"> The data to be updated is extracted from the file according to this property. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param> 
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetRequiredSingleContentCryptedFromJsonFile``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>      
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <returns> A single content of type <typeparamref name="T"/>. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetSingleContentFromCryptedJsonFile``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets single content from json file in <paramref name="filePath"/> with <paramref name="key"/>. 
            Returns them as the requested list of type.
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            <para> Example json file template for use this library methods; </para>
            <code>
            
             {
               "Id": 1,
               "Name": "poco1",
               "Which": false
             }
             
             OR
             
             "Hello World!"
            
            </code>
            
            </summary>
            
            <remarks> 
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when returned content is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>        
            <returns> A single content of type <typeparamref name="T"/> if content isn't null.  </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.AddOrUpdateSingleContentToCryptedJsonFile``1(``0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds <paramref name="content"/> to json file in <paramref name="filePath"/> with <paramref name="key"/>.
            (like Auto Increment)
            !!! Milvasoft Corporation is not responsible of possible data loss.
            
            </summary>
            
            <remarks>
            
            yourjsonfile.json file must contains exact same type of <typeparamref name="T"/> or file must be empty.
            
            If <paramref name="cultureInfo"/> is null, default is ("en-US")
            
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when key is not proper lenght. </exception>
            <exception cref="T:System.ArgumentException"> Throwns when key is incorrect. </exception>
            
            <typeparam name="T"> Return type. </typeparam>
            <param name="content"> Content to be added or updated. </param>
            <param name="filePath"> Path to json file to get data from. </param>
            <param name="cultureInfo"> Culture information. Default is "en-US". </param>
            <param name="key"> Key of encrypted file. Example key: 4u7x!A%D*F-JaNdR </param>       
            <returns> Completed <see cref="T:System.Threading.Tasks.Task"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetLastIdIfHasId``1(System.Nullable{System.Int32}@,System.Collections.Generic.List{``0})">
            <summary>
            Gets last id from <paramref name="contentList"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lastId"></param>
            <param name="contentList"></param>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.GetPropertyNameFromExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines the right casting and pets property name from expression with this right casting.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.FileOperations.Concrete.JsonOperations.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            <para><b>EN: </b>Checks whether or not collection is null or empty. Assumes collection can be safely enumerated multiple times.</para>
            <para><b>TR: </b>Koleksiyonun boş veya boş olup olmadığını denetler. Koleksiyonun birden çok kez güvenli bir şekilde numaralandırılabileceğini varsayar.</para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.FileOperations.Enums.FileType">
            <summary>
             File types.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.Image">
            <summary> 
            File Type Image
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.Video">
            <summary> 
            File Type Video
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.ARModel">
            <summary>
            File Type ARModel       
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.Audio">
            <summary> 
            File Type Audio
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.Document">
            <summary> 
            File Type Document
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.Compressed">
            <summary> 
            File Type Compressed
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.EMail">
            <summary> 
            File Type EMail
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.Font">
            <summary> 
            File Type Font
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileType.InternetRelated">
            <summary> 
            File Type InternetRelated
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.FileOperations.Enums.FileValidationResult">
            <summary>
            File validation results. 
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileValidationResult.Valid">
            <summary> 
            Valid file result.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileValidationResult.FileSizeTooBig">
            <summary> 
            File size too big result.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileValidationResult.InvalidFileExtension">
            <summary> 
            Invalid file extension result.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.FileOperations.Enums.FileValidationResult.NullFile">
            <summary> 
            Invalid file extension result.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Filter">
            <summary>
            Helper for filtering.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Filter.FilterByDate``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}})">
             <summary>
             <para> Filter <paramref name="contentList"/> by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
             </summary>
             
             <remarks>
             
             <para><b>Remarks: </b></para>
             
             <para> If a selection has been made between two dates, it will return those between the two dates. </para>
             <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
             <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
             
             </remarks>
            
             <typeparam name="T"></typeparam>
             <param name="contentList"></param>
             <param name="dateTopValue"></param>
             <param name="dateLowerValue"></param>
             <param name="dateProperty"></param>
             <returns> Filtered <paramref name="contentList"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Filter.CreateDateFilterExpression``1(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}})">
            <summary>
            <para> Creates expression by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks: </b></para>
            
            <para> If a selection has been made between two dates, it will return those between the two dates. </para>
            <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
            <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
            
            </remarks>
            
            <typeparam name="T"></typeparam>
            <param name="dateTopValue"></param>
            <param name="dateLowerValue"></param>
            <param name="dateProperty"></param>
            <returns> 
            
            Example Return when both values has value :
            
            <code> i => i.<paramref name="dateProperty"/> <b>biggerThanOrEqual</b> <paramref name="dateLowerValue"/> <b>AND</b> i.<paramref name="dateProperty"/> <b>lessThanOrEqual</b> <paramref name="dateTopValue"/> </code>
            
            </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Filter.CreateDateFilterExpression``1(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.DateTime}})">
            <summary>
            <para> Creates expression by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks: </b></para>
            
            <para> If a selection has been made between two dates, it will return those between the two dates. </para>
            <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
            <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
            
            </remarks>
            
            <typeparam name="T"></typeparam>
            <param name="dateTopValue"></param>
            <param name="dateLowerValue"></param>
            <param name="dateProperty"></param>
            <returns> 
            
            Example Return when both values has value :
            
            <code> i => i.<paramref name="dateProperty"/> <b>biggerThanOrEqual</b> <paramref name="dateLowerValue"/> <b>AND</b> i.<paramref name="dateProperty"/> <b>lessThanOrEqual</b> <paramref name="dateTopValue"/> </code>
            
            </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Filter.GetSpecMaxValues``2(System.Collections.Generic.IEnumerable{``0},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}}[])">
            <summary>
            <para>Gets maximum list values of matching properties of <paramref name="maxValuesObject"/> and <typeparamref name = "T" />.</para>
            <para>Returns that max values in <paramref name="maxValuesObject"/>.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturnObject"></typeparam>
            <param name="entities"></param>
            <param name="maxValuesObject"></param>
            <param name="requestedProperties"></param>
            <returns> Mapped <paramref name="maxValuesObject"/> </returns>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7">
            <summary>
            Provides Identity operations like sign in, sign out.
            </summary>
            <typeparam name="TUserManager"></typeparam>
            <typeparam name="TDbContext"></typeparam>
            <typeparam name="TLocalizer"></typeparam>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TLoginResultDTO"></typeparam>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.UserValidation">
            <summary>
            Delegate for user validation.
            </summary>
            <param name="loginDTO"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.UserValidationByUserType">
            <summary>
            Delegate for user validation.
            </summary>
            <param name="loginDTO"></param>
            <param name="user"></param>
            <param name="isUserType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.LoginAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,Milvasoft.Helpers.Identity.Abstract.IIdentityOperations{`0,`1,`2,`3,`4,`5,`6}.UserValidation,System.DateTime)">
            <summary>
            Signs in for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <param name="loginDTO"></param>
            <param name="userValidation"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.LoginAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,System.Boolean,Milvasoft.Helpers.Identity.Abstract.IIdentityOperations{`0,`1,`2,`3,`4,`5,`6}.UserValidationByUserType,System.DateTime)">
            <summary>
            Signs in for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <param name="loginDTO"></param>
            <param name="isUserType"></param>
            <param name="userValidationByUserType"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.LogoutAsync">
            <summary>
            Signs out from database. Returns null if already signed out.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.DeleteUserAsync(System.Guid)">
            <summary>
            Delete user by <paramref name="userId"/>.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ResetPasswordAsync(System.String)">
            <summary>
            Resetes current user's password.
            </summary>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ChangeCurrentUserPasswordAsync(System.String,System.String)">
            <summary>
            Change current user's password.
            </summary>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ChangePasswordAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> password.
            </summary>
            <param name="user"></param>
            <param name="currentPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ChangeEmailAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> email.
            </summary>
            <param name="user"></param>
            <param name="newEmail"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Abstract.IIdentityOperations`7.ChangePhoneNumberAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> phone number.
            </summary>
            <param name="user"></param>
            <param name="newPhoneNumber"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.ILoginDTO">
            <summary>
            Login and sign up processes are happens with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ILoginDTO.UserName">
            <summary>
            UserName of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ILoginDTO.Email">
            <summary>
            Email of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ILoginDTO.Password">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ILoginDTO.Persistent">
            <summary>
            Remember me option.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO">
            <summary>
            Login and sign up processes are happens with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO.UserName">
            <summary>
            UserName of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO.Email">
            <summary>
            Email of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO.Password">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Abstract.ISignUpDTO.PhoneNumber">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.ILoginResultDTO">
            <summary>
            Login result DTO for DI.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ILoginResultDTO.ErrorMessages">
            <summary>
            Error messages of result.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ILoginResultDTO.Token">
            <summary>
            If result is success sets the token.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.ITokenManagement">
            <summary>
            Token management DTO for DI.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ITokenManagement.Secret">
            <summary>
            Gets or sets Secret key of token.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ITokenManagement.Issuer">
            <summary>
            Gets or sets Authorization issuer.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ITokenManagement.Audience">
            <summary>
            Gets or sets Authorization audience.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ITokenManagement.LoginProvider">
            <summary>
            Gets or sets Authorization issuer.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ITokenManagement.TokenName">
            <summary>
            Gets or sets Authorization audience.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ITokenManagement.AccessExpiration">
            <summary>
            Gets or sets AccessExpiration of token.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.ITokenManagement.RefreshExpiration">
            <summary>
            Gets or sets RefreshExpiration of token.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers">
            <summary>
            Identity helpers.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers.DescriptionJoin(Microsoft.AspNetCore.Identity.IdentityResult,System.Char)">
            <summary>
            Append joins <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/>.Description with <paramref name="seperator"/>.
            </summary>
            <param name="result"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers.DescriptionJoin(Microsoft.AspNetCore.Identity.IdentityResult,System.String)">
            <summary>
            Append joins <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/>.Description with <paramref name="seperator"/>.
            </summary>
            <param name="result"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers.DescriptionJoin(System.Collections.Generic.List{Microsoft.AspNetCore.Identity.IdentityError},System.Char)">
            <summary>
            Append joins <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/>.Description with <paramref name="seperator"/>.
            </summary>
            <param name="errorList"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers.DescriptionJoin(System.Collections.Generic.List{Microsoft.AspNetCore.Identity.IdentityError},System.String)">
            <summary>
            Append joins <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/>.Description with <paramref name="seperator"/>.
            </summary>
            <param name="errorList"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers.ThrowErrorMessagesIfNotSuccess(Microsoft.AspNetCore.Identity.IdentityResult)">
            <summary>
            If <paramref name="result"/> is not succeeded throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers.ThrowErrorMessagesIfNotSuccess(Microsoft.AspNetCore.Identity.IdentityResult,System.Char)">
            <summary>
            If <paramref name="result"/> is not succeeded throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/>.
            </summary>
            <param name="result"></param>
            <param name="seperator"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers.GenerateRandomPassword(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates random password.
            </summary>
            <param name="length"></param>
            <param name="nonAlphanumeric"></param>
            <param name="digit"></param>
            <param name="lowercase"></param>
            <param name="uppercase"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityHelpers.GenerateRandomPassword(Microsoft.AspNetCore.Identity.PasswordOptions)">
            <summary>
            Generates random password according to <paramref name="passwordOptions"/>.
            </summary>
            <param name="passwordOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7">
            <summary>
            Provides Identity operations like sign in, sign out.
            </summary>
            <typeparam name="TUserManager"></typeparam>
            <typeparam name="TDbContext"></typeparam>
            <typeparam name="TLocalizer"></typeparam>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TLoginResultDTO"></typeparam>
        </member>
        <member name="F:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7._useWhiteList">
            <summary>
            Gets or sets GetSoftDeletedEntities. Default is false.
            If value is true, all methods returns all entities.
            If value is false, all methods returns entities which only "IsDeleted" property's value is false.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7._loginProvier">
            <summary>
            The authentication scheme for the provider the token is associated with.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7._tokenName">
            <summary>
            The name of token.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.#ctor(`0,Microsoft.AspNetCore.Identity.SignInManager{`3},Milvasoft.Helpers.Identity.Concrete.ITokenManagement,Milvasoft.Helpers.DataAccess.Abstract.IContextRepository{`1},`2,Microsoft.AspNetCore.Http.IHttpContextAccessor,System.Boolean)">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="tokenManagement"></param>
            <param name="contextRepository"></param>
            <param name="localizer"></param>
            <param name="httpContextAccessor"></param>
            <param name="useWhiteList"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.LoginAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,Milvasoft.Helpers.Identity.Abstract.IIdentityOperations{`0,`1,`2,`3,`4,`5,`6}.UserValidation,System.DateTime)">
            <summary>
            Login for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <param name="loginDTO"></param>
            <param name="userValidation"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.LoginAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,System.Boolean,Milvasoft.Helpers.Identity.Abstract.IIdentityOperations{`0,`1,`2,`3,`4,`5,`6}.UserValidationByUserType,System.DateTime)">
            <summary>
            Login for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <param name="loginDTO"></param>
            <param name="isUserType"></param>
            <param name="userValidationByUserType"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.LogoutAsync">
            <summary>
            Logout from database. Returns null if already signed out.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.DeleteUserAsync(System.Guid)">
            <summary>
            Delete user by <paramref name="userId"/>.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ResetPasswordAsync(System.String)">
            <summary>
            Resetes current user's password.
            </summary>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ChangeCurrentUserPasswordAsync(System.String,System.String)">
            <summary>
            Change current user's password.
            </summary>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ChangePasswordAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> password.
            </summary>
            <param name="user"></param>
            <param name="currentPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ChangeEmailAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> email.
            </summary>
            <param name="user"></param>
            <param name="newEmail"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ChangePhoneNumberAsync(`3,System.String,System.String)">
            <summary>
            Changes <paramref name="user"/> phone number.
            </summary>
            <param name="user"></param>
            <param name="newPhoneNumber"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ValidateUserAsync(Milvasoft.Helpers.Identity.Abstract.ILoginDTO,`3)">
            <summary>
            Validating user to login.
            </summary>
            <param name="loginDTO"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.GenerateTokenWithRoleAsync(`3,System.DateTime)">
            <summary>
            Roll is added according to user type and token is produced.
            </summary>
            <param name="user"></param>
            <param name="tokenExpiredDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.GenerateToken(System.String,System.Collections.Generic.IList{System.String},System.DateTime)">
            <summary>
            If Authentication is successful, JWT tokens are generated.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.ValidateTokenGetExpiredTime(System.String)">
            <summary>
            Decode Process of Token returns the time inside by Decoding the Token
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.IdentityOperations`7.GetPrincipalForAccessToken(System.String)">
            <summary>
            Returns Claims in token for token decode
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1">
            <summary>
            Provides localized identity error messages. All error's code is nameof(<see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/>) method. (e.g. Code = "DefaultError")
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.#ctor(`0)">
            <summary>
            Constructor for localizer dependenct injection.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.DefaultError">
            <summary>
            An unknown failure has occurred. Localizer Key : IdentityDefaultError
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.DuplicateUserName(System.String)">
            <summary>
            There is another user with this username. Localizer Key : IdentityDuplicateUsername
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.DuplicateEmail(System.String)">
            <summary>
            There is another user with this email. Localizer Key : IdentityDuplicateEmail
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.InvalidUserName(System.String)">
            <summary>
            Invalid username. Localizer Key : IdentityInvalidUsername
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.InvalidEmail(System.String)">
            <summary>
            Invalid email. Localizer Key : IdentityInvalidEmail
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.ConcurrencyFailure">
            <summary>
            Concurrency failure, data has been modified. Localizer Key : IdentityConcurrencyFailure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.DuplicateRoleName(System.String)">
            <summary>
            This role is already exist. Localizer Key : IdentityDuplicateRoleName
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.InvalidRoleName(System.String)">
            <summary>
            Invalid role name. Localizer Key : IdentityInvalidRoleName
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.InvalidToken">
            <summary>
            Invalid credentials. Localizer Key : IdentityInvalidToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.LoginAlreadyAssociated">
            <summary>
            This user is already logged in. Localizer Key : IdentityLoginAlreadyAssociated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.PasswordMismatch">
            <summary>
            Incorrect password. Localizer Key : IdentityPasswordMismatch
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.PasswordRequiresDigit">
            <summary>
            Password must have at least one digit. Localizer Key : IdentityPasswordRequiresDigit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.PasswordRequiresLower">
            <summary>
            Password must have at least one lowercase. Localizer Key : IdentityPasswordRequiresLower
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.PasswordRequiresNonAlphanumeric">
            <summary>
            Password must have at least one alphanumeric character. Localizer Key : IdentityPasswordRequiresNonAlphanumeric
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.PasswordRequiresUniqueChars(System.Int32)">
            <summary>
            Password must have at least one special character. Localizer Key : IdentityPasswordRequiresUniqueChars
            </summary>
            <param name="uniqueChars"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.PasswordRequiresUpper">
            <summary>
            Password must have at least one uppercase. Localizer Key : IdentityPasswordRequiresUpper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.PasswordTooShort(System.Int32)">
            <summary>
            Password lenght is too short. Localizer Key : IdentityPasswordTooShort
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.RecoveryCodeRedemptionFailed">
            <summary>
            Recovery failed. Localizer Key : IdentityRecoveryCodeRedemptionFailed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.UserAlreadyHasPassword">
            <summary>
            User already has password. Localizer Key : IdentityUserAlreadyHasPassword
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.UserAlreadyInRole(System.String)">
            <summary>
            The user is already assigned to this role. Localizer Key : IdentityUserAlreadyInRole
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.UserLockoutNotEnabled">
            <summary>
            Lockout is not enabled for this user. Localizer Key : IdentityUserLockoutNotEnabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaIdentityDescriber`1.UserNotInRole(System.String)">
            <summary>
            User is not assigned to this role. Localizer Key : IdentityUserNotInRole
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.MilvaUserValidation`3">
            <summary>
            Provides an abstraction for user validation.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaUserValidation`3.#ctor(`2)">
            <summary>
            Constructor for localizer dependenct injection.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Identity.Concrete.MilvaUserValidation`3.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Validates the specified user as an asynchronous operation.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Identity.Concrete.SignedInUsers">
            <summary>
            Contains userId and Token pair for authentication.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Identity.Concrete.SignedInUsers.SignedInUserTokens">
            <summary>
            UserName and token pairs for each logged in user.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Integration.Expo.PushNotification.ExpoClient">
            <summary>
            Expo client for push api requests.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Integration.Expo.PushNotification.ExpoClient._httpHandler">
            <summary>
            Make this static to avoid socket saturation and limit concurrent server connections to 6, but only for instances of this class.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Integration.Expo.PushNotification.ExpoClient.AddBearerAuthorizationHeader(System.String)">
            <summary>
            Adds Bearer authorization header value to <see cref="P:System.Net.Http.HttpClient.DefaultRequestHeaders"/>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Integration.Expo.PushNotification.ExpoClient.PushSendAsync(Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest)">
            <summary>
            Sends <paramref name="pushTicketRequest"/> to expo push api and returns <see cref="T:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketResponse"/>.
            </summary>
            <param name="pushTicketRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Integration.Expo.PushNotification.ExpoClient.PushGetReceiptsAsync(Milvasoft.Helpers.Integration.Expo.PushNotification.PushReceiptRequest)">
            <summary>
            Sends <paramref name="pushReceiptRequest"/> to expo push api and returns <see cref="T:Milvasoft.Helpers.Integration.Expo.PushNotification.PushReceiptResponse"/>.
            </summary>
            <param name="pushReceiptRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Integration.Expo.PushNotification.ExpoClient.PostAsync``2(``0,System.String)">
            <summary>
            Serailizes <paramref name="requestObj"/> and sends post request to <paramref name="path"/> and returns response as <typeparamref name="U"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="requestObj"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Integration.Expo.PushNotification.PushDataObject">
            <summary>
            Expo api accepts only json objects. So that we use this class to serialize to be transferred data into <see cref="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushData"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Integration.Expo.PushNotification.PushDataObject.#ctor(System.Object,System.SByte)">
            <summary>
            Initializes new instances of <see cref="T:Milvasoft.Helpers.Integration.Expo.PushNotification.PushDataObject"/>.
            </summary>
            <param name="data"></param>
            <param name="notificationId"></param>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushDataObject.Data">
            <summary>
            To be transferred data.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushDataObject.NotificationId">
            <summary>
            Notification type id for mobile application.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest">
            <summary>
            Model for expo push notification api send push notification. Max <see cref="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushTo"/> count is 100.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.#ctor(System.SByte)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest"/>
            </summary>
            <param name="notificationId"></param>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushTo">
            <summary>
            An Expo push token or an array of Expo push tokens specifying the recipient(s) of this message.
            Platform : iOS and Android
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushData">
            <summary>
            A JSON object delivered to your app. It may be up to about 4KiB; the total notification payload sent to Apple and Google must be at most 4KiB or else you will get a "Message Too Big" error.
            Platform : iOS and Android
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushTitle">
            <summary>
            The title to display in the notification. Often displayed above the notification body
            Platform : iOS and Android
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushBody">
            <summary>
            The message to display in the notification.
            Platform : iOS and Android
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushTTL">
            <summary>
            Time to Live: the number of seconds for which the message may be kept around for redelivery if it hasn't been delivered yet. Defaults to undefined in order to use the respective defaults of each provider (0 for iOS/APNs and 2419200 (4 weeks) for Android/FCM).
            Platform : iOS and Android
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushExpiration">
            <summary>
            Timestamp since the UNIX epoch specifying when the message expires. Same effect as ttl (ttl takes precedence over expiration).
            Platform : iOS and Android
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushPriority">
            <summary>
            The delivery priority of the message. Specify "default" or omit this field to use the default priority on each platform ("normal" on Android and "high" on iOS).
            Platform : iOS and Android
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushSubTitle">
            <summary>
            The subtitle to display in the notification below the title.
            Platform : iOS 
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushSound">
            <summary>
            Play a sound when the recipient receives this notification. Specify "default" to play the device's default notification sound, or omit this field to play no sound.
            Platform : iOS
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushBadgeCount">
            <summary>
            Number to display in the badge on the app icon. Specify zero to clear the badge.
            Platform : iOS 
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Integration.Expo.PushNotification.PushTicketRequest.PushChannelId">
            <summary>
            ID of the Notification Channel through which to display this notification. If an ID is specified but the corresponding channel does not exist on the device (i.e. has not yet been created by your app), the notification will not be displayed to the user.
            Platform : Android
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Mail.IMilvaMailSender">
            <summary>
            Provides send mail.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMailAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMailAsync(System.String,Milvasoft.Helpers.Enums.MailSubject,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMailAsync(System.String,System.String,System.String,System.String,System.Net.Mime.ContentType,System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="filePath"></param>
            <param name="contentType"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMailAsync(System.String,System.String,System.String,System.Collections.Generic.List{System.Net.Mail.Attachment},System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachments"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMailAsync(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="base64String"> Data uri formatted base64 string.</param>
            <param name="attachmentName"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMailAsync(System.String,Milvasoft.Helpers.Enums.MailSubject,System.String,System.String,System.Net.Mime.ContentType,System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="filePath"></param>
            <param name="contentType"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMail(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMail(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="filePath"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.IMilvaMailSender.MilvaSendMail(System.String,Milvasoft.Helpers.Enums.MailSubject,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Mail.MilvaMailSender">
            <summary>
            Provides send mail.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Mail.MilvaMailSender.From">
            <summary>
            Gets or sets mail sender.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Mail.MilvaMailSender.NetworkCredential">
            <summary>
            Gets or sets mail sender credentials.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Mail.MilvaMailSender.SmtpPort">
            <summary>
            Gets or sets Port of mail sender.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Mail.MilvaMailSender.SmtpHost">
            <summary>
            Gets or sets Host of mail sender.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.#ctor(System.String,System.Net.NetworkCredential,System.Int32,System.String)">
            <summary>
            Initializes mail sending operation default values.
            </summary>
            <param name="from"></param>
            <param name="networkCredential"></param>
            <param name="smtpPort"></param>
            <param name="smtpHost"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMailAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMailAsync(System.String,Milvasoft.Helpers.Enums.MailSubject,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMailAsync(System.String,System.String,System.String,System.String,System.Net.Mime.ContentType,System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="filePath"></param>
            <param name="contentType"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMailAsync(System.String,System.String,System.String,System.Collections.Generic.List{System.Net.Mail.Attachment},System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachments"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMailAsync(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="base64String"> Data uri formatted base64 string.</param>
            <param name="attachmentName"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMailAsync(System.String,Milvasoft.Helpers.Enums.MailSubject,System.String,System.String,System.Net.Mime.ContentType,System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="filePath"></param>
            <param name="contentType"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMail(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMail(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Provides send mail with attachment.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="filePath"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="M:Milvasoft.Helpers.Mail.MilvaMailSender.MilvaSendMail(System.String,Milvasoft.Helpers.Enums.MailSubject,System.String,System.Boolean)">
            <summary>
            Provides send mail.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
        </member>
        <member name="T:Milvasoft.Helpers.Models.CommunicationModel`2">
            <summary>
            Standart communication model. 
            For example, it can be used when you have two APIs communicating in a project and these APIs often need the same key when communicating.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.Models.CommunicationModel`2.TransmittedModel">
            <summary>
            Model transmitted during communication
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.CommunicationModel`2.TransmittedId">
            <summary>
            Key that must always be transmitted during communication.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.IFileDTO">
            <summary>
            Abstraction for multiple file upload process.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.IFileDTO.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.IFileDTO.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.IFileEntity">
            <summary>
             Abstraction for multiple file upload process.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.IFileEntity.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.IFileEntity.FilePath">
            <summary>
            Path of file.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.InvalidString">
            <summary>
            Invalid strings for prevent hacking or someting ;)
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.InvalidString.Name">
            <summary>
            Name of invalid string.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.InvalidString.Values">
            <summary>
            Invalid values.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.PaginationDTO`1">
            <summary>
            Stores pagination information.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.PaginationDTO`1.DTOList">
            <summary>
            Items in page. 
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.PaginationDTO`1.PageCount">
            <summary>
            Page count information.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.PaginationDTO`1.TotalDataCount">
            <summary>
            Total data count of all pages.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.BaseResponse">
            <summary>
            Base response model for API responses.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.BaseResponse.Success">
            <summary>
            <para> Default = true. </para>
            <para> Information of whether the request was successful. </para>
            <para> If request is success: Success = true. </para>
            <para> If request is fail: Success = false. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.BaseResponse.Message">
            <summary>
            <para> Default: Process Successful! </para>
            <para> Message of response. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.BaseResponse.StatusCode">
            <summary>
            <para> Default = <see cref="F:Milvasoft.Helpers.Utils.MilvaStatusCodes.Status200OK"/> </para>
            <para> Http status code of response. </para>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.ExceptionResponse">
            <summary>
            Model of Exception.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ExceptionResponse.Result">
            <summary>
            Result of request.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ExceptionResponse.ErrorCodes">
            <summary>
            Error codes of request, if exists.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1">
            <summary>
            Response model for requests that return a object.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ObjectResponse`1.Result">
            <summary>
            Result object.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Models.Response.ValidationError">
            <summary>
            Validation error model for property.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ValidationError.ValidationFieldName">
            <value>
            Property where validation error occurred.
            </value>
        </member>
        <member name="P:Milvasoft.Helpers.Models.Response.ValidationError.ErrorMessageList">
            <value>
            Property's validation error messages.
            </value>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Accessor.ITenantAccessor`2">
            <summary>
            Tenant accessor for easy access.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.Accessor.ITenantAccessor`2.Tenant">
            <summary>
            Accessed tenant from <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Accessor.TenantAccessor`2">
            <summary>
            Tenant accessor for easy access.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Accessor.TenantAccessor`2.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Accessor.TenantAccessor`2"/>.
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.Accessor.TenantAccessor`2.Tenant">
            <summary>
            Accessed tenant from <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Builder.TenantBuilder`2">
            <summary>
            Configure tenant services.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Builder.TenantBuilder`2.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Builder.TenantBuilder`2"/>.
            Registers <see cref="T:Milvasoft.Helpers.MultiTenancy.Service.TenantService`2"/> to <see cref="T:Milvasoft.Helpers.MultiTenancy.Service.ITenantService`2"/> as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient"/>
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Builder.TenantBuilder`2.WithResolutionStrategy``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers the tenant resolver implementation.
            </summary>
            <typeparam name="TResolutionStrategy"></typeparam>
            <param name="lifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Builder.TenantBuilder`2.WithStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers the tenant store implementation.
            </summary>
            <typeparam name="TStore"></typeparam>
            <param name="lifetime"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.EntityBase.IMilvaTenantBase`1">
            <summary>
            Tenant base.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.IMilvaTenantBase`1.TenancyName">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.IMilvaTenantBase`1.Name">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.IMilvaTenantBase`1.ConnectionString">
            <summary>
            ENCRYPTED connection string of the tenant database.
            Can be null if this tenant is stored in host database.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.IMilvaTenantBase`1.IsActive">
            <summary>
            Is this tenant active?
            If as tenant is not active, no user of this tenant can use the application.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.EntityBase.IMilvaBaseTenant`1">
            <summary>
            Tenant base.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaBaseTenant`2">
            <summary>
            Tenant base.
            </summary>
            <typeparam name="TKey"> Your key must override ToString() method correctly to block exceptions in <see cref="T:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2"/>. </typeparam>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaBaseTenant`2.TenancyName">
            <summary>
            Tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaBaseTenant`2.Name">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaBaseTenant`2.ConnectionString">
            <summary>
            ENCRYPTED connection string of the tenant database.
            Can be null if this tenant is stored in host database.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaBaseTenant`2.IsActive">
            <summary>
            Is this tenant active?
            If as tenant is not active, no user of this tenant can use the application.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2">
            <summary>
            Represents a Tenant of the application.
            </summary>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.Id">
            <summary>
            Id of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.TenancyName">
            <summary>
            Tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.BranchNo">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.SubscriptionExpireDate">
            <summary>
            Represents Tenant's subscription expire date.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.DeleterUser">
            <summary>
            Deleter user navigation property.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.LastModifierUser">
            <summary>
            Modifier user navigation property.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.CreatorUser">
            <summary>
            Creator user navigation property.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.#ctor">
            <summary>
            Creates a new tenant.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.MilvaTenant`2.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new tenant.
            </summary>
            <param name="tenancyName">UNIQUE name of this Tenant</param>
            <param name="branchNo"></param>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId">
            <summary>
            Fully unique tenant id.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.Empty">
            <summary>
            Creates an empty <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/> instance.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.TenancyName">
            <summary>
            Unique tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.BranchNo">
            <summary>
            Branch no of Tenant.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.#ctor(System.String)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/>.
            </summary>
            <param name="tenantIdString"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.#ctor(System.String,System.Int32)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/>.
            </summary>
            <param name="tenancyName"></param>
            <param name="branchNo"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.NewTenantId">
            <summary>
            Generates new unique tenant id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.GetHashCode">
            <summary>
            Combines Tenancy Name and BranchNo into a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.GetHashString">
            <summary>
            Returns hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.Equals(System.Object)">
            <summary>
            Compares hashes.
            </summary>
            <param name="other"></param>
            <returns> If both hash are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.Equals(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Compares hashes.
            </summary>
            <param name="other"></param>
            <returns> If both hash are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.TenancyNameEquals(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Compares <see cref="P:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.TenancyName"/> with <paramref name="other"/>.TenancyName.
            </summary>
            <param name="other"></param>
            <returns> If both TenancyName are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.BranchNoEquals(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Compares <see cref="P:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.BranchNo"/> with <paramref name="other"/>.BranchNo.
            </summary>
            <param name="other"></param>
            <returns> If both BranchNo are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.ToString">
            <summary>
            Returns Tenancy Name and Branch No with '_' seperator 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.ToString(System.String)">
            <summary>
            <para>Supported formats : G , H </para>
            <para>G returns tenancyName and branchNo with '_' seperator</para>
            <para>H returns tenancyName and branchNo and hash with '_' seperator</para>
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.Parse(System.String)">
            <summary>
            Parses <paramref name="str"/> to <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/>.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.TryParse(System.String)">
            <summary>
            Converts the string representation of a <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/> to its string equivalent.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_Implicit(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)~System.String">
            <summary>
            Provides implicit casting.
            </summary>
            <param name="tenantId"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_Explicit(System.String)~Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId">
            <summary>
            Provides explicit casting.
            </summary>
            <param name="tenantId"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_Equality(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId,Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/> objects are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_Inequality(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId,Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/> objects are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_LessThan(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId,Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are smaller than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_GreaterThan(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId,Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are bigger than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_LessThanOrEqual(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId,Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are smaller or equal than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_GreaterThanOrEqual(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId,Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are bigger or equal than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_Increment(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Increases <paramref name="tenantId"/>.BranchNo.
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId.op_Decrement(Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId)">
            <summary>
            Decreases <paramref name="tenantId"/>.BranchNo.
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantIdStringConverter">
            <summary>
            Converts <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/> to <see cref="T:System.String"/> or <see cref="T:System.String"/> to <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantIdStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
            Creates a new <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantIdStringConverter"/> instance.
            </summary>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantIdTypeConverter">
            <summary>
            Provides a type converter to convert string objects to and from <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines <paramref name="sourceType"/> can convert from string.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts <paramref name="value"/>(<see cref="T:System.String"/>) to <see cref="T:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantId"/>.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantIdTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines <paramref name="destinationType"/> can convert to string.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.EntityBase.TenantIdTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Extensions.ApplicationBuilderExtensions">
            <summary>
            Provides registration of custom tenant middlewares.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Extensions.ApplicationBuilderExtensions.UseMultiTenancy``2(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use the Tenant Middleware to process the request
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Extensions.ApplicationBuilderExtensions.UseMultiTenantContainer``2(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use the Tenant Container for tenant based lifetime management.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Extensions.ApplicationBuilderExtensions.UseMultiTenantAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use the Tenant Auth to process the authentication handlers
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Extensions.ContainerBuilderExtensions">
            <summary>
            Provides registration of tenant options.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Extensions.ContainerBuilderExtensions.RegisterTenantOptions``3(Autofac.ContainerBuilder,System.Action{``0,``1})">
            <summary>
            Registers tenant specific options.
            </summary>
            <typeparam name="TOptions">Type of options we are apply configuration to</typeparam>
            <typeparam name="TTenant">Type of options we are apply configuration to</typeparam>
            <typeparam name="TKey">Type of options we are apply configuration to</typeparam>
            <param name="builder"></param>
            <param name="tenantConfig">Action to configure options for a tenant</param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Extensions.HttpContextExtensions">
            <summary>
            Extensions to HttpContext to make multi-tenancy easier to use
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Extensions.HttpContextExtensions.GetTenant``2(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Returns the current tenant
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Extensions.ServiceCollectionExtensions">
            <summary>
            Provides registration of custom tenant services.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Extensions.ServiceCollectionExtensions.AddMultiTenancy``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add the services (application specific tenant class)
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2">
            <summary>
             Creates, wires dependencies and manages lifetime for a set of components. 
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="E:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.ChildLifetimeScopeBeginning">
            <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
        </member>
        <member name="E:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.CurrentScopeEnding">
            <summary>
            Fired when this scope is ending.
            </summary>
        </member>
        <member name="E:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.ResolveOperationBeginning">
            <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.ApplicationContainer">
            <summary>
            Gets the base application container.
            </summary>
            <value>
            An <see cref="T:Autofac.IContainer"/> on which all tenant lifetime
            scopes will be based.
            </value>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.DiagnosticSource">
            <summary>
            Gets the <see cref="T:System.Diagnostics.DiagnosticListener"/> to which trace events should be written.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.Disposer">
            <summary>
            Gets the disposer associated with this <see cref="T:Autofac.ILifetimeScope"/>. Component instances can be associated with it manually if required.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.Tag">
            <summary>
            Gets the tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.ComponentRegistry">
            <summary>
            Gets the associated services with the components that provide them.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.#ctor(Autofac.IContainer,System.Action{`0,Autofac.ContainerBuilder})">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2"/>
            </summary>
            <param name="applicationContainer"></param>
            <param name="containerConfiguration"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.GetCurrentTenant">
            <summary>
            Get the current tenant from the application container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.GetCurrentTenantScope">
            <summary>
            Get the scope of the current tenant.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.GetTenantScope(System.String)">
            <summary>
            Get (configure on missing).
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.Dispose">
            <summary>
            Disposes application contaner.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.BeginLifetimeScope">
            <summary>
             Begin a new nested scope. Component instances created via the new scope will be disposed along with it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.BeginLifetimeScope(System.Object)">
            <summary>
            Begin a new nested scope. Component instances created via the new scope will be disposed along with it.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it. Component instances created via the new scope will be disposed along with it.
            </summary>
            <param name="configurationAction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it. Component instances created via the new scope will be disposed along with it.
            </summary>
            <param name="tag"></param>
            <param name="configurationAction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.ResolveComponent(Autofac.ResolveRequest)">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer`2.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantServiceProviderFactory`2">
            <summary>
            Registration for custom service provider.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantServiceProviderFactory`2._tenantServicesConfiguration">
            <summary>
            Gets or sets tenant services configuration.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantServiceProviderFactory`2.#ctor(System.Action{`0,Autofac.ContainerBuilder})">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantServiceProviderFactory`2"/>
            </summary>
            <param name="tenantServicesConfiguration"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantServiceProviderFactory`2.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Create a builder populated with global services.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantServiceProviderFactory`2.CreateServiceProvider(Autofac.ContainerBuilder)">
            <summary>
            Create our serivce provider.
            </summary>
            <param name="containerBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Middleware.MultitenantContainerMiddleware`2">
            <summary>
            Sets the lifetime to current tenant scope.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Middleware.MultitenantContainerMiddleware`2.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Middleware.MultitenantContainerMiddleware`2"/>
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Middleware.MultitenantContainerMiddleware`2.Invoke(Microsoft.AspNetCore.Http.HttpContext,System.Func{Milvasoft.Helpers.MultiTenancy.LifetimeManagement.MultiTenantContainer{`0,`1}})">
            <summary>
            Invokes the method or constructor reflected by this MethodInfo instance.
            </summary>
            <param name="context"></param>
            <param name="multiTenantContainerAccessor"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Middleware.TenantAuthMiddleware">
            <summary>
            AuthenticationMiddleware.cs from framework with injection point moved
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Middleware.TenantAuthMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Middleware.TenantAuthMiddleware"/>
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Middleware.TenantAuthMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)">
            <summary>
            Invokes the method or constructor reflected by this MethodInfo instance.
            </summary>
            <param name="context"></param>
            <param name="Schemes"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Middleware.TenantMiddleware`2">
            <summary>
            If request items not contains Tenant object. Sets the tenant object into items.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Middleware.TenantMiddleware`2.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Middleware.TenantMiddleware`2"/>
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Middleware.TenantMiddleware`2.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the method or constructor reflected by this MethodInfo instance.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Options.TenantOptions`1">
            <summary>
            Makes IOptions tenant aware.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptions`1.#ctor(Microsoft.Extensions.Options.IOptionsFactory{`0},Microsoft.Extensions.Options.IOptionsMonitorCache{`0})">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Options.TenantOptions`1"/>
            </summary>
            <param name="factory"></param>
            <param name="cache"></param>
        </member>
        <member name="P:Milvasoft.Helpers.MultiTenancy.Options.TenantOptions`1.Value">
            <summary>
            Options Value.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptions`1.Get(System.String)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>      
            if the key does not already exist. Returns the new value, or the existing value
            if the key exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCache`3">
            <summary>
            Tenant aware options cache
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCache`3.#ctor(Milvasoft.Helpers.MultiTenancy.Accessor.ITenantAccessor{`1,`2})">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCache`3"/>
            </summary>
            <param name="tenantAccessor"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCache`3.Clear">
            <summary>
            Clears tenant options cache.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCache`3.GetOrAdd(System.String,System.Func{`0})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>      
            if the key does not already exist. Returns the new value, or the existing value
            if the key exists.
            </summary>
            <param name="name"></param>
            <param name="createOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCache`3.TryAdd(System.String,`0)">
            <summary>
            Tries to adds a new option to the cache, will return false if the name already exists.
            </summary>
            <param name="name"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCache`3.TryRemove(System.String)">
            <summary>
            Try to remove an options instance.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCacheDictionary`2">
            <summary>
            Dictionary of tenant specific options caches.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCacheDictionary`2._tenantSpecificOptionCaches">
            <summary>
            Caches stored in memory.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsCacheDictionary`2.Get(`1)">
            <summary>
            Gets options for specific tenant (create if not exists).
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsFactory`3">
            <summary>
            Create a new options instance with configuration applied
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsFactory`3.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IPostConfigureOptions{`0}},System.Action{`0,`1},Milvasoft.Helpers.MultiTenancy.Accessor.ITenantAccessor{`1,`2})">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsFactory`3"/>
            </summary>
            <param name="setups"></param>
            <param name="postConfigures"></param>
            <param name="tenantConfig"></param>
            <param name="tenantAccessor"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Options.TenantOptionsFactory`3.Create(System.String)">
            <summary>
            Creates a new options instance.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HeaderResolutionStrategy">
            <summary>
            Resolve the header to a tenant identifier
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HeaderResolutionStrategy.HeaderKey">
            <summary>
            Header key.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HeaderResolutionStrategy.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HostResolutionStrategy"/>
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HeaderResolutionStrategy.GetTenantIdentifierAsync">
            <summary>
            Get the tenant identifier from header.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HostResolutionStrategy">
            <summary>
            Resolve the host to a tenant identifier
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HostResolutionStrategy.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HostResolutionStrategy"/>
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.HostResolutionStrategy.GetTenantIdentifierAsync">
            <summary>
            Get the tenant identifier from host.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.ITenantResolutionStrategy`1">
            <summary>
            Abstraction for tenant resolution strategy.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.ITenantResolutionStrategy`1.GetTenantIdentifierAsync">
            <summary>
            Get the tenant identifier
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Service.ITenantService`2">
            <summary>
            Tenant access service.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Service.ITenantService`2.GetTenantAsync">
            <summary>
            Gets the current tenant.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Service.TenantService`2">
            <summary>
            Tenant access service.
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Service.TenantService`2.#ctor(Milvasoft.Helpers.MultiTenancy.ResolutionStrategy.ITenantResolutionStrategy{`1},Milvasoft.Helpers.MultiTenancy.Store.ITenantStore{`0,`1})">
            <summary>
            Creates new instances of <see cref="T:Milvasoft.Helpers.MultiTenancy.Service.TenantService`2"/>
            </summary>
            <param name="tenantResolutionStrategy"></param>
            <param name="tenantStore"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Service.TenantService`2.GetTenantAsync">
            <summary>
            Gets the current tenant.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Store.CachedTenantStore`2">
            <summary>
            Cached tenant store. Sample store for <see cref="T:Milvasoft.Helpers.MultiTenancy.Store.ITenantStore`2"/>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Store.CachedTenantStore`2.#ctor(Milvasoft.Helpers.Caching.IRedisCacheService)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Store.CachedTenantStore`2"/>
            </summary>
            <param name="redisCacheService"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Store.CachedTenantStore`2.#ctor(Milvasoft.Helpers.Caching.IRedisCacheService,System.String)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Helpers.MultiTenancy.Store.CachedTenantStore`2"/>
            </summary>
            <param name="redisCacheService"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Store.CachedTenantStore`2.GetTenantAsync(`1)">
            <summary>
            Returns a tenant according to <paramref name="identifier"/>.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Store.CachedTenantStore`2.SetTenantAsync(`1,`0)">
            <summary>
            Sets a tenant with a given identifier.
            </summary>
            <param name="identifier"></param>
            <param name="tenant"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Store.ITenantStore`2">
            <summary>
            Abstraction for tenant storage. 
            </summary>
            <typeparam name="TTenant"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.Helpers.MultiTenancy.Store.ITenantStore`2.GetTenantAsync(`1)">
            <summary>
            Gets tenant according to <paramref name="identifier"/>.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.MultiTenancy.Utils.TenancyConstants">
            <summary>
            Tenancy contants.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.MultiTenancy.Utils.TenancyConstants.HttpContextTenantKey">
            <summary>
            Header tenant key.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.NetworkUtil">
            <summary>
            Provides access network statistics.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.GetIPAddressesAsync">
            <summary>
            Gets all the IP addresses of the server machine hosting the application.
            </summary>
            <returns>a string array containing all the IP addresses of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.GetIPAddressAsync(System.Int32)">
            <summary>
            Gets the IP address of the server machine hosting the application.
            </summary>
            <param name="num">if set, it will return the Nth available IP address: if not set, the first available one will be returned.</param>
            <returns>the (first available or chosen) IP address of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.HasIPAddressAsync(System.Net.IPAddress)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.HasIPAddressAsync(System.String)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.GetIPAddresses">
            <summary>
            Gets all the IP addresses of the server machine hosting the application.
            </summary>
            <returns>a string array containing all the IP addresses of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.GetIPAddress(System.Int32)">
            <summary>
            Gets the IP address of the server machine hosting the application.
            </summary>
            <param name="num">if set, it will return the Nth available IP address: if not set, the first available one will be returned.</param>
            <returns>the (first available or chosen) IP address of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.HasIPAddress(System.Net.IPAddress)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Helpers.NetworkUtil.HasIPAddress(System.String)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="T:Milvasoft.Helpers.RegexMatcher">
            <summary>
            Helper class for match input string and regex.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.RegexMatcher.MatchRegex(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regex"/>.
            </summary>
            <param name="regex"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.RegexMatcher.MatchRegex(System.String,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regexString"/>.
            </summary>
            <param name="input"></param>
            <param name="regexString"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.RegexMatcher.GetMatchResult(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regex"/>.
            </summary>
            <param name="regex"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.RegexMatcher.GetMatchResult(System.String,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regexString"/>.
            </summary>
            <param name="input"></param>
            <param name="regexString"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Request">
            <summary>
            Helper class for request processes.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="content"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Object,System.Version,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="content"></param>
            <param name="version"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestUrl(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <b>Makes reques url from requested params.</b> <para> For more detailed information of URL Sections, please refer to the remarks section where the method is described.</para>
            </summary>
            
            Remarks:
            
              https://www.milvasoft.com:444/api/v1/products/product?id=1
              _____   ________________  ___ _______________________  ____  
                |             |          |              |              |   
              protocol        |          |           pathName        query 
                          hostName       |                                 
                                        port                               
            
            
            
             !!! Hostname can be IP Address. (e.g. 127.20.10.1) 
            
            <param name="protocol"></param>
            <param name="hostName"></param>
            <param name="port"></param>
            <param name="pathName"></param>
            <param name="query"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.CreateRequestUrlFromAddress(System.String,System.String,System.String,System.String)">
            <summary>
            <b>Makes reques url from requested params.</b>  <para> For more detailed information of URL Sections, please refer to the remarks section where the method is described. </para>
            </summary>
            
            Remarks:
            
              https://www.milvasoft.com:444/api/v1/products/product?id=1
              _________________________  ___ _______________________  ____  
                           |              |              |              |   
                        address           |           pathName        query 
                                          |                                 
                                         port                               
            
            
            
             !!! Hostname can be IP Address. (e.g. 127.20.10.1) 
            
            <param name="address"></param>
            <param name="pathName"></param>
            <param name="query"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.SendRequestDeserializeSingle``1(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends request by <paramref name="httpRequestMessage"/>.
            <para><b> If you want to use the "ErrorCodes" property, change the return value to (ExceptionResponse) where necessary.</b></para> 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpRequestMessage"></param>
            <param name="httpClient"></param>
            <returns> ObjectResponse </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.SendRequestDeserializeMultiple``1(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends request by <paramref name="httpRequestMessage"/>. Gets response as => <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpRequestMessage"></param>
            <param name="httpClient"></param>
            <returns> ObjectResponse </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.SendRequestDeserialize``1(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends request by <paramref name="httpRequestMessage"/>.
            </summary>
            <param name="httpRequestMessage"></param>
            <param name="httpClient"></param>
            <typeparam name="TReturn"></typeparam>
            <returns> <typeparamref name="TReturn"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.SendRequestDeserializeSingle``2(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends request by <paramref name="httpRequestMessage"/>. Gets response as => <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>
            <para><b> If you want to use the "ErrorCodes" property, change the return value to (ExceptionResponse) where necessary.</b></para> 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="httpRequestMessage"></param>
            <param name="httpClient"></param>
            <returns> ObjectResponse </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.SendRequestDeserializeMultiple``2(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage)">
            <summary>
            Sends request by <paramref name="httpRequestMessage"/>. Gets response as => <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>
            </summary> 
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="httpRequestMessage"></param>
            <param name="httpClient"></param>
            <returns> ObjectResponse </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.PropertyExists(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Checks <paramref name="propertyName"/> exists in <paramref name="jObject"/>.
            </summary>
            <param name="propertyName"></param>
            <param name="jObject"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Request.IsSuccessStatusCode(Milvasoft.Helpers.Models.Response.BaseResponse)">
            <summary>
            Determines <paramref name="baseResponse"/>'s status code success or fail.
            </summary>
            <param name="baseResponse"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Response">
            <summary>
            <para>Helper class to generate the same type of response.</para>
            <para>All methods return <see cref="T:Milvasoft.Helpers.Models.Response.BaseResponse"/> type in ActionResult. Base response can be <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1" /> or <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/></para>
            <para>All methods return HTTP status code 200 OK.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetPaginationResponse``1(Milvasoft.Helpers.Models.PaginationDTO{``0},System.String,System.String)">
            <summary>
            <para> Return <paramref name="paginationDTO"/> in <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="paginationDTO"/>.DTOList isn't null or empty, sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <paramref name="successMessage"/>. </para>
            <para> Otherwise if <paramref name="errorMessage"/> is null sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <b><see cref="F:Milvasoft.Helpers.Utils.LocalizerKeys.DefaultErrorMessage"/></b>. </para>
            <para> Otherwise sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <paramref name="errorMessage"/>. </para>
            <para> Also in this conditions sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.StatusCode to <see cref="F:Milvasoft.Helpers.Utils.MilvaStatusCodes.Status204NoContent"/>
                    and <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Success to true. Reason to be considered the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Success true is request was successful.  </para>
            </summary>
            
            <param name="paginationDTO"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponse``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            <para> Return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/>. </para>
            <para> If <paramref name="contentList"/> isn't null or empty, sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <paramref name="successMessage"/>. </para>
            <para> Otherwise if <paramref name="errorMessage"/> is null sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <b><see cref="F:Milvasoft.Helpers.Utils.LocalizerKeys.DefaultErrorMessage"/></b>. </para>
            <para> Otherwise sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <paramref name="errorMessage"/>. </para>
            <para> Also in this conditions sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.StatusCode to <see cref="F:Milvasoft.Helpers.Utils.MilvaStatusCodes.Status204NoContent"/>
                    and <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Success to true. Reason to be considered the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Success true is request was successful.  </para>
            </summary>
            
            <param name="contentList"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponse``1(``0,System.String,System.String)">
            <summary>
            <para> Return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/>. </para>
            <para> If <paramref name="content"/> isn't null, sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <paramref name="successMessage"/>. </para>
            <para> Otherwise if <paramref name="errorMessage"/> is null sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <b><see cref="F:Milvasoft.Helpers.Utils.LocalizerKeys.DefaultErrorMessage"/></b>. </para>
            <para> Otherwise sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message to <paramref name="errorMessage"/>. </para>
            <para> Also in this conditions sets the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.StatusCode to <see cref="F:Milvasoft.Helpers.Utils.MilvaStatusCodes.Status204NoContent"/>
                    and <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Success to true. Reason to be considered the <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Success true is request was successful.  </para>
            </summary>
            
            <param name="content"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``2(System.Runtime.CompilerServices.ConfiguredTaskAwaitable,System.Collections.Generic.IEnumerable{``1},System.String,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="idList"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``2(System.Threading.Tasks.Task,System.Collections.Generic.IEnumerable{``1},System.String,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="idList"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``2(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.String,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="idList"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.String,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="idList"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{``0},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Object},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Guid},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.Int32},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{System.SByte},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Threading.Tasks.Task,System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Threading.Tasks.Task{System.Object},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns>  <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Threading.Tasks.Task{System.Guid},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Threading.Tasks.Task{System.Int32},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetObjectResponseAsync``1(System.Threading.Tasks.Task{System.SByte},System.String)">
            <summary>
            <para> Run the <paramref name="asyncTask"/> then return <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>. </para>
            <para> If <paramref name="asyncTask"/> is success sets the <paramref name="successMessage"/> to <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/>.Message.
                   Otherwise you should throw exception and cut the request pipeline in <paramref name="asyncTask"/>. </para>
            </summary>
            
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <returns> <see cref="T:Milvasoft.Helpers.Models.Response.ObjectResponse`1"/> in 200 OK <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> </returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetErrorMessage(Microsoft.Extensions.Localization.IStringLocalizer,System.String,Milvasoft.Helpers.Enums.CrudOperation)">
            <summary>
            Gets error messages according to <paramref name="operation"/>.
            <paramref name="keyContent"/> will combine with <see cref="F:Milvasoft.Helpers.Utils.LocalizerKeys.LocalizedEntityName"/> except <paramref name="operation"/> is <see cref="F:Milvasoft.Helpers.Enums.CrudOperation.Specific"/>. 
            Return message determined by <paramref name="operation"/>.
            For messages see <see cref="T:Milvasoft.Helpers.Utils.LocalizerKeys"/>.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.Response.GetSuccessMessage(Microsoft.Extensions.Localization.IStringLocalizer,System.String,Milvasoft.Helpers.Enums.CrudOperation,System.Nullable{System.Int32})">
            <summary>
            Gets success messages according to <paramref name="operation"/>.
            <paramref name="keyContent"/> will combine with <see cref="F:Milvasoft.Helpers.Utils.LocalizerKeys.LocalizedEntityName"/> except <paramref name="operation"/> is <see cref="F:Milvasoft.Helpers.Enums.CrudOperation.Specific"/>. 
            Return message determined by <paramref name="operation"/>.
            For messages see <see cref="T:Milvasoft.Helpers.Utils.LocalizerKeys"/>.
            </summary>
            <param name="localizer"></param>
            <param name="keyContent"></param>
            <param name="recordCount"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.Utils.LocalizerKeys">
            <summary>
            Localizer message keys
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Utils.MilvaStatusCodes">
            <summary>
            Http status codes.
            </summary>
        </member>
        <member name="T:Milvasoft.Helpers.Utils.MimeTypeNames">
            <summary>
            Common mime types. 
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXJavascript">
            <summary>Used to denote the encoding necessary for files containing JavaScript source code. The alternative MIME type for this file type is text/javascript.</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioL24">
            <summary>24bit Linear PCM audio at 8-48kHz, 1-N channels; Defined in RFC 3190</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXShockwaveFlash">
            <summary>Adobe Flash files for example with the extension .swf</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationOctetStream">
            <summary>Arbitrary binary data.[5] Generally speaking this type identifies files that are not associated with a specific application. Contrary to past assumptions by software packages such as Apache this is not a type that should be applied to unknown files. In such a case, a server or application should not indicate a content type, as it may be incorrect, but rather, should omit the type in order to allow the recipient to guess the type.[6]</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationAtomXml">
            <summary>Atom feeds</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextCss">
            <summary>Cascading Style Sheets; Defined in RFC 2318</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextCmd">
            <summary>commands; subtype resident in Gecko browsers like Firefox 3.5</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextCsv">
            <summary>Comma-separated values; Defined in RFC 4180</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXDeb">
            <summary>deb (file format), a software package format used by the Debian project</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MultipartEncrypted">
            <summary>Defined in RFC 1847</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MultipartSigned">
            <summary>Defined in RFC 1847</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MessageHttp">
            <summary>Defined in RFC 2616</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ModelExample">
            <summary>Defined in RFC 4735</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXDvi">
            <summary>device-independent document in DVI format</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXmlDtd">
            <summary>DTD files; Defined by RFC 3023</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationJavascript">
            <summary>
            ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/ecmascript but with looser processing rules) 
            It is not accepted in IE 8 or earlier - text/javascript is accepted but it is defined as obsolete in RFC 4329.
            The "type" attribute of the script tag in HTML5 is optional and in practice omitting the media type of JavaScript programs is the most interoperable solution since 
            all browsers have always assumed the correct default even before HTML5.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationEcmascript">
            <summary>ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/javascript but with stricter processing rules)</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationEdifact">
            <summary>EDI EDIFACT data; Defined in RFC 1767</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationEdiX12">
            <summary>EDI X12 data; Defined in RFC 1767</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MessagePartial">
            <summary>Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MessageRfc822">
            <summary>Email; EML files, MIME files, MHT files, MHTML files; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextXml">
            <summary>Extensible Markup Language; Defined in RFC 3023</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.VideoXFlv">
            <summary>Flash video (FLV files)</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ImageGif">
            <summary>GIF image; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextXGwtRpc">
            <summary>GoogleWebToolkit data</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXGzip">
            <summary>Gzip</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextHtml">
            <summary>HTML; Defined in RFC 2854</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ImageVndMicrosoftIcon">
            <summary>ICO image; Registered[9]</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ModelIges">
            <summary>IGS files, IGES files; Defined in RFC 2077</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MessageImdnXml">
            <summary>IMDN Instant Message Disposition Notification; Defined in RFC 5438</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationJson">
            <summary>JavaScript Object Notation JSON; Defined in RFC 4627</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationJsonPatch">
            <summary>JavaScript Object Notation (JSON) Patch; Defined in RFC 6902</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextJavascript">
            <summary>JavaScript - Defined in and obsoleted by RFC 4329 in order to discourage its usage in favor of application/javascript. 
            However,text/javascript is allowed in HTML 4 and 5 and, unlike application/javascript, has cross-browser support. 
            The "type" attribute of the script tag in HTML5 is optional and there is no need to use it at all since all browsers have always assumed the correct
            default (even in HTML 4 where it was required by the specification).</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ImagePjpeg">
            <summary>JPEG JFIF image; Associated with Internet Explorer; Listed in ms775147(v=vs.85) - Progressive JPEG, initiated before global browser support for progressive 
            JPEGs (Microsoft and Firefox).</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ImageJpeg">
            <summary>JPEG JFIF image; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextXJqueryTmpl">
            <summary>jQuery template data</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndGoogleEarthKmlXml">
            <summary>KML files (e.g. for Google Earth)</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXLatex">
            <summary>LaTeX files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.VideoXMatroska">
            <summary>Matroska open media format</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet">
            <summary>Microsoft Excel 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndMsExcel">
            <summary>Microsoft Excel files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation">
            <summary>Microsoft Powerpoint 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndMsPowerpoint">
            <summary>Microsoft Powerpoint files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument">
            <summary>Microsoft Word 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationMsword">
            <summary>Microsoft Word files[15]</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MultipartAlternative">
            <summary>MIME Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MultipartMixed">
            <summary>MIME Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MultipartRelated">
            <summary>MIME Email; Defined in RFC 2387 and used by MHTML (HTML mail)</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.MultipartFormData">
            <summary>MIME Webform; Defined in RFC 2388</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndMozillaXulXml">
            <summary>Mozilla XUL files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioMpeg">
            <summary>MP3 or other MPEG audio; Defined in RFC 3003</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioMp4">
            <summary>MP4 audio</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.VideoMp4">
            <summary>MP4 video; Defined in RFC 4337</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.VideoMpeg">
            <summary>MPEG-1 video with multiplexed audio; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ModelMesh">
            <summary>MSH files, MESH files; Defined in RFC 2077, SILO files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioBasic">
            <summary>mulaw audio at 8 kHz, 1 channel; Defined in RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.VideoOgg">
            <summary>Ogg Theora or other video (with audio); Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioOgg">
            <summary>Ogg Vorbis, Speex, Flac and other audio; Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationOgg">
            <summary>Ogg, a multimedia bitstream container format; Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXopXml">
            <summary>OP</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndOasisOpendocumentGraphics">
            <summary>OpenDocument Graphics; Registered[14]</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndOasisOpendocumentPresentation">
            <summary>OpenDocument Presentation; Registered[13]</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndOasisOpendocumentSpreadsheet">
            <summary>OpenDocument Spreadsheet; Registered[12]</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationVndOasisOpendocumentText">
            <summary>OpenDocument Text; Registered[11]</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXPkcs12">
            <summary>p12 files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXPkcs7Certificates">
            <summary>p7b and spc files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXPkcs7Mime">
            <summary>p7c files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXPkcs7Certreqresp">
            <summary>p7r files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXPkcs7Signature">
            <summary>p7s files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationPdf">
            <summary>Portable Document Format, PDF has been in use for document exchange on the Internet since 1993; Defined in RFC 3778</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ImagePng">
            <summary>Portable Network Graphics; Registered,[8] Defined in RFC 2083</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationPostscript">
            <summary>PostScript; Defined in RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.VideoQuicktime">
            <summary>QuickTime video; Registered[10]</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXRarCompressed">
            <summary>RAR archive files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioVndRnRealaudio">
            <summary>RealAudio; Documented in RealPlayer Customer Support Answer 2559</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationRdfXml">
            <summary>Resource Description Framework; Defined by RFC 3870</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationRssXml">
            <summary>RSS feeds</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationSoapXml">
            <summary>SOAP; Defined by RFC 3902</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXStuffit">
            <summary>StuffIt archive files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ImageSvgXml">
            <summary>SVG vector image; Defined in SVG Tiny 1.2 Specification Appendix M</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ImageTiff">
            <summary>Tag Image File Format (only for Baseline TIFF); Defined in RFC 3302</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXTar">
            <summary>Tarball files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextPlain">
            <summary>Textual data; Defined in RFC 2046 and RFC 3676</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXFontTtf">
            <summary>TrueType Font No registered MIME type, but this is the most commonly used</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.TextVcard">
            <summary>vCard (contact information); Defined in RFC 6350</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioVorbis">
            <summary>Vorbis encoded audio; Defined in RFC 5215</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioVndWave">
            <summary>WAV audio; Defined in RFC 2361</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationFontWoff">
            <summary>Web Open Font Format; (candidate recommendation; use application/x-font-woff until standard is official)</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.VideoWebm">
            <summary>WebM Matroska-based open media format</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioWebm">
            <summary>WebM open media format</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioXMsWax">
            <summary>Windows Media Audio Redirector; Documented in Microsoft help page</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.AudioXMsWma">
            <summary>Windows Media Audio; Documented in Microsoft KB 288102</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.VideoXMsWmv">
            <summary>Windows Media Video; Documented in Microsoft KB 288102</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ModelVrml">
            <summary>WRL files, VRML files; Defined in RFC 2077</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ModelX3DXml">
            <summary>X3D ISO standard for representing 3D computer graphics, X3D XML files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ModelX3DBinary">
            <summary>X3D ISO standard for representing 3D computer graphics, X3DB binary files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ModelX3DVrml">
            <summary>X3D ISO standard for representing 3D computer graphics, X3DV VRML files</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationXhtmlXml">
            <summary>XHTML; Defined by RFC 3236</summary>
        </member>
        <member name="F:Milvasoft.Helpers.Utils.MimeTypeNames.ApplicationZip">
            <summary>ZIP archive files; Registered[7]</summary>
        </member>
    </members>
</doc>
