<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.DataAccess.EfCore</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3">
            <summary>
            Base repository for concrete repositories. All repositories must be have this methods.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSoftDeletedEntitiesInNextProcess(System.Boolean)">
            <summary>
            Determines whether soft deleted entities in the database are fetched from the database.
            <para><b>Default is false.</b></para>
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.ResetSoftDeleteState(System.Boolean)">
            <summary>
            Determines whether the default value of the variable that determines the status of deleted data in the database is assigned to the default value after database operation.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns first entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetFirstOrDefaultAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns first entity or default value which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns single entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSingleOrDefaultAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns single entity or default value which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAllAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAllAsync``1(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSomeAsync(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSomeAsync(System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range. 
                  If the condition is requested, it also provides that condition.
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                   If the condition is requested, it also provides that condition.
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Creates and ordered asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Creates and ordered asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Gets entities with includes as ordered with <paramref name="orderByPropertyName"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetRequiredByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns one entity by entity Id from database asynchronously.
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetByIdAsync(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetRequiredByIdAsync(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetGroupedAndCountAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Groups entities with <paramref name="groupByPropertyName"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="groupByPropertyName"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetGroupedAndCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Groups entities with <paramref name="keySelector"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="keySelector"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGroupedAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   var dbSet = _contextRepository.GetDbSet{Poco}();  <see cref="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.GetDbSet``1"></see> </para>
            
            <para>   var groupByClause = from poco in dbSet                                                                             </para>
                                         group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                       select new PocoDTO                                                                             </para>
            <para>                       {                                                                                              </para>
            <para>                            Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                            PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                            PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                       };                                                                                             </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClause).ConfigureAwait(false);                  </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="groupedClause"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGroupedAsync``1(System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClauseFunc).ConfigureAwait(false);                                       </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGroupedAndPaginatedAsync``1(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                               </para>
            <para>                                                              {                                                                                </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                   </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                       </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                    </para>
            <para>                                                              };                                                                               </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, groupByClauseFunc).ConfigureAwait(false);                                </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGroupedAndPaginatedAndOrderedAsync``1(System.Int32,System.Int32,System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                                    </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                                             </para>
            <para>                                                              {                                                                                              </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                                                              };                                                                                             </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, "PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                           </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGroupedAndOrderedAsync``1(System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}("PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                    </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get max value of entities.
            </summary>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMaxAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get max value of entities. With includes.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMaxOfPropertyAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxPropertyName"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMaxOfPropertyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSumOfPropertyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets sums of value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="sumProperty"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get count of entities.
            </summary>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.ExistsAsync(`1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.ExistsAsync(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.AddAsync(`0)">
            <summary>
             Adds single entity to database asynchronously. 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database asynchronously. 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.UpdateAsync(`0)">
            <summary>
             Updates specified entity in database asynchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entity"></param>
            <param name="projectionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entities"></param>
            <param name="projectionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Updates multiple entities in database asynchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.DeleteAsync(`0)">
            <summary>
             Deletes single entity from database asynchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Deletes multiple entity from database asynchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.ReplaceOldsWithNewsAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.ReplaceOldsWithNewsInSeperateDatabaseProcessAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.RemoveAllAsync">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.AddBulkAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.UpdateBulkAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.DeleteBulkAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.AddBulkWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.UpdateBulkWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.DeleteBulkWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetFirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns first entity or default value which IsDeleted condition is true from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetFirstOrDefault(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns first entity or default value which IsDeleted condition is true with includes from database hronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns single entity or default value which IsDeleted condition is true from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSingleOrDefault(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns single entity or default value which IsDeleted condition is true with includes from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAll(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAll``1(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true with specified includes from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSome(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSome(System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginated(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Creates hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range. 
                  If the condition is requested, it also provides that condition.
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginated(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Creates hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                   If the condition is requested, it also provides that condition.
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAndOrdered(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Creates and ordered hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAndOrdered(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Creates and ordered hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAndOrdered(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Creates hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsPaginatedAndOrdered(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Creates hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsOrdered(System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsOrdered(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Gets entities with includes as ordered with <paramref name="orderByPropertyName"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsOrdered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsOrdered(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetById(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Returns one entity by entity Id from database hronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetRequiredById(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns one entity by entity Id from database hronously.
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetById(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database hronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetRequiredById(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database hronously. If the condition is requested, it also provides that condition. 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetGroupedAndCount(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Groups entities with <paramref name="groupByPropertyName"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="groupByPropertyName"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetGroupedAndCount(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Groups entities with <paramref name="keySelector"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="keySelector"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGrouped``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   var dbSet = _contextRepository.GetDbSet{Poco}();  <see cref="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.GetDbSet``1"></see> </para>
            
            <para>   var groupByClause = from poco in dbSet                                                                             </para>
                                         group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                       select new PocoDTO                                                                             </para>
            <para>                       {                                                                                              </para>
            <para>                            Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                            PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                            PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                       };                                                                                             </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}(groupByClause);                  </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="groupedClause"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGrouped``1(System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}(groupByClauseFunc);                                       </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGroupedAndPaginated``1(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                               </para>
            <para>                                                              {                                                                                </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                   </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                       </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                    </para>
            <para>                                                              };                                                                               </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}(1, 10, groupByClauseFunc);                                </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGroupedAndPaginatedAndOrdered``1(System.Int32,System.Int32,System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                                    </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                                             </para>
            <para>                                                              {                                                                                              </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                                                              };                                                                                             </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}(1, 10, "PocoCode", false, groupByClauseFunc);                           </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetAsGroupedAndOrdered``1(System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}("PocoCode", false, groupByClauseFunc);                    </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMax(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Get max value of entities.
            </summary>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMax(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Get max value of entities. With includes.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMaxOfProperty(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxPropertyName"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetMaxOfProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetSumOfProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Gets sums of value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="sumProperty"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Get count of entities.
            </summary>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Exists(`1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Exists(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Add(`0)">
            <summary>
             Adds single entity to database hronously. 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database hronously. 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Update(`0)">
            <summary>
             Updates specified entity in database hronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entity"></param>
            <param name="projectionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Update(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entities"></param>
            <param name="projectionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Updates multiple entities in database hronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Delete(`0)">
            <summary>
             Deletes single entity from database hronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Deletes multiple entity from database hronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.ReplaceOldsWithNews(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.ReplaceOldsWithNewsInSeperateDatabaseProcess(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.RemoveAll">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.AddBulk(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.UpdateBulk(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.DeleteBulk(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.AddBulkWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.UpdateBulkWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IBaseRepository`3.DeleteBulkWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.IgnoreSoftDeleteForNextProcess">
            <summary>
            Ignores soft delete for next process. Runs correctly, if <typeparamref name="TContext"/> inherit from MilvaDbContext.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ActivateSoftDelete">
            <summary>
            Activate soft delete. Runs correctly, if <typeparamref name="TContext"/> inherit from MilvaDbContext.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ExecuteQueryAsync(System.String)">
            <summary>
            Executes sql query to database asynchronously.(e.g. trigger, event)
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Action,System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Action,System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.InitializeUpdating``2(``0)">
            <summary>
            User update process.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.GetDbSet``1">
            <summary>
            Gets requested DbSet by <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IContextRepository`1.ExistsAsync``2(``1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Abstract.IUnitOfWork">
            <summary>
            Abstraction for unit of work pattern.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Abstract.IUnitOfWork.CommitAsync">
            <summary>
            Asynchronously sends all changes to the data store and commits as a single transaction unless a manual transaction was created using BeginTransaction().
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Attributes.MilvaDefaultValueAttribute">
            <summary>
            Attribute for adding default value in context level.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Attributes.MilvaDefaultValueAttribute.DefaultValue">
            <summary>
            Default value of tagged property.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Attributes.MilvaDefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Specifies this property has a default value upon creation.
            </summary>
            <param name="defaultValue">The default value of the property.</param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Attributes.MilvaEncryptedAttribute">
            <summary>
            Specifies that the value field value should be encrypted.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Attributes.MilvaPrecisionAttribute">
            <summary>
            Attribute for adding precision in context level.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Attributes.MilvaPrecisionAttribute.Precision">
            <summary>
            Precision of tagged property.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Attributes.MilvaPrecisionAttribute.Scale">
            <summary>
            Scale of tagged property.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Attributes.MilvaPrecisionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Specifies this property has a precision upon creation.
            </summary>
            <param name="precision"></param>
            <param name="scale"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1._dbContext">
            <summary>
            DbContext object.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.#ctor(`0)">
            <summary>
            Constructor of ContextRepository for inject context.
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.IgnoreSoftDeleteForNextProcess">
            <summary>
            Ignores soft delete for next process for current <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance. Runs correctly, if <typeparamref name="TContext"/> inherit from MilvaDbContext.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ActivateSoftDelete">
            <summary>
            Activate soft delete for current <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance. Runs correctly, if <typeparamref name="TContext"/> inherit from MilvaDbContext.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ExecuteQueryAsync(System.String)">
            <summary>
            Executes sql query to database asynchronously.(e.g. trigger, event).
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Action,System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Action,System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.InitializeUpdating``2(``0)">
            <summary>
            User update process.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.GetRequiredContents``1">
            <summary>
            Gets requested contents by <typeparamref name="TEntity"/> DbSet.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.GetRequiredContents(System.Type)">
            <summary>
            Gets requested contents by <paramref name="type"/> DbSet.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.GetDbSet``1">
            <summary>
            Gets requested DbSet by <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.ExistsAsync``2(``1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.CreateIsDeletedFalseExpression``1">
            <summary>
            Gets <b>entity => entity.IsDeleted == false</b> expression, if <typeparamref name="TEntity"/> is assignable from <see cref="T:Milvasoft.Core.EntityBases.Concrete.FullAuditableEntity`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable">
            <summary>
            Supports queryable Include/ThenInclude chaining operators. 
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable`1">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable`2">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.IncludeLibrary.Includable`1">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.IncludeLibrary.Includable`2">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.IncludeLibrary.IncludableExtensions">
            <summary>
            Includable extension for Ops!yon API. For reason to use that class: We cannot use default include process which in EntityFramework. Because of mysql and context. 
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.IncludeLibrary.IncludableExtensions.Include``2(Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{``0,``2},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{``0,System.Collections.Generic.IEnumerable{``2}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{``0,System.Collections.Generic.ICollection{``2}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.IncludeLibrary.IncludeMultipleClass">
            <summary>
            Allows to include multiple class.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.IncludeLibrary.IncludeMultipleClass.IncludeMultiple``1(System.Linq.IQueryable{``0},System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{``0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable})">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <example>
            var personnelTable = _personnelTableRepository.GetAllWithIncludes(i => i.Include(p=>p.personnel).Include(p=>p.tableSetting));
            </example>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.IMilvaDbContextBase">
            <summary>
            Interface for base repository.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.IMilvaDbContextBase.SaveChangesBulk(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChanges method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.IMilvaDbContextBase.SaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChangesAsync method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase">
            <summary>
            Handles all database operations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.UseUtcForDateTimes">
            <summary>
            If it is true converts all saved DateTimes to UTC. Default value is false.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.HttpMethod">
            <summary>
            Required for auditing. HttpMethods.IsPost(HttpMethod) || HttpMethods.IsPut(HttpMethod) || HttpMethods.IsDelete(HttpMethod) comparision is done.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.AuditConfiguration">
            <summary>
            Audit configuration.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.IgnoreSoftDelete">
            <summary>
            Soft delete state. Default value is false.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2"/>.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.IgnoreSoftDeleteForNextProcess">
            <summary>
            Ignores soft delete for next process.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.ActivateSoftDelete">
            <summary>
            Activate soft delete.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.SaveChanges">
            <summary>
            Overrided the SaveChanges method for soft deleting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Overrided the SaveChangesAsync method for soft deleting.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.SaveChangesBulk(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChanges method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.SaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChangesAsync method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.GetRequiredContentsDynamicallyAsync(System.Type)">
            <summary>
            Gets requested contents by <paramref name="type"/> DbSet.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Core.CommonHelper.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.GetRequiredContentsAsync``1(System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Gets requested contents by <typeparamref name="TEntity"/> DbSet.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Core.CommonHelper.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.GetMaxValueAsync``1(System.String)">
            <summary>
            Gets the requested <typeparamref name="TEntity"/>'s property's(<paramref name="propName"/>) max value.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Core.CommonHelper.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.SoftDelete(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Soft delete operation.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.AuditDeletion(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Entity auditing for delete. 
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.AuditDate(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String)">
            <summary>
            Entity auditing by date. 
            </summary>
            <param name="entry"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.AuditEntites">
            <summary>
            Provides auditing entities by <see cref="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.AuditConfiguration"/>.
            If deletion process happens then sets the <see cref="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.IgnoreSoftDelete"/> variable to true at the end of process.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase.ConvertDateTimesToUtc">
            <summary>
            Convert date times to UTC Zero if entry state is not <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged"/>.
            </summary>
            <remarks>
            
            This will applied when "useUtcForDateTimes" in constructor property is true.
            This will applied <see cref="T:System.DateTime"/> and nullable <see cref="T:System.DateTime"/>.
            
            </remarks>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2">
            <summary>
            Handles all database operations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.UserName">
            <summary>
            Logged user's username for auditing.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.CurrentUserId">
            <summary>
            It will be set internally.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2"/>.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.SaveChanges">
            <summary>
            Overrided the SaveChanges method for soft deleting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Overrided the SaveChangesAsync method for soft deleting.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.SaveChangesBulk(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChanges method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.SaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChangesAsync method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.SoftDelete(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Soft delete operation.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.AuditDeletion(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Entity auditing for delete. 
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.AuditPerformerUser(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String)">
            <summary>
            Entity auditing by performer user.
            </summary>
            <param name="entry"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2.AuditEntites">
            <summary>
            Provides auditing entities by AuditConfiguration.
            If deletion process happens then sets the IgnoreSoftDelete variable to true at the end of process.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3">
            <summary>
            Handles all database operations. Inherits <see cref="T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`3"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.UseUtcForDateTimes">
            <summary>
            If it is true converts all saved DateTimes to UTC. Default value is false.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.HttpMethod">
            <summary>
            Required for auditing. HttpMethods.IsPost(HttpMethod) || HttpMethods.IsPut(HttpMethod) || HttpMethods.IsDelete(HttpMethod) comparision is done.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.UserName">
            <summary>
            Logged user's username for auditing.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.AuditConfiguration">
            <summary>
            Audit configuration.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.CurrentUserId">
            <summary>
            It will be set internally.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.IgnoreSoftDelete">
            <summary>
            Soft delete state. Default value is false.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3"/>.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.IgnoreSoftDeleteForNextProcess">
            <summary>
            Ignores soft delete for next process.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.ActivateSoftDelete">
            <summary>
            Activate soft delete.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.SaveChanges">
            <summary>
            Overrided the SaveChanges method for soft deleting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Overrided the SaveChangesAsync method for soft deleting.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.SaveChangesBulk(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChanges method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.SaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChangesAsync method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.GetRequiredContentsDynamicallyAsync(System.Type)">
            <summary>
            Gets requested contents by <paramref name="type"/> DbSet.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Core.CommonHelper.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.GetRequiredContentsAsync``1(System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Gets requested contents by <typeparamref name="TEntity"/> DbSet.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Core.CommonHelper.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.GetMaxValueAsync``1(System.String)">
            <summary>
            Gets the requested <typeparamref name="TEntity"/>'s property's(<paramref name="propName"/>) max value.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Core.CommonHelper.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.SoftDelete(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Soft delete operation.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.AuditDeletion(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Entity auditing for delete. 
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.AuditDate(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String)">
            <summary>
            Entity auditing by date. 
            </summary>
            <param name="entry"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.AuditPerformerUser(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String)">
            <summary>
            Entity auditing by performer user.
            </summary>
            <param name="entry"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.AuditEntites">
            <summary>
            Provides auditing entities by <see cref="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.AuditConfiguration"/>.
            If deletion process happens then sets the <see cref="P:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.IgnoreSoftDelete"/> variable to true at the end of process.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3.ConvertDateTimesToUtc">
            <summary>
            Convert date times to UTC Zero if entry state is not <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged"/>.
            </summary>
            <remarks>
            
            This will applied when "useUtcForDateTimes" in constructor property is true.
            This will applied <see cref="T:System.DateTime"/> and nullable <see cref="T:System.DateTime"/>.
            
            </remarks>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContext">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Core.Abstractions.IAuditConfiguration,System.Boolean)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContext`2"></see>.
            </summary>
            <param name="options"></param>
            <param name="httpContextAccessor"></param>
            <param name="auditConfiguration"></param>
            <param name="useUtcForDateTimes"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContext`2">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContext`2.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Core.Abstractions.IAuditConfiguration,System.Boolean)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContext`2"></see>.
            </summary>
            <param name="options"></param>
            <param name="httpContextAccessor"></param>
            <param name="auditConfiguration"></param>
            <param name="useUtcForDateTimes"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContext`2.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContext`3">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContext`3.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Core.Abstractions.IAuditConfiguration,System.Boolean)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContext`3"></see>.
            </summary>
            <param name="options"></param>
            <param name="httpContextAccessor"></param>
            <param name="auditConfiguration"></param>
            <param name="useUtcForDateTimes"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContext`3.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaPooledDbContext`2">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaDbContextBase`2"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaPooledDbContext`2.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaPooledDbContext`2"></see>.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaPooledDbContext`2.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaPooledIdentityDbContext`3">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaIdentityDbContextBase`3"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.Core.Abstractions.IAuditConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TRole"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaPooledIdentityDbContext`3.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Cunstructor of <see cref="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaPooledIdentityDbContext`3"></see>.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaPooledIdentityDbContext`3.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions">
            <summary>
            Extension methods for MilvaDbContexts
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseTenantId(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> converters to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> typed properties.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseUtcDateTime(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Use UTC for datetime types.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseObjectId(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds <see cref="T:MongoDB.Bson.ObjectId"/> converters to <see cref="T:MongoDB.Bson.ObjectId"/> typed properties.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseAnnotationEncryption(Microsoft.EntityFrameworkCore.ModelBuilder,Milvasoft.Cryptography.Abstract.IMilvaCryptographyProvider)">
            <summary>
            Adds value converter(<see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter"/>) to string properties which marked with <see cref="T:Milvasoft.DataAccess.EfCore.Attributes.MilvaEncryptedAttribute"/>.
            </summary>
            <param name="modelBuilder"></param>
            <param name="encryptionProvider"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseEncryption(Microsoft.EntityFrameworkCore.ModelBuilder,Milvasoft.Cryptography.Abstract.IMilvaCryptographyProvider)">
            <summary>
            Adds value converter(<see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter"/>) to all strings properties.
            </summary>
            <param name="modelBuilder"></param>
            <param name="encryptionProvider"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseTurkishCollation(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            For PostgreSql, makes string properties for Turkish character compatible.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseIndexToIndelibleEntities(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds an index for each indelible entity for IsDeleted property.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseIndexToCreationAuditableEntities(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds an index for each creation auditable entity for CreationDate property.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseDefaultValue(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures default value for update database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseSoftDeleteQueryFilter(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Enable the query filter for indelible entities.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UsePrecision(Microsoft.EntityFrameworkCore.ModelBuilder,System.Int32,System.Int32)">
            <summary>
            Configures the decimal property of entities with decimal properties in decimal default(18,2) format.
            </summary>
            <param name="modelBuilder"></param>
            <param name="precision"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UseAnnotationPrecision(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the decimal property of entities with decimal properties in decimal format according to <see cref="T:Milvasoft.DataAccess.EfCore.Attributes.MilvaPrecisionAttribute"/>.
            </summary>
            <remarks>
            You can use this method with <see cref="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.UsePrecision(Microsoft.EntityFrameworkCore.ModelBuilder,System.Int32,System.Int32)"/> method. 
            </remarks>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.IncludeAll``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Allows to all entities associated with deletions to be Included to the entity(s) to be included in the process.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.MilvaContext.MilvaModelBuilderExtensions.IncludeLang``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Allows to all entities associated with deletions to be Included to the entity(s) to be included in the process.
            Entities must be contains "Langs" navigation property for include process. (e.g. ProductLangs)
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.AuditConfiguration">
            <summary>
            Entity auditing configuration. You can register this configuration in startup as singleton.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.AuditConfiguration.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Entity auditing configuration. You can register this configuration in startup as singleton.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter">
            <summary>
            Defines the internal encryption converter for string values.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter.#ctor(Milvasoft.Cryptography.Abstract.IMilvaCryptographyProvider,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter"/> instance.
            </summary>
            <param name="encryptionProvider">Encryption provider</param>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaObjectIdStringConverter">
            <summary>
            Converts <see cref="T:MongoDB.Bson.ObjectId"/> to <see cref="T:System.String"/> or <see cref="T:System.String"/> to <see cref="T:MongoDB.Bson.ObjectId"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaObjectIdStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaObjectIdStringConverter"/> instance.
            </summary>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.Converters.TenantIdStringConverter">
            <summary>
            Converts <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> to <see cref="T:System.String"/> or <see cref="T:System.String"/> to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.Converters.TenantIdStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.TenantIdStringConverter"/> instance.
            </summary>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions">
            <summary>
            Entity framework related extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions.WithFiltering``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Applies filtering options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing filter options.</param>
            <returns>An IQueryable object with applied filtering.</returns>
            <remarks>
            This method applies filter options to the provided IQueryable data source based on the given <paramref name="listRequest"/> object.
            If the <paramref name="listRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions.WithSorting``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Applies sorting options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing sort options.</param>
            <returns>An IQueryable object with applied sorting.</returns>
            <remarks>
            This method applies sorting options to the provided IQueryable data source based on the given <paramref name="listRequest"/> object.
            If the <paramref name="listRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions.WithFilteringAndSorting``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Applies sorting options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing sort options.</param>
            <returns>An IQueryable object with applied sorting.</returns>
            <remarks>
            This method applies sorting options to the provided IQueryable data source based on the given <paramref name="listRequest"/> object.
            If the <paramref name="listRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions.WithFiltering``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.FilterRequest)">
            <summary>
            Applies filtering options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="filteringRequest">The list request containing filter options.</param>
            <returns>An IQueryable object with applied filtering.</returns>
            <remarks>
            This method applies filter options to the provided IQueryable data source based on the given <paramref name="filteringRequest"/> object.
            If the <paramref name="filteringRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions.WithSorting``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.SortRequest)">
            <summary>
            Applies sorting options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="sortingRequest">The list request containing sort options.</param>
            <returns>An IQueryable object with applied sorting.</returns>
            <remarks>
            This method applies sorting options to the provided IQueryable data source based on the given <paramref name="sortingRequest"/> object.
            If the <paramref name="sortingRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions.ToListResponseAsync``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Retrieves a paginated list result asynchronously from the provided IQueryable data source based on the specified list request parameters.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing pagination, filtering, and sorting options.</param>
            <returns>
            A Task representing the asynchronous operation that yields a ListResponse containing the paginated list result.
            </returns>
            <remarks>
            This method asynchronously retrieves a paginated list result from the provided IQueryable data source based on the specified list request parameters.
            It applies filtering, sorting, and pagination options to the IQueryable data before returning the paginated list result.
            The ListResponse object contains the retrieved data along with pagination metadata such as total data count, total page count, and current page number.
            If no pagination parameters are specified, the method returns the entire result set without pagination.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions.ToListResponse``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Retrieves a paginated list result from the provided IQueryable data source based on the specified list request parameters.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing pagination, filtering, and sorting options.</param>
            <returns>
            A ListResponse containing the paginated list result.
            </returns>
            <remarks>
            This method retrieves a paginated list result from the provided IQueryable data source based on the specified list request parameters.
            It applies filtering, sorting, and pagination options to the IQueryable data before returning the paginated list result.
            The ListResponse object contains the retrieved data along with pagination metadata such as total data count, total page count, and current page number.
            If no pagination parameters are specified, the method returns the entire result set without pagination.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.QueryExtensions.GetSetPropertyBuilder``2(``1)">
            <summary>
            Gets <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> for entity's matching properties with <paramref name="dto"/>'s not null properties.
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <param name="dto"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1">
            <summary>
            <see cref="T:Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1"/> expression builder for <see cref="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.ExecuteUpdate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0}}})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyCalls">
            <summary>
            Gets <see cref="T:Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1"/> expression. 
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Appends expressions to <see cref="P:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyCalls"/>
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
            <param name="valueExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Appends expressions to <see cref="P:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyCalls"/>
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
            <param name="valueExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3">
            <summary>
             Base repository for concrete repositories. All Ops!yon repositories must be have this methods.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TContext"></typeparam>
            <summary>
             Base repository for concrete repositories. All Ops!yon repositories must be have this methods.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.SaveChangesAfterEveryTransaction">
            <summary>
            All repository methods save changes(<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)"/>) after every transaction. Except get operations. 
            If you use unit of work pattern or save changes manually you can set to false this variable.
            </summary>
        </member>
        <member name="P:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.InitializeUpdate">
            <summary>
            Set to true when using no tracking.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3._dbContext">
            <summary>
            DbContext object.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3._dbSet">
            <summary>
            DebSet object.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.#ctor(`2)">
            <summary>
            Constructor of BaseRepository for <paramref name="dbContext"/> injection.
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ChangeSaveChangesAfterEveryTransactionState(System.Boolean)">
            <summary>
            Determines whether save changes method called after evert repository method.
            <para><b>Default is true.</b></para>
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ChangeInitializeUpdateState(System.Boolean)">
            <summary>
            Determines whether applied detach to updating entites. 
            <para><b>Default is true.</b></para>
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSoftDeletedEntitiesInNextProcess(System.Boolean)">
            <summary>
            Determines whether soft deleted entities in the database are fetched from the database.
            <para><b>Default is false.</b></para>
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ResetSoftDeleteState(System.Boolean)">
            <summary>
            Determines whether the default value of the variable that determines the status of deleted data in the database is assigned to the default value after database operation.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns first entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetFirstOrDefaultAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns first entity or default value which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns single entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSingleOrDefaultAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns single entity or default value which IsDeleted condition is true with includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAllAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAllAsync``1(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSomeAsync(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSomeAsync(System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range. 
                  If the condition is requested, it also provides that condition.
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAsync(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                   If the condition is requested, it also provides that condition.
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Creates and ordered asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Creates and ordered asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAndOrderedAsync(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Creates asynchronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsOrderedAsync(System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Gets entities with includes as ordered with <paramref name="orderByPropertyName"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsOrderedAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
             <summary>
              Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetRequiredByIdAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns one entity by entity Id from database asynchronously.
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetByIdAsync(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetRequiredByIdAsync(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database asynchronously. If the condition is requested, it also provides that condition. 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetGroupedAndCountAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Groups entities with <paramref name="groupByPropertyName"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="groupByPropertyName"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetGroupedAndCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Groups entities with <paramref name="keySelector"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="keySelector"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGroupedAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   var dbSet = _contextRepository.GetDbSet{Poco}();  <see cref="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.GetDbSet``1"></see> </para>
            
            <para>   var groupByClause = from poco in dbSet                                                                             </para>
                                         group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                       select new PocoDTO                                                                             </para>
            <para>                       {                                                                                              </para>
            <para>                            Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                            PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                            PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                       };                                                                                             </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClause).ConfigureAwait(false);                  </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="groupedClause"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGroupedAsync``1(System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(groupByClauseFunc).ConfigureAwait(false);                                       </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGroupedAndPaginatedAsync``1(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                               </para>
            <para>                                                              {                                                                                </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                   </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                       </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                    </para>
            <para>                                                              };                                                                               </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, groupByClauseFunc).ConfigureAwait(false);                                </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGroupedAndPaginatedAndOrderedAsync``1(System.Int32,System.Int32,System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                                    </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                                             </para>
            <para>                                                              {                                                                                              </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                                                              };                                                                                             </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}(1, 10, "PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                           </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGroupedAndOrderedAsync``1(System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result = await _pocoRepository.GetGroupedAsync{PocoDTO}("PocoCode", false, groupByClauseFunc).ConfigureAwait(false);                    </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get max value of entities.
            </summary>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMaxAsync(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get max value of entities. With includes.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMaxOfPropertyAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxPropertyName"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMaxOfPropertyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSumOfPropertyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets sums of value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="sumProperty"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get count of entities.
            </summary>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ExistsAsync(`1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ExistsAsync(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.AddAsync(`0)">
            <summary>
             Adds single entity to database asynchronously. 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database asynchronously. 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.UpdateAsync(`0)">
            <summary>
             Updates specified entity in database asynchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entity"></param>
            <param name="projectionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entities"></param>
            <param name="projectionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Updates multiple entities in database asynchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.DeleteAsync(`0)">
            <summary>
             Deletes single entity from database asynchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Deletes multiple entity from database asynchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ReplaceOldsWithNewsAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ReplaceOldsWithNewsInSeperateDatabaseProcessAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.RemoveAllAsync">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.AddBulkAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.UpdateBulkAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.DeleteBulkAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.AddBulkWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.UpdateBulkWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.DeleteBulkWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.CreateKeyEqualityExpression(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Creates Id == <typeparamref name="TKey"/> equality expression and append to <see cref="M:Milvasoft.Core.CommonHelper.CreateIsDeletedFalseExpression``1"/>.
            </summary>
            <param name="key"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.CreateObjectPredicate(System.Type,System.String)">
            <summary>
            Creates property selector.
            </summary>
            <param name="entityType"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.CheckProperty(System.String,System.Type)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="entityType"/></b>. 
            </summary>
            <param name="propertyName"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.CalculatePageCountAndCompareWithRequested(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks pagination parameters are reasonable.
            </summary>
            <param name="totalDataCount"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="requestedPageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ValidatePaginationParameters(System.Int32,System.Int32)">
            <summary>
            Checks the parameters is valid.
            </summary>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.CreateConditionExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            If <see cref="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3._getSoftDeletedEntities"/> is false,  appends is deleted false expression to <paramref name="conditionExpression"/>.
            Else does nothing to <paramref name="conditionExpression"/> but if <see cref="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3._resetGetSoftDeletedEntitiesState"/> is true then sets <see cref="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3._getSoftDeletedEntities"/> false.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetQueryTrackingBehavior(System.Boolean)">
            <summary>
            Returns <see cref="T:Microsoft.EntityFrameworkCore.QueryTrackingBehavior"/> according to <paramref name="tracking"/>.
            </summary>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.InitalizeEdit(`0)">
            <summary>
            For configure entity state. Change tracking.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.InitalizeEdit(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            For configure entity state. Change tracking.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetFirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns first entity or default value which IsDeleted condition is true from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetFirstOrDefault(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns first entity or default value which IsDeleted condition is true with includes from database hronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns single entity or default value which IsDeleted condition is true from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSingleOrDefault(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns single entity or default value which IsDeleted condition is true with includes from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAll(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAll``1(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true with specified includes from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSome(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSome(System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true with specified includes from database hronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="includes"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginated(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Creates hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range. 
                  If the condition is requested, it also provides that condition.
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginated(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Creates hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                   If the condition is requested, it also provides that condition.
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAndOrdered(System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Creates and ordered hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAndOrdered(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Creates and ordered hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAndOrdered(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Creates hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count and range.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsPaginatedAndOrdered(System.Int32,System.Int32,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Creates hronously a shallow copy of a range of entity's which IsDeleted property is true, in the source List of TEntity with requested count,range and includes.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
             
             <exception cref="T:System.ArgumentOutOfRangeException"> Throwns when <paramref name="requestedPageNumber"/> more than actual page number. </exception>
            
             <param name="requestedPageNumber"></param>
             <param name="countOfRequestedRecordsInPage"></param>
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsOrdered(System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Gets entities as ordered with <paramref name="orderByPropertyName"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsOrdered(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Gets entities with includes as ordered with <paramref name="orderByPropertyName"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <exception cref="T:System.ArgumentException"> Throwns when type of <typeparamref name="TEntity"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
             
             <param name="includes"></param>
             <param name="orderByPropertyName"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsOrdered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                  If the condition is requested, it also provides that condition.
                  
            </summary>
            
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsOrdered(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
             <summary>
              Gets entities as ordered with <paramref name="orderByKeySelector"/>.
                    If the condition is requested, it also provides that condition.
                    
             </summary>
            
             <param name="includes"></param>
             <param name="orderByKeySelector"></param>
             <param name="orderByAscending"></param>
             <param name="conditionExpression"></param>
             <param name="projectionExpression"></param>
             <param name="tracking"></param>
             <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetById(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Returns one entity by entity Id from database hronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetRequiredById(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns one entity by entity Id from database hronously.
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetById(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database hronously. If the condition is requested, it also provides that condition. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetRequiredById(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
             Returns one entity which IsDeleted condition is true by entity Id with includes from database hronously. If the condition is requested, it also provides that condition. 
            </summary>
            
            <exception cref="T:System.ArgumentNullException"> Throwns when no entity found. </exception>
            
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetGroupedAndCount(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Groups entities with <paramref name="groupByPropertyName"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="groupByPropertyName"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetGroupedAndCount(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Groups entities with <paramref name="keySelector"/> and returns the key grouped and the number of items grouped with this key.
            </summary>
            <param name="keySelector"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGrouped``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   var dbSet = _contextRepository.GetDbSet{Poco}();  <see cref="M:Milvasoft.DataAccess.EfCore.Concrete.ContextRepository`1.GetDbSet``1"></see> </para>
            
            <para>   var groupByClause = from poco in dbSet                                                                             </para>
                                         group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                       select new PocoDTO                                                                             </para>
            <para>                       {                                                                                              </para>
            <para>                            Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                            PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                            PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                       };                                                                                             </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}(groupByClause);                  </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="groupedClause"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGrouped``1(System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}(groupByClauseFunc);                                       </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGroupedAndPaginated``1(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                               </para>
            <para>                                                              {                                                                                </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                   </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                       </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                    </para>
            <para>                                                              };                                                                               </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}(1, 10, groupByClauseFunc);                                </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGroupedAndPaginatedAndOrdered``1(System.Int32,System.Int32,System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                                    </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                              select new PocoDTO                                                                             </para>
            <para>                                                              {                                                                                              </para>
            <para>                                                                   Id = groupedPocos.Key.Id,                                                                 </para>
            <para>                                                                   PocoCode = groupedPocos.Key.PocoCode,                                                     </para>
            <para>                                                                   PocoCount = groupedPocos.Sum(p=>p.Count)                                                  </para>
            <para>                                                              };                                                                                             </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}(1, 10, "PocoCode", false, groupByClauseFunc);                           </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetAsGroupedAndOrdered``1(System.String,System.Boolean,System.Func{System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets grouped entities with condition from database with <paramref name="groupedClause"/>.
            
            <para> <b>Example use;</b></para>
            <code>
            
            <para>   Func{IQueryablePocoDTO>} groupByClauseFunc = () =>   from poco in _contextRepository.GetDbSet{Poco}()                                       </para>
                                                                          group poco by new { poco.Id,  poco.PocoCode } into groupedPocos                                      
            <para>                                                        select new PocoDTO                                                                     </para>
            <para>                                                        {                                                                                      </para>
            <para>                                                             Id = groupedPocos.Key.Id,                                                         </para>
            <para>                                                             PocoCode = groupedPocos.Key.PocoCode,                                             </para>
            <para>                                                             PocoCount = groupedPocos.Sum(p=>p.Count)                                          </para>
            <para>                                                        };                                                                                     </para>
                                   
            <para>   var result =  _pocoRepository.GetGrouped{PocoDTO}("PocoCode", false, groupByClauseFunc);                    </para>
               
            </code>
            
            </summary>
            
            
            
            <typeparam name="TReturn"></typeparam>
            <param name="orderByPropertyName"></param>
            <param name="orderByAscending"></param>
            <param name="conditionExpression"></param>
            <param name="groupedClause"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMax(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Get max value of entities.
            </summary>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMax(System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Get max value of entities. With includes.
            </summary>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMaxOfProperty(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxPropertyName"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetMaxOfProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Gets max value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="maxProperty"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetSumOfProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Gets sums of value of <typeparamref name="TEntity"/>'s property in entities.
            </summary>
            <param name="sumProperty"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Get count of entities.
            </summary>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Exists(`1)">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Exists(`1,System.Func{Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable{`0},Milvasoft.DataAccess.EfCore.IncludeLibrary.IIncludable},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns whether or not the entity that satisfies this condition exists. 
            </summary>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Add(`0)">
            <summary>
             Adds single entity to database hronously. 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database hronously. 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Update(`0)">
            <summary>
             Updates specified entity in database hronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entity"></param>
            <param name="projectionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Update(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entities"></param>
            <param name="projectionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Updates multiple entities in database hronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Delete(`0)">
            <summary>
             Deletes single entity from database hronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Deletes multiple entity from database hronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ReplaceOldsWithNews(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.ReplaceOldsWithNewsInSeperateDatabaseProcess(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.RemoveAll">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.AddBulk(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.UpdateBulk(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.DeleteBulk(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.AddBulkWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.UpdateBulkWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`3.DeleteBulkWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
    </members>
</doc>
