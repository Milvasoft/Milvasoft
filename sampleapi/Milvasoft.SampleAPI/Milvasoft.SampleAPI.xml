<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.SampleAPI</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.SampleAPI.AppStartup.ApplicationBuilderExtensions">
            <summary>
            Application builder.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ApplicationBuilderExtensions.ConfigureSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds swagger documentation to pipeline.
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ApplicationBuilderExtensions.ConfigureLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            <para><b>EN: </b>Adds the required middleware to use the localization. Configures the options before add.</para>
            <para><b>TR: </b>Lokalizasyon için gereken middleware ekler. Eklemeden önce opsiyonları konfigüre eder.</para>
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.AppStartup.Program">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            Configures web api configurations.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions">
            <summary>
            Service collection extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions.ConfigureMVC(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            <para><b>EN: </b>Adds MVC services to the specified Microsoft.Extensions.DependencyInjection.IServiceCollection.</para>
            <para><b>TR: </b>Belirtilen Microsoft.Extensions.DependencyInjection.IServiceCollection.IServiceCollection öğesine MVC hizmetleri ekler.</para>
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions.ConfigureCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configured cors policies.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions.ConfigureIdentity(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations)">
            <summary>
            Configures AspNetCore.Identity.Mongo and JWT.
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <param name="jsonOperations"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions.ConfigureDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures DI.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions.ConfigureDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures database connection.
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions.ConfigureVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures API versioning.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures Swagger documentation.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.ServiceCollectionExtensions.ConfigureJWT(Microsoft.Extensions.DependencyInjection.IServiceCollection,Milvasoft.Helpers.FileOperations.Abstract.IJsonOperations)">
            <summary>
            Configures JWT Token Authentication.
            </summary>
            <param name="services"></param>
            <param name="jSONFile"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.AppStartup.Startup">
            <summary>
            Configuration class of project.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.AppStartup.Startup.Configuration">
            <summary>
            Gets or sets configuration object.
            </summary>
        </member>
        <member name="F:Milvasoft.SampleAPI.AppStartup.Startup.SharedStringLocalizer">
            <summary>
            Static <see cref="T:Milvasoft.SampleAPI.Localization.SharedResource"/> string localizer instance. Do not use this instance it if it is not essential.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.AppStartup.Startup.WebHostEnvironment">
            <summary>
            Provides information about the web hosting environment an application is running in.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.AppStartup.Startup.JsonOperations">
            <summary>
            Provides add-edit-delete-get process json files that hold one list.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Creates a new <see cref="T:Milvasoft.SampleAPI.AppStartup.Startup"/> instances.
            </summary>
            <param name="configuration"></param>
            <param name="env"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.AppStartup.StartupConfiguration">
            <summary>
            Class in which initial configurations are specified.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.AppStartup.StartupConfiguration.CheckPublicFiles">
            <summary>
            Checks media library folders. If folders not exists creates that folders.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.Controllers.AccountsController">
            <summary>
            The class in which user transactions are entered and exited
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{Milvasoft.SampleAPI.Localization.SharedResource},Milvasoft.SampleAPI.Services.Abstract.IAccountService)">
            <summary>
            Constructor of <c>AccountController</c>
            </summary>
            <param name="sharedLocalizer"></param>
            <param name="accountService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.UsersLogin(Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginDTO)">
            <summary>
            Sign in method for users. This endpoint is accessible for any requests.
            </summary>
            <returns></returns>
            <param name="loginDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.UsersLogOut">
            <summary>
            Logout method for users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.GetLoggedInInUserInformationAsync">
            <summary>
            Returns logged-in user's account information.
            </summary>
            
            <remarks> 
            
            <para> Both users(admin and mobile app user) should use this endpoint. </para>
            
            </remarks>
            
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.UpdateMyAccountAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserUpdateDTO)">
            <summary>
            Updates logged-in user's personal information.
            </summary>
            <param name="userDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.RegisterAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.RegisterDTO)">
            <summary>
            Provides the registration process of mobile application users.
            </summary>
            <param name="signUpDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.DeleteAccountAsync">
            <summary>
            Deletes logged-in user's account.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.SendEmailVerificationMailAsync">
            <summary>
            Sends email verification mail to logged-in user's email address.
            </summary>
            
            <remarks>
            
            <para>Redirect link in the mail : <b> https://sampleappurl.com/verify?userName=sampleusername{AND}token=sampletoken </b> </para>
            
            <para> <b>Note :</b> As "{AND}" is a special character, it is not suitable for a summary syntax. That's why it was written that way.</para>
            
            </remarks>
            
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.SendChangePhoneNumberMailAsync(System.String)">
            <summary>
            Sends phone number change mail to logged-in user's email address.
            </summary>
            
            <remarks>
            
            <para>Redirect link in the mail : <b> https://sampleappurl.com/change/phoneNumber?userName=sampleusername{AND}token=sampletoken </b> </para>
            
            <para> <b>Note :</b> As "{AND}" is a special character, it is not suitable for a summary syntax. That's why it was written that way.</para>
            
            </remarks>
            
            <param name="newPhoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.SendChangeEmailMailAsync(System.String)">
            <summary>
            Sends email change mail to logged-in user's email address.
            </summary>
            
            <remarks>
            
            <para>Redirect link in the mail : <b> https://sampleappurl.com/change/email?userName=sampleusername{AND}token=sampletoken </b> </para>
            
            <para> <b>Note :</b> As "{AND}" is a special character, it is not suitable for a summary syntax. That's why it was written that way.</para>
            
            </remarks>
            
            <param name="newEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.SendResetPasswordMailAsync">
            <summary>
            Sends password reset mail to logged-in user's email address.
            </summary>
            
            <remarks>
            
            <para>Redirect link in the mail : <b> https://sampleappurl.com/reset/password?userName=sampleusername{AND}token=sampletoken </b> </para>
            
            <para> <b>Note :</b> As "{AND}" is a special character, it is not suitable for a summary syntax. That's why it was written that way.</para>
            
            </remarks>
            
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.SendForgotPasswordMailAsync(System.String)">
            <summary>
            Sends password reset mail to email address(<paramref name="email"/>).
            </summary>
            
            <remarks>
            
            <para>Redirect link in the mail : <b> https://sampleappurl.com/reset/password?userName=sampleusername{AND}token=sampletoken </b> </para>
            
            <para> <b>Note :</b> As "{AND}" is a special character, it is not suitable for a summary syntax. That's why it was written that way.</para>
            
            </remarks>
            
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.SendPhoneNumberVerificationMessageAsync">
            <summary>
            Sends verification code to logged-in user's phone number.
            </summary>
            <remarks>
            
            <para><b> IMPORTANT INFORMATION : The message sending service has not yet been integrated. 
                                              So this method will not send message to the user's gsm number.
                                              Instead of returns verification code for testing. </b></para>
            
            </remarks>
            
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.VerifyPhoneNumberAsync(System.String)">
            <summary>
            Verifies logged-in user's phone number.
            </summary>
            
            <remarks>
            
            The user must be logged-in because verification will be done from within the application.  
            
            </remarks>
            
            <param name="verificationCode"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.VerifyEmailAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.EmailVerificationDTO)">
            <summary>
            Verifies <paramref name="emailVerificationDTO"/>.UserName's email.
            </summary>
            <remarks>
            
            The reason the user does not need to be logged in to request this endpoint is that the verification will take place on a web page outside of the application.
            
            </remarks>
            
            <param name="emailVerificationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.ChangePhoneNumberAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.PhoneNumberChangeDTO)">
            <summary>
            Changes <paramref name="phoneNumberChangeDTO"/>.UserName's phone number.
            </summary>
            <remarks>
            
            The reason the user does not need to be logged in to request this endpoint is that the change process will take place on a web page outside of the application.
            
            </remarks>
            
            <param name="phoneNumberChangeDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.ResetPasswordAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.PasswordResetDTO)">
            <summary>
            Resets <paramref name="passwordResetDTO"/>.UserName's password.
            </summary>
            <remarks>
            
            The reason the user does not need to be logged in to request this endpoint is that the reset process will take place on a web page outside of the application.
            
            </remarks>
            
            <param name="passwordResetDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AccountsController.ChangeUserPassword(Milvasoft.SampleAPI.DTOs.AccountDTOs.ChangePassDTO)">
            <summary>
            <para>Change personnel user password.</para>
            </summary>
            <param name="personnelUpdateDTO"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Controllers.AnnouncementsController">
            <summary>
            Provided announcement operations.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.#ctor(Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService)">
            <summary>
            Constructor of <c>AnnouncementController</c>.
            </summary>
            <param name="announcementService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.GetAnnouncementsForMentor(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Gets the all filtered announcements datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.GetAnnouncementsForAdmn(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Gets the all filtered announcements datas for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.GetAnnouncementsForStudent(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Gets the all filtered announcements datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.GetAnnouncementForMentorbyId(System.Guid)">
            <summary>
            Gets the all filtered announcement datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.GetAnnouncementForAdminbyId(System.Guid)">
             <summary>
             Gets the filtered announcement datas for admin.
             </summary>
             <returns></returns>
            [Authorize(Roles = "Admin")]
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.GetAnnouncementForStudentbyId(System.Guid)">
            <summary>
            Gets the filtered announcement datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.AddAnnouncement(Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AddAnnouncementDTO)">
            <summary>
            Add <b><paramref name="addAnnouncement"/></b> data to database.
            </summary>
            <param name="addAnnouncement"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.UpdateAnnouncement(Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.UpdateAnnouncementDTO)">
            <summary>
            Update <paramref name="updateAnnouncement"/> data.
            </summary>
            <param name="updateAnnouncement"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AnnouncementsController.DeleteAnnouncements(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete announcement data by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Controllers.AssignmentsController">
            <summary>
            Provided assignment operations.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.#ctor(Milvasoft.SampleAPI.Services.Abstract.IAssignmentService)">
            <summary>
            Constructor of <c>AssignmentConroller</c>.
            </summary>
            <param name="assignmentService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.GetAssignmentsForMentor(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Gets the all filtered assignments datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.GetAssignmentsForAdmn(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Gets the all filtered assignments datas for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.GetAssignmentsForStudent(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Gets the all filtered assignments datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.GetAssignmentForMentorbyId(System.Guid)">
            <summary>
            Gets the all filtered assignment datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.GetAssignmentForAdminbyId(System.Guid)">
             <summary>
             Gets the filtered assignment datas for admin.
             </summary>
             <returns></returns>
            [Authorize(Roles = "Admin")]
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.GetAssignmentForStudentbyId(System.Guid)">
            <summary>
            Gets the filtered assignment datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.GetAssignmentForCurrentUser">
            <summary>
            Get avaible assignment for log in user.
            </summary>
            <returns> Returns the homework that the student can take.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.GetUnconfirmedAssignment">
            <summary>
            Brings the unapproved assignments of the students of the mentor logged in.
            </summary>
            <returns> Returns unapproved assignments of students of the mentor logged in.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.AddAssignment(Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO)">
            <summary>
            Allows adding new homework.
            </summary>
            <param name="addAssignment"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.TakeAssigment(System.Guid,Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.AddStudentAssignmentDTO)">
            <summary>
            The student takes the next assignment.
            </summary>
            <param name="Id"> Assignment Id. </param>
            <param name="newAssignment"> Dto that makes the student want extra time. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.SubmitAssignment(Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO)">
            <summary>
            Allows the student to submit their homework.
            </summary>
            <param name="submitAssignment"> Where the student's homework file and explanation are located dto.</param>
            <returns> Returns the file path of the assignment.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.UpdateAssignment(Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO)">
            <summary>
            Allows the homework to be updated.
            </summary>
            <param name="updateAssignment"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.AssignmentsController.DeleteAssignment(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete assignment data by <paramref name="ids"/>
            </summary>
            <param name="ids">Ids of to be deleted assignment.</param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Controllers.MentorsController">
            <summary>
            Provided Mentor operations.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.MentorsController.#ctor(Milvasoft.SampleAPI.Services.Abstract.IMentorService)">
            <summary>
            Mentor constructor method for injection.
            </summary>
            <param name="mentorService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.MentorsController.GetMentorsForAdmin(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.MentorSpec})">
            <summary>
            Gets the all filtered mentors datas for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.MentorsController.GetMentorForAdminbyId(System.Guid)">
             <summary>
             Gets the filtered mentor datas for admin.
             </summary>
             <returns></returns>
            [Authorize(Roles = "Admin")]
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.MentorsController.GetCurrentUser">
            <summary>
            It brings the information of the mentor logged in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.MentorsController.AddMentor(Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO)">
            <summary>
            Add <b><paramref name="addMentor"/></b> data to database.
            </summary>
            <param name="addMentor"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.MentorsController.UpdateMentorbyAdmin(Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO,System.Guid)">
            <summary>
            The mentor can be updated by admin with <paramref name="Id"/>
            </summary>
            <param name="updateMentor"></param>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.MentorsController.UpdateCurrentMentor(Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO)">
            <summary>
             It allows the logged in mentor to update his / her information.
            </summary>
            <param name="updateMentor"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.MentorsController.DeleteMentors(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete mentor data by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Controllers.ProfessionsController">
            <summary>
            Provided profession operations.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.ProfessionsController.#ctor(Milvasoft.SampleAPI.Services.Abstract.IProfessionService)">
            <summary>
            Constructor of <c>ProfessionController</c>.
            </summary>
            <param name="professionService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.ProfessionsController.GetProfessions(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.ProfessionSpec})">
            <summary>
            Gets the all filtered professions datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.ProfessionsController.GetProfessionForMentorbyId(System.Guid)">
            <summary>
            Gets the all filtered profession datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.ProfessionsController.GetProfessionForAdminbyId(System.Guid)">
             <summary>
             Gets the filtered profession datas for admin.
             </summary>
             <returns></returns>
            [Authorize(Roles = "Admin")]
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.ProfessionsController.GetProfessionForStudentbyId(System.Guid)">
            <summary>
            Gets the filtered profession datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.ProfessionsController.AddProfession(Milvasoft.SampleAPI.DTOs.ProfessionDTOs.AddProfessionDTO)">
            <summary>
            Add <b><paramref name="addProfession"/></b> data to database.
            </summary>
            <param name="addProfession"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.ProfessionsController.UpdateProfession(Milvasoft.SampleAPI.DTOs.ProfessionDTOs.UpdateProfessionDTO)">
            <summary>
            Update <paramref name="updateProfession"/> data.
            </summary>
            <param name="updateProfession"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.ProfessionsController.DeleteProfession(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete professions data by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Controllers.QuestionsController">
            <summary>
            Provided Question operations.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.#ctor(Milvasoft.SampleAPI.Services.Abstract.IQuestionService)">
            <summary>
            Constructor of <c>QuestionController</c>
            </summary>
            <param name="questionService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.GetQuestionsForMentor(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Gets the all filtered questions datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.GetQuestionsForAdmin(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Gets the all filtered questions datas for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.GetQuestionsForStudent(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Gets the all filtered questions datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.GetQuestionForMentorbyId(System.Guid)">
            <summary>
            Gets the all filtered question datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.GetQuestionForAdminbyId(System.Guid)">
             <summary>
             Gets the filtered question datas for admin.
             </summary>
             <returns></returns>
            [Authorize(Roles = "Admin")]
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.GetQuestionForStudentbyId(System.Guid)">
            <summary>
            Gets the filtered question datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.AddQuestion(Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO)">
            <summary>
            Add <b><paramref name="addQuestion"/></b> data to database.
            </summary>
            <param name="addQuestion"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.UpdateQuestion(Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO)">
            <summary>
            Update <paramref name="updateQuestion"/> data.
            </summary>
            <param name="updateQuestion"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.QuestionsController.DeleteQuestions(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete professions data by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Controllers.StudentsController">
            <summary>
            Provided Student operations.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.#ctor(Milvasoft.SampleAPI.Services.Abstract.IStudentService)">
            <summary>
            Constructor of <c>StudentController</c>
            </summary>
            <param name="studentService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.GetStudentsForMentor(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.StudentSpec})">
            <summary>
            Gets the all filtered students datas for log in mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.GetStudentsForAdmin(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.StudentSpec})">
            <summary>
            Gets the all filtered students datas for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.GetCurrentUserProfile">
            <summary>
            Brings the information of the student who is logged in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.GetStudentForAdminbyId(System.Guid)">
            <summary>
            Gets the all filtered student datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.GetStudentForMentorbyId(System.Guid)">
             <summary>
             Gets the filtered student datas for admin.
             </summary>
             <returns></returns>
            [Authorize(Roles = "Admin")]
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.AddStudent(Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO)">
            <summary>
            Add <b><paramref name="addStudent"/></b> data to database.
            </summary>
            <param name="addStudent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.UpdateCurrentStudent(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO)">
            <summary>
            Update <paramref name="updateStudent"/> data.
            </summary>
            <param name="updateStudent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.UpdateStudentbyMentor(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO,System.Guid)">
            <summary>
            Update <paramref name="updateStudent"/> data.
            </summary>
            <param name="updateStudent"></param>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.UpdateStudentbyAdmin(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO,System.Guid)">
            <summary>
            Update <paramref name="updateStudent"/> data.
            </summary>
            <param name="updateStudent"></param>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.StudentsController.DeleteStudents(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete professions data by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Controllers.UsefulLinksController">
            <summary>
            Provided link operations.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.#ctor(Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService)">
            <summary>
            Constructor of <c>UsefulLinkController</c>
            </summary>
            <param name="usefulLinkService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.GetUsefulLinksForMentor(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Gets the all filtered usefulLinks datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.GetUsefulLinksForAdmin(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Gets the all filtered usefulLinks datas for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.GetUsefulLinksForStudent(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Gets the all filtered usefulLinks datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.GetUsefulLinkForMentorbyId(System.Guid)">
            <summary>
            Gets the all filtered usefulLink datas for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.GetUsefulLinkAdminbyId(System.Guid)">
             <summary>
             Gets the filtered usefulLink datas for admin.
             </summary>
             <returns></returns>
            [Authorize(Roles = "Admin")]
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.GetUsefulLinkForStudentbyId(System.Guid)">
            <summary>
            Gets the filtered usefulLink datas for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.AddUsefulLink(Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.AddUsefulLinkDTO)">
            <summary>
            Add <b><paramref name="addStudent"/></b> data to database.
            </summary>
            <param name="addStudent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.UpdateUsefulLink(Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO)">
            <summary>
            Update <paramref name="updateStudent"/> data.
            </summary>
            <param name="updateStudent"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Controllers.UsefulLinksController.DeleteUsefulLinks(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete usefulLink data by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserDTO">
            <summary>
            DTO to be user in creation proccess.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserDTO.UserName">
            <summary>
            UserName of user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserDTO.Email">
            <summary>
            Email of user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserDTO.PhoneNumber">
            <summary>
            PhoneNumber of user.
            </summary>   
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserUpdateDTO">
            <summary>
            DTO to be user in creation proccess.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserUpdateDTO.NewName">
            <summary>
            Name of to be created user by admin.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserUpdateDTO.NewSurname">
            <summary>
            Surname of to be created user by admin.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserUpdateDTO.NewPhoneNumber">
            <summary>
            Phone number which can be entered in initial update process after registeration process.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.ChangePassDTO">
            <summary>
            User password processing takes place with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.ChangePassDTO.UserName">
            <summary>
            User name of the user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.ChangePassDTO.OldPassword">
            <summary>
            Old password of the user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.ChangePassDTO.NewPassword">
            <summary>
            New password of the user.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.EmailVerificationDTO">
            <summary>
            DTO to be used to verify email.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.EmailVerificationDTO.UserName">
            <summary>
            The user who wants to verify email.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.EmailVerificationDTO.TokenString">
            <summary>
            Verification token.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginDTO">
            <summary>
            Login and sign up processes are happens with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginDTO.UserName">
            <summary>
            UserName of user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginDTO.Email">
            <summary>
            Email of user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginDTO.Password">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginDTO.Persistent">
            <summary>
            Remember me option.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginResultDTO">
            <summary>
            DTO returned by login.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginResultDTO.ErrorMessages">
            <summary>
            Error caused by login.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginResultDTO.Token">
            <summary>
            The token issued as a result of the login process.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.PasswordResetDTO">
            <summary>
            DTO to be used to reset password.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.PasswordResetDTO.UserName">
            <summary>
            The user who wants to change email.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.PasswordResetDTO.NewPassword">
            <summary>
            New password.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.PasswordResetDTO.TokenString">
            <summary>
            Password reset token.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.PhoneNumberChangeDTO">
            <summary>
            DTO to be used to change phone number.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.PhoneNumberChangeDTO.UserName">
            <summary>
            The user who wants to change phone number.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.PhoneNumberChangeDTO.NewPhoneNumber">
            <summary>
            New phone number.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.PhoneNumberChangeDTO.TokenString">
            <summary>
            Phone number change token.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.RegisterDTO">
            <summary>
            Login and sign up processes are happens with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.RegisterDTO.Name">
            <summary>
            User's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.RegisterDTO.Surname">
            <summary>
            User's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.RegisterDTO.PhoneNumber">
            <summary>
            User's phone number.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.SignUpResultDTO">
            <summary>
            Sign up result.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.SignUpResultDTO.Message">
            <summary>
            Response message.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.SignUpResultDTO.Token">
            <summary>
            Local API token.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.SignUpResultDTO.GlobalToken">
            <summary>
            Global API token.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.SignUpResultDTO.LocalAPIFailure">
            <summary>
            Determines Global API error or Local API error.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AccountDTOs.VerificationTokenDTO">
            <summary>
            Token information of the user is kept.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.VerificationTokenDTO.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AccountDTOs.VerificationTokenDTO.TokenString">
            <summary>
            Token information generated specifically for the user.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AddAnnouncementDTO">
            <summary>
            AddAnnouncementDTO for add operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AddAnnouncementDTO.Title">
            <summary>
            Tittle of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AddAnnouncementDTO.Description">
            <summary>
            Description of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AddAnnouncementDTO.IsFixed">
            <summary>
            Is the announcement fixed?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AddAnnouncementDTO.MentorId">
            <summary>
            ID of the announcement mentor.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementDTO">
            <summary>
            Announcements DTO.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementDTO.Title">
            <summary>
            Tittle of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementDTO.Description">
            <summary>
            Description of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementDTO.IsFixed">
            <summary>
            Is the announcement fixed?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementDTO.MentorId">
            <summary>
            ID of the announcement mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementDTO.PublisherMentor">
            <summary>
            Mentor of announcement.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForAdminDTO">
            <summary>
            Announcements for admin.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForAdminDTO.Title">
            <summary>
            Tittle of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForAdminDTO.Description">
            <summary>
            Description of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForAdminDTO.IsFixed">
            <summary>
            Is the announcement fixed?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForAdminDTO.MentorId">
            <summary>
            ID of the announcement mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForAdminDTO.PublisherMentor">
            <summary>
            Mentor of announcement.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForMentorDTO">
            <summary>
            Announcements for all mentors.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForMentorDTO.Title">
            <summary>
            Tittle of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForMentorDTO.Description">
            <summary>
            Description of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForMentorDTO.IsFixed">
            <summary>
            Is the announcement fixed?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForMentorDTO.PublisherMentor">
            <summary>
            Mentor of announcement.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForStudentDTO">
            <summary>
            Announcements for all students.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForStudentDTO.Title">
            <summary>
            Tittle of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForStudentDTO.Description">
            <summary>
            Description of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AnnouncementForStudentDTO.PublisherMentor">
            <summary>
            Mentor of announcement.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.UpdateAnnouncementDTO">
            <summary>
            UpdateAnnouncementDTO for update operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.UpdateAnnouncementDTO.Id">
            <summary>
            Id of updated announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.UpdateAnnouncementDTO.Title">
            <summary>
            Tittle of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.UpdateAnnouncementDTO.Description">
            <summary>
            Description of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.UpdateAnnouncementDTO.IsFixed">
            <summary>
            Is the announcement fixed?
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AppRoleDTO">
            <summary>
            Role for all users.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.PhotoPath">
            <summary>
            Photo path of users.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.IsConfirmedUser">
            <summary>
            Is the user confirmed?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.IsMentor">
            <summary>
            Is the user a mentor?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.LastModificationDate">
            <summary>
            Last modification date of user information.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.CreationDate">
            <summary>
            User creation date.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.CreatorUserId">
            <summary>
            Id of the user who created the user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.LastModifierUserId">
            <summary>
            Id of last modified user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.DeletionDate">
            <summary>
            Deletion date.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.IsDeleted">
            <summary>
            Can it be deleted?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.DeleterUserId">
            <summary>
            Id of the user who deleted.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.Mentor">
            <summary>
            Is the user mentor?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppRoleDTO.Student">
            <summary>
            Is the user student?
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AppUserDTO">
            <summary>
            Application users.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.PhotoPath">
            <summary>
            Photo path of users.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.IsConfirmedUser">
            <summary>
            Is the user confirmed?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.IsMentor">
            <summary>
            Is the user a mentor?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.LastModificationDate">
            <summary>
            Last modification date of user information.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.CreationDate">
            <summary>
            User creation date.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.CreatorUserId">
            <summary>
            Id of the user who created the user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.LastModifierUserId">
            <summary>
            Id of last modified user.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.DeletionDate">
            <summary>
            Deletion date.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.IsDeleted">
            <summary>
            Can it be deleted?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.DeleterUserId">
            <summary>
            Id of the user who deleted.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.Mentor">
            <summary>
            Is the user mentor?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AppUserDTO.Student">
            <summary>
            Is the user student?
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO">
            <summary>
            AddAssignmentDTO for add operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO.Title">
            <summary>
            Tittle of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO.Description">
            <summary>
            Description of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO.RemarksToStudent">
            <summary>
            Remarks for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO.RemarksToMentor">
            <summary>
            Remarks for mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO.Level">
            <summary>
            Difficulty level of the assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO.Rules">
            <summary>
            Rules of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO.MaxDeliveryDay">
            <summary> 
            The maximum time that the assignment will be delivered.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO.ProfessionId">
            <summary>
            The profession Id of assignment.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO">
            <summary>
            Assignment for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.Title">
            <summary>
            Tittle of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.Description">
            <summary>
            Description of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.RemarksToStudent">
            <summary>
            Remarks for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.RemarksToMentor">
            <summary>
            Remarks for mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.Level">
            <summary>
            Difficulty level of the assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.Rules">
            <summary>
            Rules of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.MaxDeliveryDay">
            <summary> 
            The maximum time that the assignment will be delivered.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.ProfessionId">
            <summary>
            The profession Id of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentDTO.Profession">
            <summary>
            The profession of assignment.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO">
            <summary>
            Assignment for admin.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO.Title">
            <summary>
            Tittle of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO.Description">
            <summary>
            Description of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO.RemarksToStudent">
            <summary>
            Remarks for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO.RemarksToMentor">
            <summary>
            Remarks for mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO.Level">
            <summary>
            Difficulty level of the assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO.Rules">
            <summary>
            Rules of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO.MaxDeliveryDay">
            <summary> 
            The maximum time that the assignment will be delivered.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForAdminDTO.ProfessionId">
            <summary>
            The profession Id of assignment.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO">
            <summary>
            Assigments for mentor DTO.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO.Title">
            <summary>
            Tittle of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO.Description">
            <summary>
            Description of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO.RemarksToStudent">
            <summary>
            Remarks for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO.RemarksToMentor">
            <summary>
            Remarks for mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO.Level">
            <summary>
            Difficulty level of the assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO.Rules">
            <summary>
            Rules of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO.MaxDeliveryDay">
            <summary> 
            The maximum time that the assignment will be delivered.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForMentorDTO.ProfessionId">
            <summary>
            The profession Id of assignment.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForStudentDTO">
            <summary>
            Assignment for Student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForStudentDTO.Title">
            <summary>
            Tittle of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForStudentDTO.Description">
            <summary>
            Description of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForStudentDTO.RemarksToStudent">
            <summary>
            Remarks for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForStudentDTO.Level">
            <summary>
            Difficulty level of the assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForStudentDTO.Rules">
            <summary>
            Rules of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForStudentDTO.MaxDeliveryDay">
            <summary> 
            The maximum time that the assignment will be delivered.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AssignmentForStudentDTO.ProfessionId">
            <summary>
            The profession Id of assignment.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO">
            <summary>
            AddAssignmentDTO for add operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.Id">
            <summary>
            Id of updated assignement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.Title">
            <summary>
            Tittle of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.Description">
            <summary>
            Description of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.RemarksToStudent">
            <summary>
            Remarks for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.RemarksToMentor">
            <summary>
            Remarks for mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.Level">
            <summary>
            Difficulty level of the assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.Rules">
            <summary>
            Rules of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.MaxDeliveryDay">
            <summary> 
            The maximum time that the assignment will be delivered.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO.ProfessionId">
            <summary>
            The profession Id of assignment.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.CachedTenant">
            <summary>
            Cached tenant model for distributed redis server.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.Id">
            <summary>
            Id of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.TenancyName">
            <summary>
            Name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.BranchNo">
            <summary>
            Branch number of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.Name">
            <summary>
            Display name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.ConnectionString">
            <summary>
            Database connection string of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.TableCount">
            <summary>
            Purchased table count of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.SubscriptionExpireDate">
            <summary>
            Subscription expiration date of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.IsActive">
            <summary>
            Determines tenant is active or not.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.CachedTenant.Modules">
            <summary>
            Purchased modules of tenant.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.ImageUploadDTO">
            <summary>
            Dto to be used when users upload image files.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ImageUploadDTO.UserId">
            <summary>
            Id of the user whose official will be updated
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ImageUploadDTO.Image">
            <summary>
            <para><b>EN: </b> Uploaded image of personnel.</para>
            <para><b>TR: </b> Yüklenen personel resmi.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ImageUploadDTO.ImageBase64String">
            <summary>
            <para><b>EN:</b>Image bse64 string of user.</para>
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO">
            <summary>
            Add mentor DTO for add operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO.Name">
            <summary>
            Mentor name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO.Surname">
            <summary>
            Mentor surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO.UserName">
            <summary>
            Username.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO.Password">
            <summary>
            User password.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO.Email">
            <summary>
            User email.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO.PhoneNumber">
            <summary>
            User Phone number.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO.CVFilePath">
            <summary>
            CV path of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO.Professions">
            <summary>
            Profession ıd of mentor.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO">
            <summary>
            Mentor DTO.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.Name">
            <summary>
            Mentor name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.Surname">
            <summary>
            Mentor surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.CVFilePath">
            <summary>
            CV path of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.AppUserId">
            <summary>
            AppUser ID of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.AppUser">
            <summary>
            AppUser of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.Image">
            <summary>
            <para><b>EN: </b> Uploaded image of personnel.</para>
            <para><b>TR: </b> Yüklenen personel resmi.</para>
            </summary>
        </member>
        <member name="F:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO._imageBase64String">
            <summary>
            The base64 version of the image file.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.ImageBase64String">
            <summary>
            <para><b>EN:</b>Image bse64 string of menu.</para>
            <para><b>TR:</b>Menüye ait resmin base64 string değeri.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.PublishedAnnouncements">
            <summary>
            Announcements posted by the mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.Professions">
            <summary>
            Professions of a mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorDTO.Students">
            <summary>
            Students of a mentor.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForAdminDTO">
            <summary>
            Mentor for admin dto.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForAdminDTO.Name">
            <summary>
            Mentor name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForAdminDTO.Surname">
            <summary>
            Mentor surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForAdminDTO.CVFilePath">
            <summary>
            CV path of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForAdminDTO.PublishedAnnouncements">
            <summary>
            Announcements posted by the mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForAdminDTO.Professions">
            <summary>
            Professions of a mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForAdminDTO.Students">
            <summary>
            Students of a mentor.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForMentorDTO">
            <summary>
            Mentor entities for mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForMentorDTO.Name">
            <summary>
            Mentor name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForMentorDTO.Surname">
            <summary>
            Mentor surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForMentorDTO.CVFilePath">
            <summary>
            CV path of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForMentorDTO.PublishedAnnouncements">
            <summary>
            Announcements posted by the mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForMentorDTO.Professions">
            <summary>
            Professions of a mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForMentorDTO.Students">
            <summary>
            Students of a mentor.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForStudentDTO">
            <summary>
            Mentor entities for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForStudentDTO.Name">
            <summary>
            Mentor name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForStudentDTO.Surname">
            <summary>
            Mentor surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForStudentDTO.PublishedAnnouncements">
            <summary>
            Announcements posted by the mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorForStudentDTO.Professions">
            <summary>
            Professions of a mentor.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorProfessionDTO">
            <summary>
            Mentor and profession relationship.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorProfessionDTO.MentorId">
            <summary>
            Id of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorProfessionDTO.Mentor">
            <summary>
            Mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorProfessionDTO.ProfessionId">
            <summary>
            Id of profession.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.MentorProfessionDTO.Profession">
            <summary>
            Profession.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO">
            <summary>
            Update mentor DTO for update operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO.Name">
            <summary>
            Mentor name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO.Surname">
            <summary>
            Mentor surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO.CVFilePath">
            <summary>
            CV path of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO.Photo">
            <summary>
            User profile pictures.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.PaginationParams">
            <summary>
            Paginatination params
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.PaginationParams.PageIndex">
            <summary>
            Requested page number.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.PaginationParams.RequestedItemCount">
            <summary>
            Requested item count in requested page.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.PaginationParams.OrderByProperty">
            <summary>
            If order by column requested then Property name of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.PaginationParams.OrderByAscending">
            <summary>
            If order by column requested then ascending or descending.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec`1">
            <summary>
            Pagination parameters with specification object(<typeparamref name="TSpec"/>).
            </summary>
            <typeparam name="TSpec"></typeparam>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec`1.Spec">
            <summary>
            Specification object.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.AddProfessionDTO">
            <summary>
            AddProfessionDTO for add operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.AddProfessionDTO.Name">
            <summary>
            Name of profession.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.ProfessionDTO">
            <summary>
            Profession entity.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.ProfessionDTO.Name">
            <summary>
            Name of profession.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.ProfessionDTO.Assignments">
            <summary>
            Assignments of profession.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.ProfessionDTO.MentorProfessions">
            <summary>
            Mentor profession relationship.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.ProfessionDTO.Students">
            <summary>
            Students of profession.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.ProfessionDTO.Questions">
            <summary>
            Questions of profession.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.ProfessionDTO.UsefulLinks">
            <summary>
            Useful links of profession.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.UpdateProfessionDTO">
            <summary>
            AddProfessionDTO for add operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.UpdateProfessionDTO.Id">
            <summary>
            Id of to be updated profession.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.ProfessionDTOs.UpdateProfessionDTO.Name">
            <summary>
            Name of profession.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO">
            <summary>
            AddQuestionDTO for add question operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO.Title">
            <summary>
            Tittle of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO.QuestionContent">
            <summary>
            Content of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO.MentorReply">
            <summary>
            The mentor's answer to the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO.IsUseful">
            <summary>
            Is the question useful?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO.WillShown">
            <summary>
            Will the question be shown as a useful question?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO.ProfessionId">
            <summary>
            Profession ıd of the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO.StudentId">
            <summary>
            Id of the student who asked the question.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO">
            <summary>
            Questions asked by students.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.Title">
            <summary>
            Tittle of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.QuestionContent">
            <summary>
            Content of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.MentorReply">
            <summary>
            The mentor's answer to the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.IsUseful">
            <summary>
            Is the question useful?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.WillShown">
            <summary>
            Will the question be shown as a useful question?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.ProfessionId">
            <summary>
            Profession ıd of the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.Profession">
            <summary>
            Profession of the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.StudentId">
            <summary>
            Id of the student who asked the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.Student">
            <summary>
            Student of the asked question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.MentorId">
            <summary>
            Id of the mentor answering the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionDTO.Mentor">
            <summary>
            The mentor answering the question
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO">
            <summary>
            Question entities for admin.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO.Title">
            <summary>
            Tittle of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO.QuestionContent">
            <summary>
            Content of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO.MentorReply">
            <summary>
            The mentor's answer to the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO.IsUseful">
            <summary>
            Is the question useful?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO.WillShown">
            <summary>
            Will the question be shown as a useful question?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO.ProfessionId">
            <summary>
            Profession ıd of the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO.Student">
            <summary>
            Student of the asked question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForAdminDTO.Mentor">
            <summary>
            The mentor answering the question
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO">
            <summary>
            Question entities for mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO.Title">
            <summary>
            Tittle of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO.QuestionContent">
            <summary>
            Content of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO.MentorReply">
            <summary>
            The mentor's answer to the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO.IsUseful">
            <summary>
            Is the question useful?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO.WillShown">
            <summary>
            Will the question be shown as a useful question?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO.ProfessionId">
            <summary>
            Profession ıd of the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO.Student">
            <summary>
            Student of the asked question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForMentorDTO.Mentor">
            <summary>
            The mentor answering the question
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForStudentDTO">
            <summary>
            Question entities for student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForStudentDTO.Title">
            <summary>
            Tittle of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForStudentDTO.QuestionContent">
            <summary>
            Content of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForStudentDTO.MentorReply">
            <summary>
            The mentor's answer to the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForStudentDTO.ProfessionId">
            <summary>
            Profession ıd of the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForStudentDTO.Student">
            <summary>
            Student of the asked question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.QuestionForStudentDTO.Mentor">
            <summary>
            The mentor answering the question
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO">
            <summary>
            UpdateQuestionDTO for update question operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO.Id">
            <summary>
            Id of to be updated question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO.Title">
            <summary>
            Tittle of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO.QuestionContent">
            <summary>
            Content of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO.MentorReply">
            <summary>
            The mentor's answer to the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO.IsUseful">
            <summary>
            Is the question useful?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO.WillShown">
            <summary>
            Will the question be shown as a useful question?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO.ProfessionId">
            <summary>
            Profession ıd of the question.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.AddStudentAssignmentDTO">
            <summary>
            Dto to use when adding a student assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.AddStudentAssignmentDTO.AdditionalTime">
            <summary>
            The additional time the student asks for the mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.AddStudentAssignmentDTO.AdditionalTimeDescription">
            <summary>
            An explanation of why the student is asking for additional time.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO">
            <summary>
            Student assginment relationship.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.StudentId">
            <summary>
            Student id.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.Student">
            <summary>
            Student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.AssigmentId">
            <summary>
            Assignment id.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.Assigment">
            <summary>
            Assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.Status">
            <summary>
            Education status.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.MentorScore">
            <summary>
            The mentor's score on the student's assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.MentorDescription">
            <summary>
            The mentor's description on the student's assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.AssigmentFilePath">
            <summary>
            File path of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.ShouldDeliveryDate">
            <summary>
            The date the student should submit the assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.StartedDate">
            <summary>
            Assignment start date.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.FinishedDate">
            <summary>
            Assignment finished date.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.AdditionalTime">
            <summary>
            The additional time the student asks for the mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.AdditionalTimeDescription">
            <summary>
            An explanation of why the student is asking for additional time.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO.IsApproved">
            <summary>
            The status of the student's homework approved by the mentor.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO">
            <summary>
            DTO is required to submit assignments.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO.AssigmentId">
            <summary>
            Id of the homework to be sent
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO.Assignment">
            <summary>
            Assignment file.
            </summary>
        </member>
        <member name="F:Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO._fileBase64String">
            <summary>
            File base64string.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO.ImageBase64String">
            <summary>
            <para><b>EN:</b>File bse64 string of assignment.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO.Description">
            <summary>
            Assignment description to mentor.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO">
            <summary>
            AddStudentDTO for add student operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.UserName">
            <summary>
            Username.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.Password">
            <summary>
            User password.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.Email">
            <summary>
            User email.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.PhoneNumber">
            <summary>
            User Phone number.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.Level">
            <summary>
            The student's starting level of homework.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.Dream">
            <summary>
            Dream of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.HomeAddress">
            <summary>
            Home adress of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.MentorThoughts">
            <summary>
            The mentor's thoughts about the student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.IsConfidentialityAgreementSigned">
            <summary>
            Did the student sign the contract?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.GraduationStatus">
            <summary>
            Education status of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.GraduationScore">
            <summary>
            Gradution score of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.MentorGraduationThoughts">
            <summary>
            The mentor's graduation thoughts of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.ProfessionId">
            <summary>
            Profession id of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO.MentorId">
            <summary>
            Mentor ıd of student.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO">
            <summary>
            Student DTO.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.Level">
            <summary>
            The student's starting level of homework.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.Dream">
            <summary>
            Dream of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.HomeAddress">
            <summary>
            Home adress of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.MentorThoughts">
            <summary>
            The mentor's thoughts about the student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.IsConfidentialityAgreementSigned">
            <summary>
            Did the student sign the contract?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.GraduationStatus">
            <summary>
            Education status of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.GraduationScore">
            <summary>
            Gradution score of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.MentorGraduationThoughts">
            <summary>
            The mentor's graduation thoughts of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.CurrentAssigmentDeliveryDate">
            <summary>
            Due date of current assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.Image">
            <summary>
            <para><b>EN: </b> Uploaded image of personnel.</para>
            <para><b>TR: </b> Yüklenen personel resmi.</para>
            </summary>
        </member>
        <member name="F:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO._imageBase64String">
            <summary>
            base64 version of the image file.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.ImageBase64String">
            <summary>
            <para><b>EN:</b>Image bse64 string of menu.</para>
            <para><b>TR:</b>Menüye ait resmin base64 string değeri.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.AppUserId">
            <summary>
            AppUser id.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.AppUser">
            <summary>
            AppUser of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.ProfessionId">
            <summary>
            Profession id of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.Profession">
            <summary>
            Profesion of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.MentorId">
            <summary>
            Mentor ıd of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.Mentor">
            <summary>
            Mentor of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentDTO.OldAssignments">
            <summary>
            Old assignments of student.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO">
            <summary>
            Student entities for admin.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.Level">
            <summary>
            The student's starting level of homework.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.HomeAddress">
            <summary>
            Home adress of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.MentorThoughts">
            <summary>
            The mentor's thoughts about the student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.IsConfidentialityAgreementSigned">
            <summary>
            Did the student sign the contract?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.GraduationStatus">
            <summary>
            Education status of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.GraduationScore">
            <summary>
            Gradution score of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.MentorGraduationThoughts">
            <summary>
            The mentor's graduation thoughts of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.ProfessionId">
            <summary>
            Profession id of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForAdminDTO.Mentor">
            <summary>
            Mentor of student.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO">
            <summary>
            Student for admin DTO.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.Level">
            <summary>
            The student's starting level of homework.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.Dream">
            <summary>
            Dream of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.HomeAddress">
            <summary>
            Home adress of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.MentorThoughts">
            <summary>
            The mentor's thoughts about the student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.GraduationStatus">
            <summary>
            Education status of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.GraduationScore">
            <summary>
            Gradution score of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.MentorGraduationThoughts">
            <summary>
            The mentor's graduation thoughts of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.CurrentAssigmentDeliveryDate">
            <summary>
            Due date of current assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.ProfessionId">
            <summary>
            Profession id of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.Mentor">
            <summary>
            Mentor of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForMentorDTO.OldAssignments">
            <summary>
            Old assignments of student.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForStudentDTO">
            <summary>
            Student entities for other student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForStudentDTO.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForStudentDTO.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForStudentDTO.Level">
            <summary>
            The student's starting level of homework.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForStudentDTO.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForStudentDTO.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForStudentDTO.Dream">
            <summary>
            Dream of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.StudentForStudentDTO.HomeAddress">
            <summary>
            Home adress of student.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO">
            <summary>
            DTO to be used when the student needs to be updated by the admin.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO.IsConfidentialityAgreementSigned">
            <summary>
            Did the student sign the contract?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO.MentorId">
            <summary>
            Mentor ıd of student.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO">
            <summary>
            DTO to be used in cases where the student needs to be updated by the mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.Level">
            <summary>
            The student's starting level of homework.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.HomeAddress">
            <summary>
            Home adress of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.MentorThoughts">
            <summary>
            The mentor's thoughts about the student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.GraduationStatus">
            <summary>
            Education status of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.CurrentAssigmentDeliveryDate">
            <summary>
            Due date of current assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.GraduationScore">
            <summary>
            Gradution score of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.MentorGraduationThoughts">
            <summary>
            The mentor's graduation thoughts of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO.ProfessionId">
            <summary>
            Profession id of student.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO">
            <summary>
            UpdateStudentDTO for update student operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO.Dream">
            <summary>
            Dream of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO.HomeAddress">
            <summary>
            Home adress of student.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.AddUsefulLinkDTO">
            <summary>
            UpdateUsefulLinkDTO for add useful link operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.AddUsefulLinkDTO.Title">
            <summary>
            Tittle of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.AddUsefulLinkDTO.Description">
            <summary>
            Description of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.AddUsefulLinkDTO.Url">
            <summary>
            URL.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.AddUsefulLinkDTO.ProfessionId">
            <summary>
            Profession id of link.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO">
            <summary>
            UpdateUsefulLinkDTO for update useful link operations.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO.Id">
            <summary>
            Id of to be updated useful links.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO.Title">
            <summary>
            Tittle of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO.Description">
            <summary>
            Description of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO.Url">
            <summary>
            URL.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO.ProfessionId">
            <summary>
            Profession id of link.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.DTOs.UsefulLinkDTO">
            <summary>
            Useful links.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTO.Title">
            <summary>
            Tittle of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTO.Description">
            <summary>
            Description of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTO.Url">
            <summary>
            URL.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTO.ProfessionId">
            <summary>
            Profession id of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.DTOs.UsefulLinkDTO.Profession">
            <summary>
            Profession of link.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.Middlewares.ExceptionHandlerMiddleware">
            <summary>
            Middleware that will be activated in case of errors.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Middlewares.ExceptionHandlerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Constructor of <c>ExceptionMiddleware</c> class.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Middlewares.ExceptionHandlerMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            <para><b>EN: </b>Invokes the method or constructor reflected by this MethodInfo instance.</para>
            <para><b>TR: </b>Bu MethodInfo örneği tarafından yansıtılan yöntemi veya yapıcıyı çağırır.</para>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Middlewares.MiddlewareExtensions">
            <summary>
            Custom middleware extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Middlewares.MiddlewareExtensions.UseExceptionHandlerMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds exception handler to middleware pipeline.
            </summary>
            <param name="applicationBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Middlewares.MiddlewareExtensions.UseMilvaGeneralMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Extension method of <c>HeaderCheckMiddleware</c> class.
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Middlewares.MilvaGeneralMiddleware">
            <summary>
            <para><b>EN: </b>Checks if the title is suitable for the conditions.</para>
            <para><b>TR: </b>Başlığın koşullara uygun olup olmadığını kontrol eder.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Middlewares.MilvaGeneralMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Constructor of <c>HeaderCheckMiddleware</c> class.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Middlewares.MilvaGeneralMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            <para><b>EN: </b>Invokes the method or constructor reflected by this MethodInfo instance.</para>
            <para><b>TR: </b>Bu MethodInfo örneği tarafından yansıtılan yöntemi veya yapıcıyı çağırır.</para>
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Abstract.IAccountService">
            <summary>
            The class in which user transactions are entered and exited.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.LoginAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginDTO,System.Boolean)">
            <summary>
            Login for incoming user. Returns a token if login informations are valid or the user is not lockedout. Otherwise returns the error list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.GetLoggedInInUserInformationAsync">
            <summary>
            Gets a specific personnel data from repository by token value if exsist.
            </summary>
            <returns> Logged-in user data. </returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.ChangePasswordAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.ChangePassDTO)">
            <summary>
            Change user password.
            </summary>
            <param name="changeDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.UpdateAccountAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserUpdateDTO)">
            <summary>
            Updates logged-in user's personal information.
            </summary>
            <param name="userDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.RegisterAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.RegisterDTO)">
            <summary>
            Sign up process for application user.
            If signup process is succesful,then sign in.
            </summary>
            <param name="userSignUpDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.DeleteAccountAsync">
            <summary>
            Deletes logged-in user's account. This operation is irreversible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.SendEmailVerificationMailAsync">
            <summary>
            Sends email verification mail to logged-in user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.SendChangePhoneNumberMailAsync(System.String)">
            <summary>
            Sends phone number change mail to logged-in user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.SendChangeEmailMailAsync(System.String)">
            <summary>
            Sends email chage mail to logged-in user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.SendResetPasswordMailAsync">
            <summary>
            Sends password reset mail to logged-in user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.SendForgotPasswordMailAsync(System.String)">
            <summary>
            Sends password reset mail to <paramref name="email"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.SendPhoneNumberVerificationMessageAsync">
            <summary>
            Sends verification code to logged-in user's phone number.
            <para><b> IMPORTANT INFORMATION : The message sending service has not yet been integrated. 
                                              So this method will not send message to the user's gsm number.
                                              Instead of returns verification code for testing. </b></para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.VerifyPhoneNumberAsync(System.String)">
            <summary>
            Verifies email, if <paramref name="verificationCode"/> is correct.
            </summary>
            <param name="verificationCode"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.VerifyEmailAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.EmailVerificationDTO)">
            <summary>
            Verifies <paramref name="emailVerificationDTO"/>.UserName's email, if <paramref name="emailVerificationDTO"/>.TokenString is valid.
            </summary>
            <param name="emailVerificationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.ChangePhoneNumberAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.PhoneNumberChangeDTO)">
            <summary>
            Changes <paramref name="phoneNumberChangeDTO"/>.UserName's email 
            with <paramref name="phoneNumberChangeDTO"/>.NewPhoneNumber, if <paramref name="phoneNumberChangeDTO"/>.TokenString is valid.
            </summary>
            <param name="phoneNumberChangeDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAccountService.ResetPasswordAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.PasswordResetDTO)">
            <summary>
            Resets <paramref name="passwordResetDTO"/>.UserName's password with <paramref name="passwordResetDTO"/>.NewPassword, if <paramref name="passwordResetDTO"/>.TokenString is valid.
            </summary>
            <param name="passwordResetDTO"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService">
            <summary>
            Announcement service interface.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.GetAnnouncementsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Get all announcement for admin from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.GetAnnouncementsForMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Get all announcement for mentor from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.GetAnnouncementsForStudentAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Get all announcement for mentor from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.GetAnnouncementForStudentAsync(System.Guid)">
            <summary>
            Fetches filtered announcement by id for student.
            </summary>
            <param name="id">Student id.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.GetAnnouncementForAdminAsync(System.Guid)">
            <summary>
            Fetches filtered announcement by id for admin.
            </summary>
            <param name="id">Student id.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.GetAnnouncementForMentorAsync(System.Guid)">
            <summary>
            Fetches filtered announcement by id for mentor.
            </summary>
            <param name="id">Student id.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.AddAnnouncementAsync(Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AddAnnouncementDTO)">
            <summary>
            Add announcement to database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.UpdateAnnouncementAsync(Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.UpdateAnnouncementDTO)">
            <summary>
            Updates single entity in database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAnnouncementService.DeleteAnnouncementsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete entities by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService">
            <summary>
            Assignment service interface.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetAssignmentsForStudentAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Get all assignment for student from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetAssignmentsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Get all assignment for admin from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetAssignmentsForMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Get all assignment for mentor from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetAssignmentForStudentAsync(System.Guid)">
            <summary>
            Fetches filtered assignment by id for student.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetAssignmentForAdminAsync(System.Guid)">
            <summary>
            Fetches filtered assignment by id for admin.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetAssignmentForMentorAsync(System.Guid)">
            <summary>
            Fetches filtered assignment by id for mentor.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.AddAssignmentAsync(Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO)">
            <summary>
            Add assignment to database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.UpdateAssignmentAsync(Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO)">
            <summary>
            Updates assignment in database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.DeleteAssignmentAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete assignment by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetTakenAssignmentForCurrentStudentAsync">
            <summary>
            Brings homework suitable for the student's level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetCurrentActiveAssignmentAsync">
            <summary>
            Get current assignment for logged student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.TakeAssignmentAsync(System.Guid,Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.AddStudentAssignmentDTO)">
            <summary>
             The student takes the next assignment.
            </summary>
            <param name="Id"></param>
            <param name="newAssignment"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.SubmitAssignmentAsync(Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO)">
            <summary>
            Allows the student to turn in the assignment.
            </summary>
            <param name="submitAssignment"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.GetUnconfirmedAssignmentsAsync">
            <summary>
            Brings the unapproved assignments of the students of the mentor logged in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IAssignmentService.ConfirmAssignmentAsync(Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO)">
            <summary>
            The mentor approves the homework request sent by the student.
            </summary>
            <param name="toBeUpdated"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Abstract.IMentorService">
            <summary>
            Mentor service interface.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IMentorService.GetMentorsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.MentorSpec})">
            <summary>
            Get all assignment for admin from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IMentorService.GetMentorForAdminAsync(System.Guid)">
            <summary>
            Fetches filtered assignment by id for admin.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IMentorService.GetCurrentUserProfileAsync">
            <summary>
            Brings instant user's profile information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IMentorService.AddMentorAsync(Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO)">
            <summary>
            Add assignment to database.
            </summary>
            <param name="addMentorDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IMentorService.UpdateMentorByAdminAsync(Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO,System.Guid)">
            <summary>
            Updates assignment in database.
            </summary>
            <param name="updateMentorDTO"></param>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IMentorService.UpdateCurrentMentorAsync(Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO)">
            <summary>
            The mentor can update himself.
            </summary>
            <param name="updateMentorDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IMentorService.DeleteMentorsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete assignment by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Abstract.IProfessionService">
            <summary>
            Profession service interface.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IProfessionService.GetProfessionsAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.ProfessionSpec})">
            <summary>
            Get all profession for student from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IProfessionService.GetProfessionForStudentAsync(System.Guid)">
            <summary>
            Fetches filtered profession by id for student.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IProfessionService.GetProfessionForAdminAsync(System.Guid)">
            <summary>
            Fetches filtered profession by id for admin.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IProfessionService.GetProfessionForMentorAsync(System.Guid)">
            <summary>
            Fetches filtered profession by id for mentor.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IProfessionService.AddProfessionAsync(Milvasoft.SampleAPI.DTOs.ProfessionDTOs.AddProfessionDTO)">
            <summary>
            Add profession to database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IProfessionService.UpdateProfessionAsync(Milvasoft.SampleAPI.DTOs.ProfessionDTOs.UpdateProfessionDTO)">
            <summary>
            Updates profession in database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IProfessionService.DeleteProfessionsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete profession by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Abstract.IQuestionService">
            <summary>
            Question service inteface.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.GetQuestionsForStudentAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Get all questions for student from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.GetQuestionsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Get all questions for admin from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.GetQuestionsForMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Get all questions for mentor from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.GetQuestionForStudentAsync(System.Guid)">
            <summary>
            Fetches filtered question by id for student.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.GetQuestionForAdminAsync(System.Guid)">
            <summary>
            Fetches filtered question by id for admin.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.GetQuestionForMentorAsync(System.Guid)">
            <summary>
            Fetches filtered question by id for mentor.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.AddQuestionAsync(Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO)">
            <summary>
            Add question to database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.UpdateQuestionAsync(Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO)">
            <summary>
            Updates question in database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.DeleteQuestionsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete questions by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IQuestionService.GetWillShowQuestionsAsync">
            <summary>
             Returns questions to display
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Abstract.IStudentService">
            <summary>
            Student service inteface.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.GetStudentsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.StudentSpec})">
            <summary>
            Get all students for admin from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.GetStudentsForCurrentMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.StudentSpec})">
            <summary>
            Get all students for mentor from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.GetStudentForAdminAsync(System.Guid)">
            <summary>
            Fetches filtered student by id for admin.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.GetStudentForMentorAsync(System.Guid)">
            <summary>
            Fetches filtered student by id for mentor.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.AddStudentAsync(Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO)">
            <summary>
            Add student to database.
            </summary>
            <param name="studentDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.UpdateStudentByAdminAsync(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO,System.Guid)">
            <summary>
            Updates single student which that equals <paramref name="Id"/> in repository by <paramref name="updateStudentDTO"/>'s properties by admin.
            </summary>
            <param name="updateStudentDTO">Student to be updated.</param>
            <param name="Id">Id of student to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.UpdateStudentByMentorAsync(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO,System.Guid)">
            <summary>
            Updates single student which that equals <paramref name="Id"/> in repository by <paramref name="updateStudentDTO"/>'s properties by mentor.
            </summary>
            <param name="updateStudentDTO">Student to be updated.</param>
            <param name="Id">Id of student to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.UpdateCurrentStudentAsync(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO)">
            <summary>
            Updates the information of the logged in student.
            </summary>
            <param name="studentDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.DeleteStudentsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete students by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IStudentService.GetCurrentUserProfileAsync">
            <summary>
            Brings instant user's profile information.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService">
            <summary>
            UsefulLink service inteface.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.GetUsefulLinksForStudentAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Get all useful links for student from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.GetUsefulLinksForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Get all useful links for admin from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.GetUsefulLinksForMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Get all useful links for mentor from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.GetUsefulLinkForStudentAsync(System.Guid)">
            <summary>
            Fetches filtered useful link by id for student.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.GetUsefulLinkForAdminAsync(System.Guid)">
            <summary>
            Fetches filtered useful link by id for admin.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.GetUsefulLinkForMentorAsync(System.Guid)">
            <summary>
            Fetches filtered useful link by id for mentor.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.AddUsefulLinkAsync(Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.AddUsefulLinkDTO)">
            <summary>
            Add useful link to database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.UpdateUsefulLinkAsync(Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO)">
            <summary>
            Updates useful link in database.
            </summary>
            <param name="educationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Abstract.IUsefulLinkService.DeleteUsefulLinksAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete useful links by <paramref name="ids"/>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Concrete.AccountService">
            <summary>
            Provides sign-in,sign-up and sign-out process for user.
            </summary>
        </member>
        <member name="F:Milvasoft.SampleAPI.Services.Concrete.AccountService._loginProvider">
            <summary>
            The authentication scheme for the provider the token is associated with.
            </summary>
        </member>
        <member name="F:Milvasoft.SampleAPI.Services.Concrete.AccountService._tokenName">
            <summary>
            The name of token.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.#ctor(Microsoft.AspNetCore.Identity.UserManager{Milvasoft.SampleAPI.Entity.AppUser},Microsoft.AspNetCore.Identity.SignInManager{Milvasoft.SampleAPI.Entity.AppUser},Milvasoft.Helpers.Identity.Abstract.ITokenManagement,System.Net.Http.HttpClient,Milvasoft.Helpers.DataAccess.EfCore.Abstract.IContextRepository{Milvasoft.SampleAPI.Data.EducationAppDbContext},Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.AppUser,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext},Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Helpers.Mail.IMilvaMailSender,Microsoft.Extensions.Localization.IStringLocalizer{Milvasoft.SampleAPI.Localization.SharedResource},Milvasoft.Helpers.DependencyInjection.IMilvaLogger,Milvasoft.Helpers.Caching.IRedisCacheService)">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="tokenManagement"></param>
            <param name="httpClient"></param>
            <param name="contextRepository"></param>
            <param name="userRepository"></param>
            <param name="httpContextAccessor"></param>
            <param name="milvaMailSender"></param>
            <param name="sharedLocalizer"></param>
            <param name="milvaLogger"></param>
            <param name="redisCacheService"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.LoginAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.LoginDTO,System.Boolean)">
            <summary>
            Signs in for incoming user. 
            </summary>
            <param name="loginDTO"></param>
            <param name="isMentor"></param>
            <returns>Returns a token if the login information is correct.Otherwise returns the error list.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.ChangePasswordAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.ChangePassDTO)">
            <summary>
            Change user password.
            </summary>
            <param name="passDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.GetLoggedInInUserInformationAsync">
            <summary>
            Gets a specific personnel data from repository by token value if exsist.
            </summary>
            <returns> Logged-in user data. </returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.UpdateAccountAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.AppUserUpdateDTO)">
            <summary>
            Updates logged-in user's personal information.
            </summary>
            <param name="userDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.RegisterAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.RegisterDTO)">
            <summary>
            Sign up process for application user.
            If signup process is succesful,then sign in.
            </summary>
            <param name="registerDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.DeleteAccountAsync">
            <summary>
            Deletes logged-in user's account. This operation is irreversible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.SendEmailVerificationMailAsync">
            <summary>
            Sends email verification mail to logged-in user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.SendChangePhoneNumberMailAsync(System.String)">
            <summary>
            Sends phone number change mail to logged-in user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.SendChangeEmailMailAsync(System.String)">
            <summary>
            Sends email chage mail to logged-in user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.SendResetPasswordMailAsync">
            <summary>
            Sends password reset mail to logged-in user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.SendForgotPasswordMailAsync(System.String)">
            <summary>
            Sends password reset mail to<paramref name="email"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.SendPhoneNumberVerificationMessageAsync">
            <summary>
            Sends verification code to logged-in user's phone number.
            <para><b> IMPORTANT INFORMATION : The message sending service has not yet been integrated. 
                                              So this method will not send message to the user's gsm number.
                                              Instead of returns verification code for testing. </b></para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.VerifyPhoneNumberAsync(System.String)">
            <summary>
            Verifies email, if <paramref name="verificationCode"/> is correct.
            </summary>
            <param name="verificationCode"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.VerifyEmailAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.EmailVerificationDTO)">
            <summary>
            Verifies <paramref name="emailVerificationDTO"/>.UserName's email, if <paramref name="emailVerificationDTO"/>.TokenString is valid.
            </summary>
            <param name="emailVerificationDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.ChangePhoneNumberAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.PhoneNumberChangeDTO)">
            <summary>
            Changes <paramref name="phoneNumberChangeDTO"/>.UserName's email 
            with <paramref name="phoneNumberChangeDTO"/>.NewPhoneNumber, if <paramref name="phoneNumberChangeDTO"/>.TokenString is valid.
            </summary>
            <param name="phoneNumberChangeDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.ResetPasswordAsync(Milvasoft.SampleAPI.DTOs.AccountDTOs.PasswordResetDTO)">
            <summary>
            Resets <paramref name="passwordResetDTO"/>.UserName's password with <paramref name="passwordResetDTO"/>.NewPassword, if <paramref name="passwordResetDTO"/>.TokenString is valid.
            </summary>
            <param name="passwordResetDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.GenerateTokenWithRoleAsync(Milvasoft.SampleAPI.Entity.AppUser,System.Boolean)">
            <summary>
            Roll is added according to user type and token is produced.
            </summary>
            <param name="user"></param>
            <param name="isAppUser"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.GenerateToken(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            If Authentication is successful, JWT tokens are generated.
            </summary>
            <param name="username"></param>
            <param name="roles"></param>
            <param name="isAppUser"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.GenerateVerificationCode">
            <summary>
            Generates 6-digit verification code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.PrepareMailBodyDictionary(System.String[])">
            <summary>
            <para> Please add items to <paramref name="values"/> with this sorting; </para>
                     <para> - Mail Title         </para>
                     <para> - Body Title         </para>
                     <para> - Body Description   </para>
                     <para> - Body Button Text   </para>
                     <para> - Body Resend Text   </para>
                     <para> - Body Bottom Text   </para>
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.SendActivityMailAsync(System.Collections.Generic.Dictionary{System.String,System.String},System.String,Milvasoft.SampleAPI.Services.Concrete.AccountService.AccountActivity,System.String,System.String)">
            <summary>
            Sends email to logged-in user's email.
            Please make sure <paramref name="localizedMailBodyContents"/> dictionary parameter taken from <see cref="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.PrepareMailBodyDictionary(System.String[])"/>.
            </summary>
            <param name="localizedMailBodyContents"></param>
            <param name="urlPath"></param>
            <param name="accountActivity"></param>
            <param name="newInfo"> Could be new phone number or new email. </param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.CheckRegex(System.String,System.String)">
            <summary>
            Regex check for action parameter.
            </summary>
            <param name="input"></param>
            <param name="propName"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.CheckLoginStatus">
            <summary>
            Cheks <see cref="F:Milvasoft.SampleAPI.Services.Concrete.AccountService._userName"/>. If is null or empty throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/>. Otherwise does nothing.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AccountService.ThrowErrorMessagesIfNotSuccess(Microsoft.AspNetCore.Identity.IdentityResult)">
            <summary>
            If <paramref name="identityResult"/> is not succeeded throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/>.
            </summary>
            <param name="identityResult"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService">
            <summary>
            Announcement service.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.#ctor(Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Announcement,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext})">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="announcementRepository"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.GetAnnouncementsForStudentAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Get all announcement for student.
            </summary>
            <param name="paginationParams">Filter object.</param>
            <returns> The announcement is put in the form of an AnnouncementForStudentDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.GetAnnouncementsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Get all announcement for admin.
            </summary>
            <param name="paginationParams">Filter object.</param>
            <returns> The announcements is put in the form of an AnnouncementForAdminDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.GetAnnouncementsForMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AnnouncementSpec})">
            <summary>
            Get all announcement for mentor.
            </summary>
            <param name="paginationParams">Filter object.</param>
            <returns> The announcement is put in the form of an AnnouncementForMentorDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.GetAnnouncementForAdminAsync(System.Guid)">
            <summary>
            Get announcement for admin by <paramref name="announcementId"/>.
            </summary>
            <param name="announcementId">Id of the announcement to be brought</param>
            <returns> The announcement is put in the form of an AnnouncementForAdminDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.GetAnnouncementForMentorAsync(System.Guid)">
            <summary>
            Get entity for mentor by <paramref name="announcementId"/>.
            </summary>
            <param name="announcementId"></param>
            <returns> The announcement is put in the form of an AnnouncementForMentorDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.GetAnnouncementForStudentAsync(System.Guid)">
            <summary>
            Get announcement for student by <paramref name="announcementId"/>.
            </summary>
            <param name="announcementId"></param>
            <returns> The announcement is put in the form of an AnnouncementForStudentDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.AddAnnouncementAsync(Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.AddAnnouncementDTO)">
            <summary>
            Maps <paramref name="addAnnouncementDTO"/> to <c><b>Announcement</b></c>  object and adds that product to repository.
            </summary>
            <param name="addAnnouncementDTO">Announcement to be added.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.UpdateAnnouncementAsync(Milvasoft.SampleAPI.DTOs.AnnouncementDTOs.UpdateAnnouncementDTO)">
            <summary>
            Updates single announcement which that equals <paramref name="updateAnnouncementDTO"/> in repository by <paramref name="updateAnnouncementDTO"/>'s properties.
            </summary>
            <param name="updateAnnouncementDTO">Announcement to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AnnouncementService.DeleteAnnouncementsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete multiple announcement by <paramref name="announcementIds"/>.
            </summary>
            <param name="announcementIds"> Ids of announcements to be deleted.</param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Concrete.AssignmentService">
            <summary>
            Assignment service.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.#ctor(Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Assignment,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext},Microsoft.AspNetCore.Http.IHttpContextAccessor,Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.StudentAssigment,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext},Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Student,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext},Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Mentor,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext},Milvasoft.Helpers.Mail.IMilvaMailSender)">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="assignmentRepository"></param>
            <param name="httpContextAccessor"></param>
            <param name="studentAssignmentRepository"></param>
            <param name="studentRepository"></param>
            <param name="mentorRepository"></param>
            <param name="milvaMailSender"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetAssignmentsForStudentAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Get all assignment for student by <paramref name="paginationParams"/>
            </summary>
            <returns>The assignments is put in the form of an AnnouncementForStudentDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetAssignmentsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Get assignments for admin by <paramref name="paginationParams"/>
            </summary>
            <returns>The assignments is put in the form of an AnnouncementForAdminDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetAssignmentsForMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.AssignmentSpec})">
            <summary>
            Get assignments for mentor by <paramref name="paginationParams"/>
            </summary>
            <returns>The assignments is put in the form of an AnnouncementForMentorDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetAssignmentForStudentAsync(System.Guid)">
            <summary>
            Get assignment for student by <paramref name="assignmentId"/>
            </summary>
            <param name="assignmentId"> Id of the student to be shown.</param>
            <returns>The assignment is put in the form of an AnnouncementForStudentDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetAssignmentForAdminAsync(System.Guid)">
            <summary>
            Get assignment for admin by <paramref name="assignmentId"/>
            </summary>
            <param name="assignmentId">Id of the student to be shown.</param>
            <returns>The assignment is put in the form of an AnnouncementForAdminDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetAssignmentForMentorAsync(System.Guid)">
            <summary>
            Get assignment for mentor by <paramref name="assignmentId"/>
            </summary>
            <param name="assignmentId">Id of the student to be shown.</param>
            <returns>The assignment is put in the form of an AnnouncementForMentorDTO.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.AddAssignmentAsync(Milvasoft.SampleAPI.DTOs.AssignmentDTOs.AddAssignmentDTO)">
            <summary>
            Maps <paramref name="addAssignmentDTO"/> to <c><b>Assignment</b></c>  object and adds that product to repository.
            </summary>
            <param name="addAssignmentDTO">Assignment to be added.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.UpdateAssignmentAsync(Milvasoft.SampleAPI.DTOs.AssignmentDTOs.UpdateAssignmentDTO)">
            <summary>
            Updates single assignment which that equals <paramref name="updateAssignmentDTO"/> in repository by <paramref name="updateAssignmentDTO"/>'s properties.
            </summary>
            <param name="updateAssignmentDTO">Assignment to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.DeleteAssignmentAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete assignments by <paramref name="assignmentIds"/>
            </summary>
            <param name="assignmentIds"> Id of assignments to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetTakenAssignmentForCurrentStudentAsync">
            <summary>
            Brings homework suitable for the student's level.
            </summary>
            <returns> Returns the appropriate assignment to the student.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetCurrentActiveAssignmentAsync">
            <summary>
            Get current assignment for logged student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.TakeAssignmentAsync(System.Guid,Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.AddStudentAssignmentDTO)">
            <summary>
             The student takes the next assignment.
            </summary>
            <param name="Id"></param>
            <param name="newAssignment"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.SubmitAssignmentAsync(Milvasoft.SampleAPI.DTOs.SubmitAssignmentDTO)">
            <summary>
            Allows the student to turn in the assignment.
            </summary>
            <param name="submitAssignment"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.GetUnconfirmedAssignmentsAsync">
            <summary>
            Brings the unapproved assignments of the students of the mentor logged in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.AssignmentService.ConfirmAssignmentAsync(Milvasoft.SampleAPI.DTOs.StudentAssignmentDTOs.StudentAssignmentDTO)">
            <summary>
            The mentor approves the homework request sent by the student.
            </summary>
            <param name="toBeUpdated"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Concrete.MentorService">
            <summary>
            Mentor service. 
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.#ctor(Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Mentor,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext},Microsoft.AspNetCore.Identity.UserManager{Milvasoft.SampleAPI.Entity.AppUser},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="mentorRepository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.GetMentorsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.MentorSpec})">
            <summary>
            Get mentors for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.GetMentorForAdminAsync(System.Guid)">
            <summary>
            Get mentor for admin by <paramref name="mentorId"/>.
            </summary>
            <param name="mentorId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.GetCurrentUserProfileAsync">
            <summary>
            Brings instant user's profile information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.AddMentorAsync(Milvasoft.SampleAPI.DTOs.MentorDTOs.AddMentorDTO)">
            <summary>
            Maps <paramref name="addMentorDTO"/> to <c><b>Mentor</b></c>  object and adds that product to repository.
            </summary>
            <param name="addMentorDTO">Mentor to be added.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.UpdateMentorByAdminAsync(Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO,System.Guid)">
            <summary>
            Updates single mentor which that equals <paramref name="updateMentorDTO"/> in repository by <paramref name="updateMentorDTO"/>'s properties.
            </summary>
            <param name="updateMentorDTO">Mentor to be updated.</param>
            <param name="Id">Id of the to be updated mentor.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.UpdateCurrentMentorAsync(Milvasoft.SampleAPI.DTOs.MentorDTOs.UpdateMentorDTO)">
            <summary>
            The mentor can update himself.
            </summary>
            <param name="updateMentorDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.DeleteMentorsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Deletes the mentor whose id has been sent.
            </summary>
            <param name="mentorIds">Id of the mentors to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.MentorService.UpdateImageAsync(Milvasoft.SampleAPI.DTOs.ImageUploadDTO)">
            <summary>
            Updates picture of student.
            </summary>
            <param name="imageUploadDTO"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Concrete.ProfessionService">
            <summary>
            Profession service.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.ProfessionService.#ctor(Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Profession,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext})">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="professionRepository"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.ProfessionService.GetProfessionsAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.ProfessionSpec})">
            <summary>
            Get all filtered professions by <paramref name="paginationParams"/>
            </summary>
            <returns>Returns the filtered profession.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.ProfessionService.GetProfessionForAdminAsync(System.Guid)">
            <summary>
            Get profession for admin by <paramref name="professionId"/>.
            </summary>
            <param name="professionId">Profession id to display.</param>
            <returns>Returns the profession to which the student sent her/his id.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.ProfessionService.GetProfessionForMentorAsync(System.Guid)">
            <summary>
            Get profession for mentor by <paramref name="professionId"/>
            </summary>
            <param name="professionId">Profession id to display.</param>
            <returns>Returns the profession to which the student sent her/his id.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.ProfessionService.GetProfessionForStudentAsync(System.Guid)">
            <summary>
            Get profession for student by <paramref name="professionId"/>
            </summary>
            <param name="professionId">Profession id to display.</param>
            <returns>Returns the profession to which the student sent her/his id.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.ProfessionService.AddProfessionAsync(Milvasoft.SampleAPI.DTOs.ProfessionDTOs.AddProfessionDTO)">
            <summary>
            Maps <paramref name="addProfessionDTO"/> to <c><b>Profession</b></c>  object and adds that product to repository.
            </summary>
            <param name="addProfessionDTO">Profession to be added.</param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.ProfessionService.UpdateProfessionAsync(Milvasoft.SampleAPI.DTOs.ProfessionDTOs.UpdateProfessionDTO)">
            <summary>
            Updates single profession which that equals <paramref name="updateProfessionDTO"/> in repository by <paramref name="updateProfessionDTO"/>'s properties.
            </summary>
            <param name="updateProfessionDTO">Profession to be updated.</param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.ProfessionService.DeleteProfessionsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Deletes the professions whose id has been sent.
            </summary>
            <param name="professionIds">Professions to be deleted.</param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Concrete.QuestionService">
            <summary>
            Question service.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.#ctor(Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Question,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext})">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="questionRepository"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.GetQuestionsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Get all questions for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.GetQuestionsForMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Get all questions for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.GetQuestionsForStudentAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.QuestionSpec})">
            <summary>
            Get all questions for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.GetQuestionForAdminAsync(System.Guid)">
            <summary>
            Get question for admin by <paramref name="questionId"/>.
            </summary>
            <param name="questionId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.GetQuestionForMentorAsync(System.Guid)">
            <summary>
            Get question for mentor by <paramref name="questionId"/>.
            </summary>
            <param name="questionId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.GetQuestionForStudentAsync(System.Guid)">
            <summary>
            Get question for student by <paramref name="questionId"/>.
            </summary>
            <param name="questionId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.AddQuestionAsync(Milvasoft.SampleAPI.DTOs.QuestionDTOs.AddQuestionDTO)">
            <summary>
            Maps <paramref name="addQuestionDTO"/> to <c><b>Question</b></c>  object and adds that product to repository.
            </summary>
            <param name="addQuestionDTO">Question to be added.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.UpdateQuestionAsync(Milvasoft.SampleAPI.DTOs.QuestionDTOs.UpdateQuestionDTO)">
            <summary>
            Updates single question which that equals <paramref name="updateQuestionDTO"/> in repository by <paramref name="updateQuestionDTO"/>'s properties.
            </summary>
            <param name="updateQuestionDTO">Question to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.DeleteQuestionsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete question by <paramref name="questionIds"/>.
            </summary>
            <param name="questionIds"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.QuestionService.GetWillShowQuestionsAsync">
            <summary>
            If questions to show.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Concrete.StudentService">
            <summary>
            Student service.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.#ctor(Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Student,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext},Microsoft.AspNetCore.Identity.UserManager{Milvasoft.SampleAPI.Entity.AppUser},Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.Mentor,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="studentRepository"></param>
            <param name="userManager"></param>
            <param name="httpContextAccessor"></param>
            <param name="mentorRepository"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.GetStudentsForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.StudentSpec})">
            <summary>
            It will filter students according to the parameters sent in <paramref name="paginationParams"/>
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="paginationParams"/> is null, it is thrown.</exception>
            <param name="paginationParams">Filtering object.</param>
            <returns>Student information that can be seen by admin.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.GetStudentsForCurrentMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.StudentSpec})">
            <summary>
            Brings the students of the mentor who has entered.
            </summary>
             <exception cref="T:System.ArgumentNullException">If the mentor does not enter, it is thrown..</exception>
            <param name="paginationParams">Filtering object.</param>
            <returns>Brings the students for whom the mentor is responsible.</returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.GetStudentForAdminAsync(System.Guid)">
            <summary>
            Get student information for admin by <paramref name="studentId"/>
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.GetStudentForMentorAsync(System.Guid)">
            <summary>
            Brings the student who gave the <paramref name="studentId"/> of the logged in mentor..
            </summary>
            <param name="studentId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.GetCurrentUserProfileAsync">
            <summary>
            Brings instant user's profile information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.AddStudentAsync(Milvasoft.SampleAPI.DTOs.StudentDTOs.AddStudentDTO)">
            <summary>
            Maps <paramref name="addStudentDTO"/> to <c><b>Student</b></c>  object and adds that product to repository.
            </summary>
            <param name="addStudentDTO">Student to be added.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.UpdateStudentByAdminAsync(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByAdminDTO,System.Guid)">
            <summary>
            Updates single student which that equals <paramref name="updateStudentDTO"/> in repository by <paramref name="updateStudentDTO"/>'s properties by mentor.
            </summary>
            <param name="updateStudentDTO">Student to be updated.</param>
            <param name="Id">Id of student to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.UpdateStudentByMentorAsync(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentByMentorDTO,System.Guid)">
            <summary>
            Updates single student which that equals <paramref name="updateStudentDTO"/> in repository by <paramref name="updateStudentDTO"/>'s properties by mentor.
            </summary>
            <param name="updateStudentDTO">Student to be updated.</param>
            <param name="Id">Id of student to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.UpdateCurrentStudentAsync(Milvasoft.SampleAPI.DTOs.StudentDTOs.UpdateStudentDTO)">
            <summary>
            The student can update himself.
            </summary>
            <param name="updateStudentDTO"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.DeleteStudentsAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete students by <paramref name="studentIds"/>.
            </summary>
            <param name="studentIds"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.StudentService.UpdateImageAsync(Milvasoft.SampleAPI.DTOs.ImageUploadDTO)">
            <summary>
            Updates picture of student.
            </summary>
            <param name="imageUploadDTO"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService">
            <summary>
            UsefulLink service.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.#ctor(Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{Milvasoft.SampleAPI.Entity.UsefulLink,System.Guid,Milvasoft.SampleAPI.Data.EducationAppDbContext})">
            <summary>
            Performs constructor injection for repository interfaces used in this service.
            </summary>
            <param name="usefulLinkRepository"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.GetUsefulLinksForStudentAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Get links for student.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.GetUsefulLinksForAdminAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Get links for admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.GetUsefulLinksForMentorAsync(Milvasoft.SampleAPI.DTOs.PaginationParamsWithSpec{Milvasoft.SampleAPI.Spec.UsefulLinkSpec})">
            <summary>
            Get link for mentor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.GetUsefulLinkForStudentAsync(System.Guid)">
            <summary>
            Get link by <paramref name="usefulLinkId"/>   
            </summary>
            <param name="usefulLinkId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.GetUsefulLinkForAdminAsync(System.Guid)">
            <summary>
            Get useful link for admin by <paramref name="usefulLinkId"/>
            </summary>
            <param name="usefulLinkId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.GetUsefulLinkForMentorAsync(System.Guid)">
            <summary>
            Get useful link for mentor by <paramref name="usefulLinkId"/>
            </summary>
            <param name="usefulLinkId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.AddUsefulLinkAsync(Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.AddUsefulLinkDTO)">
            <summary>
            Maps <paramref name="addUsefulLinkDTO"/> to <c><b>Useful Link</b></c>  object and adds that product to repository.
            </summary>
            <param name="addUsefulLinkDTO">Useful Link to be added.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.UpdateUsefulLinkAsync(Milvasoft.SampleAPI.DTOs.UsefulLinkDTOs.UpdateUsefulLinkDTO)">
            <summary>
            Updates single link which that equals <paramref name="addUsefulLinkDTO"/> in repository by <paramref name="addUsefulLinkDTO"/>'s properties.
            </summary>
            <param name="addUsefulLinkDTO">Link to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Services.Concrete.UsefulLinkService.DeleteUsefulLinksAsync(System.Collections.Generic.List{System.Guid})">
            <summary>
            Delete links by <paramref name="usefulLinkIds"/>
            </summary>
            <param name="usefulLinkIds"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Spec.Abstract.IBaseSpec`1">
            <summary>
            <para><b>EN: </b>Filtering <typeparamref name="TEntity"/> object lists.</para>
            <para><b>TR: </b><typeparamref name="TEntity"/> nesne listelerini filtreleme.</para>
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.Abstract.IBaseSpec`1.GetFilteredEntities(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para><b>EN: </b>Filtering TEntity list by  with requested properties.</para>
            <para><b>TR: </b>TEntity listesi, istenen özelliklere göre filtreleniyor.</para>
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.Abstract.IBaseSpec`1.ToExpression">
            <summary>
            Converts spesifications to expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Spec.AnnouncementSpec">
            <summary>
            Filtering announcement object lists.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AnnouncementSpec.Title">
            <summary>
            Filtering by Tittle of Announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AnnouncementSpec.Description">
            <summary>
            Filtering by Description of Announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AnnouncementSpec.IsFixed">
            <summary>
            Filtering by IsFixed of Announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AnnouncementSpec.MentorId">
            <summary>
            Filtering by MentorId of Announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AnnouncementSpec.AnnouncementLowerDate">
            <summary> 
            Low date of announcement.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AnnouncementSpec.AnnouncementTopDate">
            <summary> 
            Top date of announcement.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.AnnouncementSpec.GetFilteredEntities(System.Collections.Generic.IEnumerable{Milvasoft.SampleAPI.Entity.Announcement})">
            <summary>
            Filtering Announcement list by  with requested properties.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.AnnouncementSpec.ToExpression">
            <summary>
            Converts spesifications to expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Spec.AssignmentSpec">
            <summary>
            Filtering assignment object lists.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AssignmentSpec.Title">
            <summary>
            Tittle of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AssignmentSpec.Level">
            <summary>
            Difficulty level of the assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AssignmentSpec.Rules">
            <summary>
            Rules of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AssignmentSpec.MaxDeliveryDay">
            <summary> 
            The maximum time that the assignment will be delivered.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AssignmentSpec.ProfessionId">
            <summary>
            The profession Id of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AssignmentSpec.AssignmentLowerDate">
            <summary> 
            Low date of assignment.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.AssignmentSpec.AssignmentTopDate">
            <summary> 
            Top date of assignment.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.AssignmentSpec.GetFilteredEntities(System.Collections.Generic.IEnumerable{Milvasoft.SampleAPI.Entity.Assignment})">
            <summary>
            Filtering Assignment list by  with requested properties.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.AssignmentSpec.ToExpression">
            <summary>
            Converts spesifications to expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Spec.MentorSpec">
            <summary>
            Filtering profession object lists.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.MentorSpec.Name">
            <summary>
            Mentor name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.MentorSpec.Surname">
            <summary>
            Mentor surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.MentorSpec.MentorLowDate">
            <summary> 
            Low date of mentor.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.MentorSpec.MentorTopDate">
            <summary> 
            Top date of mentor.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.MentorSpec.GetFilteredEntities(System.Collections.Generic.IEnumerable{Milvasoft.SampleAPI.Entity.Mentor})">
            <summary>
            Filtering Assignment list by  with requested properties.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.MentorSpec.ToExpression">
            <summary>
            Converts spesifications to expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Spec.ProfessionSpec">
            <summary>
            Filtering profession object lists.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.ProfessionSpec.Name">
            <summary>
            Name of profession.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.ProfessionSpec.ProfessionLowDate">
            <summary> 
            Low date of profession.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.ProfessionSpec.ProfessionTopDate">
            <summary> 
            Top date of profession.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.ProfessionSpec.GetFilteredEntities(System.Collections.Generic.IEnumerable{Milvasoft.SampleAPI.Entity.Profession})">
            <summary>
            Filtering profession list by  with requested properties.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.ProfessionSpec.ToExpression">
            <summary>
            Converts spesifications to expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Spec.QuestionSpec">
            <summary>
            Filtering question object lists.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.QuestionSpec.Title">
            <summary>
            Tittle of question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.QuestionSpec.IsUseful">
            <summary>
            Is the question useful?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.QuestionSpec.WillShown">
            <summary>
            Will the question be shown as a useful question?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.QuestionSpec.ProfessionId">
            <summary>
            Profession ıd of the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.QuestionSpec.StudentId">
            <summary>
            Id of the student who asked the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.QuestionSpec.MentorId">
            <summary>
            Id of the mentor answering the question.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.QuestionSpec.QuestionLowDate">
            <summary> 
            Low date of quesiton.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.QuestionSpec.QuestionTopDate">
            <summary> 
            Top date of question.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.QuestionSpec.GetFilteredEntities(System.Collections.Generic.IEnumerable{Milvasoft.SampleAPI.Entity.Question})">
            <summary>
            Filtering question list by  with requested properties.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.QuestionSpec.ToExpression">
            <summary>
            Converts spesifications to expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Spec.StudentSpec">
            <summary>
            Filtering student object list.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.Name">
            <summary>
            Student's name.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.Surname">
            <summary>
            Student's surname.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.University">
            <summary>
            Student's university.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.Age">
            <summary>
            Age of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.IsConfidentialityAgreementSigned">
            <summary>
            Did the student sign the contract?
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.GraduationStatus">
            <summary>
            Education status of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.GraduationScore">
            <summary>
            Gradution score of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.ProfessionId">
            <summary>
            Profession id of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.MentorId">
            <summary>
            Mentor id of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.StudentLowDate">
            <summary> 
            Low date of student.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.StudentSpec.StudentTopDate">
            <summary> 
            Top date of student.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.StudentSpec.GetFilteredEntities(System.Collections.Generic.IEnumerable{Milvasoft.SampleAPI.Entity.Student})">
            <summary>
            Filtering question list by  with requested properties.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.StudentSpec.ToExpression">
            <summary>
            Converts spesifications to expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Spec.UsefulLinkSpec">
            <summary>
            Filtering Useful Link object list.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.UsefulLinkSpec.Title">
            <summary>
            Tittle of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.UsefulLinkSpec.ProfessionId">
            <summary>
            Profession id of link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.UsefulLinkSpec.UsefulLinkLowDate">
            <summary> 
            Low date of useful link.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Spec.UsefulLinkSpec.UsefulLinkTopDate">
            <summary> 
            Top date of useful link.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.UsefulLinkSpec.GetFilteredEntities(System.Collections.Generic.IEnumerable{Milvasoft.SampleAPI.Entity.UsefulLink})">
            <summary>
            Filtering question list by  with requested properties.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Spec.UsefulLinkSpec.ToExpression">
            <summary>
            Converts spesifications to expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.AllowedFileExtensions">
            <summary>
            <para><b>EN: </b> Allowed file extensions for media files. </para>
            <para><b>TR: </b> Medya dosyaları için izin verilen uzantılar.  </para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.AllowedFileExtensions.FileType">
            <summary>
            <para><b>EN: </b> File type of media file.  </para>
            <para><b>TR: </b> Medya dosyasının dosya tipi. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.AllowedFileExtensions.AllowedExtensions">
            <summary>
            <para><b>EN: </b> Allowed extensions for this media type.  </para>
            <para><b>TR: </b> Bu medya tipi için izin verilen uzantılar. </para>
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidateIdParameterAttribute">
            <summary>
            Specifies that the class or method that this attribute is applied to requires the specified the valid id.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidateIdParameterAttribute.#ctor">
            <summary>
            Constructor of <see cref="T:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidateIdParameterAttribute"/> for localization.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidateIdParameterAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
            <param name="next"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidateStringParameterAttribute">
            <summary>
            Specifies that the class or method that this attribute is applied to requires the specified prevent string injection attacks and min/max length checks.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidateStringParameterAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor of <see cref="T:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidateStringParameterAttribute"/> for localization.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidateStringParameterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidationFilterAttribute">
            <summary>
             Provides the attribute validation exclude opportunity.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ActionFilters.OValidationFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Performs when action executing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Attributes.ValidationAttributes.OValidateDecimalAttribute">
            <summary>
            Determines minimum decimal value.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ValidationAttributes.OValidateDecimalAttribute.#ctor">
            <summary>
            Constructor of atrribute.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ValidationAttributes.OValidateDecimalAttribute.#ctor(System.Int32)">
            <summary>
            Constructor of atrribute.
            </summary>
            <param name="minValue"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Attributes.ValidationAttributes.OValidateIdAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified the valid id.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ValidationAttributes.OValidateIdAttribute.#ctor">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Attributes.ValidationAttributes.OValidateStringAttribute">
            <summary>
            Specifies that the class or property that this attribute is applied to requires the specified prevent string injection attacks and min/max length checks.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ValidationAttributes.OValidateStringAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Attributes.ValidationAttributes.OValidateStringAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="minimumLength">The minimum length, inclusive.  It may not be negative.</param>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.EducationLogger">
            <summary>
            The education project logger class.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.#ctor(Milvasoft.Helpers.Mail.IMilvaMailSender)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.SampleAPI.Utils.EducationLogger"/>
            </summary>
            <param name="milvaMailSender"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogVerbose(System.String)">
            <summary>
            Saves the log at debug level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogDebug(System.String)">
            <summary>
            Saves the log at debug level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogError(System.String)">
            <summary>
            Saves the log at error level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogInfo(System.String)">
            <summary>
            Saves the log at info level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogWarning(System.String)">
            <summary>
            Saves the log at warn level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogFatal(System.String)">
            <summary>
            Saves the log at fatal level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogFatal(System.String,Milvasoft.Helpers.Enums.MailSubject)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubjectsEnum"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogFatalAsync(System.String,Milvasoft.Helpers.Enums.MailSubject)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubjectsEnum"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogFatal(System.String,System.String)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubjectsEnum"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.LogFatalAsync(System.String,System.String)">
            <summary>
            Saves the log at fatal level. And sends mail to producer.
            </summary>
            <param name="message"></param>
            <param name="mailSubjectsEnum"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.Write(Milvasoft.Helpers.DependencyInjection.SeriLogEventLevel,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="seriLogEventLevel"></param>
            <param name="messageTemplate"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.Write(Milvasoft.Helpers.DependencyInjection.SeriLogEventLevel,System.Exception,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="seriLogEventLevel"></param>
            <param name="exception"></param>
            <param name="messageTemplate"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.Write(Milvasoft.Helpers.DependencyInjection.SeriLogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="seriLogEventLevel"></param>
            <param name="messageTemplate"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.EducationLogger.Write(Milvasoft.Helpers.DependencyInjection.SeriLogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="seriLogEventLevel"></param>
            <param name="exception"></param>
            <param name="messageTemplate"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.GlobalConstants">
            <summary>
            Global constants.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.RootPath">
            <summary>
            <para><b>EN: </b>Rootpath of application. </para>
            <para><b>TR: </b>Uygulamanın kök yolu.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.Processes">
            <summary>m
            <para><b>EN: </b>Process list.</para>
            <para><b>TR: </b>İşlem listesi.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.AllowedFileExtensions">
            <summary>
            <para><b>EN: </b> Allowed file extensions for media files. </para>
            <para><b>TR: </b> Medya dosyaları için izin verilen uzantılar.  </para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.StringBlacklist">
            <summary>
            <para><b>EN: </b> Invalid strings for prevent hacking or someting ;)  </para>
            <para><b>TR: </b> Hacking veya başka bir şeyi önlemek için geçersiz string değerler ;) </para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.InstitutionId">
            <summary>
             <para><b>EN: </b> Id of Institution.  </para>
             <para><b>TR: </b> İşletmenin Id'si. </para>
             </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.ThumbnailSizes">
            <summary>
            <para><b>EN: </b> Thumbnail file size.  </para>
            <para><b>TR: </b> Thumbnail dosyalarının boyutu. </para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.BackupsFolderPath">
            <summary>
            <para><b>EN: </b>Path of "Media Library" folder in wwwroot folder.  </para>
            <para><b>TR: </b>Wwwroot klasöründeki "Media Library" klasörünün yolu.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.UserActivityLogsBackupsPath">
            <summary>
            <para><b>EN: </b>Path of "Media Library" folder in wwwroot folder.  </para>
            <para><b>TR: </b>Wwwroot klasöründeki "Media Library" klasörünün yolu.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.MediaLibraryPath">
            <summary>
            <para><b>EN: </b>Path of "Media Library" folder in wwwroot folder.  </para>
            <para><b>TR: </b>Wwwroot klasöründeki "Media Library" klasörünün yolu.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.ImageLibraryPath">
            <summary>
            <para><b>EN: </b>Path of "Image Library" folder in wwwroot folder.   </para>
            <para><b>TR: </b>Wwwroot klasöründeki "Image Library" klasörünün yolu.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.ARModelLibraryPath">
            <summary>
            <para><b>EN: </b>Path of "ARModel Library" folder in wwwroot folder. </para>
            <para><b>TR: </b>Wwwroot klasöründeki "ARModel Library" klasörünün yolu.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.VideoLibraryPath">
            <summary>
            <para><b>EN: </b>Path of "Video Library" folder in wwwroot folder.</para>
            <para><b>TR: </b>Wwwroot klasöründeki "Video Library" klasörünün yolu.</para>
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.DocumentLibraryPath">
            <summary>
            <para><b>EN: </b>Path of "Video Library" folder in wwwroot folder.</para>
            <para><b>TR: </b>Wwwroot klasöründeki "Video Library" klasörünün yolu.</para>
            </summary>
        </member>
        <member name="F:Milvasoft.SampleAPI.Utils.GlobalConstants.Zero">
            <summary>
            Zero
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.MailContent">
            <summary>
            Mail content of injection mails.
            </summary>
        </member>
        <member name="P:Milvasoft.SampleAPI.Utils.GlobalConstants.DefaultNumberOfPeople">
            <summary>
            
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.HelperExtensions">
            <summary>
            Helper extensions methods for Ops!yon Project.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.SaveImageToServerAsync``2(Microsoft.AspNetCore.Http.IFormFile,``0)">
            <summary>
            <para><b>EN: </b>Save uploaded IFormFile file to server. Target Path will be : ".../wwwroot/Media Library/Image Library/<paramref name="entity"></paramref>.Id"</para>
            <para><b>TR: </b>Yüklenen IFormFile dosyasını sunucuya kaydedin. Hedef Yol: "... / wwwroot / Media Library / Image Library / <paramref name =" entity "> </paramref> .Id" olacaktır</para>
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="file"> Uploaded file in entity. </param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.SaveVideoToServerAsync``2(Microsoft.AspNetCore.Http.IFormFile,``0)">
            <summary>
            <para><b>EN: </b>Save uploaded IFormFile file to server. Target Path will be : ".../wwwroot/Media Library/Image Library/<paramref name="entity"></paramref>.Id"</para>
            <para><b>TR: </b>Yüklenen IFormFile dosyasını sunucuya kaydedin. Hedef Yol: "... / wwwroot / Media Library / Image Library / <paramref name =" entity "> </paramref> .Id" olacaktır</para>
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="file"> Uploaded file in entity. </param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.GetFileUrlFromPath(System.String,Milvasoft.Helpers.FileOperations.Enums.FileType)">
            <summary>
            <para><b>EN: </b>Returns the path of the uploaded file.</para>
            <para><b>TR: </b>Yüklenen dosyanın yolunu döndürür.</para>
            </summary>
            <param name="originalImagePath"> Uploaded file. </param>
            <param name="fileType"> Uploaded file type. (e.g image,video,sound) </param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ConvertToFormFile(System.String)">
            <summary>
            Converts data URI formatted base64 string to IFormFile.
            </summary>
            <param name="milvaBase64"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.CheckList``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Checks guid list. If list is null or empty return default(<typeparamref name="TDTO"/>). Otherwise invoke <paramref name="returnFunc"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDTO"></typeparam>
            <param name="toBeCheckedList"></param>
            <param name="returnFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.CheckObject``2(``0,System.Func{``0,``1})">
            <summary>
            Checks guid object. If is null return default(<typeparamref name="TDTO"/>). Otherwise invoke <paramref name="returnFunc"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDTO"></typeparam>
            <param name="toBeCheckedObject"></param>
            <param name="returnFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.PreparePaginationDTO``3(``0,System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Func{Milvasoft.Helpers.DataAccess.EfCore.IncludeLibrary.IIncludable{``1},Milvasoft.Helpers.DataAccess.EfCore.IncludeLibrary.IIncludable})">
            <summary>
            Prepares pagination dto according to pagination parameters.
            </summary>
            <typeparam name="TRepository"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="repository"></param>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProperty"></param>
            <param name="orderByAscending"></param>
            <param name="condition"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.PreparePaginationDTO``2(Milvasoft.Helpers.DataAccess.EfCore.Abstract.IBaseRepository{``0,``1,Milvasoft.SampleAPI.Data.EducationAppDbContext},System.Int32,System.Int32,System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{Milvasoft.Helpers.DataAccess.EfCore.IncludeLibrary.IIncludable{``0},Milvasoft.Helpers.DataAccess.EfCore.IncludeLibrary.IIncludable})">
            <summary>
            Prepares pagination dto according to pagination parameters.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="repository"></param>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProperty"></param>
            <param name="orderByAscending"></param>
            <param name="condition"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.PreparePaginationDTO``3(``0,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Func{Milvasoft.Helpers.DataAccess.EfCore.IncludeLibrary.IIncludable{``1},Milvasoft.Helpers.DataAccess.EfCore.IncludeLibrary.IIncludable})">
            <summary>
            Prepares pagination dto according to pagination parameters.
            </summary>
            <typeparam name="TRepository"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="repository"></param>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByKeySelector"></param>
            <param name="orderByAscending"></param>
            <param name="condition"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ThrowIfParameterIsNull(System.Object,System.String)">
            <summary>
            Throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> if <paramref name="parameterObject"/> is null.
            </summary>
            <param name="parameterObject"></param>
            <param name="localizerKey"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ThrowIfListIsNullOrEmpty(System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> if <paramref name="list"/> is null or empty.
            </summary>
            <param name="list"></param>
            <param name="localizerKey"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,Milvasoft.Helpers.FileOperations.Enums.FileType)">
            <summary>
            Validates file. 
            </summary>
            <param name="file"></param>
            <param name="fileType"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ThrowIfParameterIsNullOrEmpty``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> if <paramref name="list"/> is null or empty.
            </summary>
            <param name="list"></param>
            <param name="localizerKey"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ThrowIfListIsNullOrEmpty(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> if <paramref name="list"/> is null or empty.
            </summary>
            <param name="list"></param>
            <param name="localizerKey"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ThrowIfListIsNotNullOrEmpty(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> if <paramref name="list"/> is not null or empty.
            </summary>
            <param name="list"></param>
            <param name="message"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.GetActivityResponseAsync(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{Microsoft.AspNetCore.Identity.IdentityResult},System.String,System.String)">
            <summary>
            Gets identity result as object response.
            </summary>
            <param name="asyncTask"></param>
            <param name="successMessage"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ThrowIfNullForGuidObject``1(``0,System.String)">
            <summary>
            Throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> if <paramref name="entity"/> is null.
            </summary>
            <param name="entity"></param>
            <param name="localizerKey"></param>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.HelperExtensions.ThrowIfNullForIntObject``1(``0,System.String)">
            <summary>
            Throwns <see cref="T:Milvasoft.Helpers.Exceptions.MilvaUserFriendlyException"/> if <paramref name="entity"/> is null.
            </summary>
            <param name="entity"></param>
            <param name="localizerKey"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Swagger.CustomAttributeOperationFilter">
             <summary>
            Swagger document creation utility classs
             </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Swagger.CustomAttributeOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies filter on swagger document..
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Swagger.CustomAttributeSchemaFilter">
             <summary>
            Swagger document creation utility classs
             </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Swagger.CustomAttributeSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            Applies filter on swagger document..
            </summary>
            <param name="swaggerSchema"></param>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Swagger.EntityDocumentFilter">
             <summary>
            Swagger document creation utility classs
             </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Swagger.EntityDocumentFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            Applies filter on swagger document..
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Swagger.ReplaceVersionWithExactValueInPathFilter">
            <summary>
            Replaces version parameter.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Swagger.ReplaceVersionWithExactValueInPathFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            Applies configuration.
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Swagger.RequestHeaderFilter">
            <summary>
            Operation filter to add the requirement of the custom header
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Swagger.RequestHeaderFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies configuration.
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Swagger.SwaggerExcludeAttribute">
            <summary>
            Excludes property from swagger documentation.
            </summary>
        </member>
        <member name="T:Milvasoft.SampleAPI.Utils.Swagger.SwaggerPropertyExcludeFilter">
            <summary>
            Deletes properties marked with the SwaggerExclude attribute from the swagger documentation.
            </summary>
        </member>
        <member name="M:Milvasoft.SampleAPI.Utils.Swagger.SwaggerPropertyExcludeFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            Applies configuration.
            </summary>
            <param name="schema"></param>
            <param name="context"></param>
        </member>
    </members>
</doc>
