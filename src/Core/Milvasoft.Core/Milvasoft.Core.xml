<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.Core</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.Core.Abstractions.Cache.ICacheAccessor">
            <summary>
            Provides cache access methods.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.IsConnected">
            <summary>
            Gets redis client connection state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.GetAsync``1(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.GetAsync(System.String,System.Type)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.GetAsync(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.GetAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets <paramref name="keys"/> values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.SetAsync(System.String,System.Object)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Sets <paramref name="value"/> to <paramref name="key"/> with <paramref name="expiration"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.RemoveAsync(System.String)">
            <summary>
            Removes <paramref name="key"/> and value.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.RemoveAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes <paramref name="keys"/> and value.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExistsAsync(System.String)">
            <summary>
            Checks if there is a <paramref name="key"/> in database. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExpireAsync(System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Get``1(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Get(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Get``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets <paramref name="keys"/> values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Set(System.String,System.String)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Set``1(System.String,``0)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Set(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Sets <paramref name="value"/> to <paramref name="key"/> with <paramref name="expiration"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Remove(System.String)">
            <summary>
            Removes <paramref name="key"/> and value.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExists(System.String)">
            <summary>
            Checks if there is a <paramref name="key"/> in database. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExpire(System.String,System.TimeSpan)">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExpire(System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Cache.ICacheAccessor`1">
            <summary>
            Cache accessor generic implementation. 
            </summary>
            <typeparam name="TAccessor"></typeparam>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Cache.ICacheOptions`1">
            <summary>
            Makes IOptions cache aware.
            </summary>
            <typeparam name="TCacheOptions"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Cache.ICacheOptions`1.AccessorLifetime">
            <summary>
            Caching accessor service lifetime.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IFileDto">
            <summary>
            Abstraction for multiple file upload process.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IFileDto.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IFileDto.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IFileEntity">
            <summary>
             Abstraction for multiple file upload process.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IFileEntity.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IFileEntity.FilePath">
            <summary>
            Path of file.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IInterceptable">
            <summary>
            It is the dummy interface that marks which class's methods can be intercepted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IMapper">
            <summary>
            Responsible interface for mapping from the source object to the object we want to access.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``1(System.Object)">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``1(System.Object,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``1(System.Object,System.Int32,System.Boolean,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="preserveReference"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``2(``0)">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``2(``0,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``2(``0,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``2(``0,System.Int32,System.Boolean,System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="preserveReference"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IMilvaBuilder">
            <summary>
            Dummy class for builder implementations.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IMilvaBuilder.Services">
            <summary>
            Service collection.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IMilvaLogger">
            <summary>
            Logger interface for DI. If you want to get logs from library side errors implement this interface and register to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Log(System.String)">
            <summary>
            Abstraction where you can make logs such as database logging.
            </summary>
            <param name="logEntry">Log object json string.</param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.LogAsync(System.String)">
            <summary>
            Abstraction where you can make logs such as database logging.
            </summary>
            <param name="logEntry">Log object json string</param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Verbose(System.String)">
            <summary>
            Write a log event with verbose level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the verbose level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the verbose level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Debug(System.String)">
            <summary>
            Write a log event with debug level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the debug level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the debug level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Information(System.String)">
            <summary>
            Write a log event with information level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the information level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the information level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Warning(System.String)">
            <summary>
            Write a log event with warning level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the warning level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the warning level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Error(System.String)">
            <summary>
            Write a log event with error level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the error level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the error level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Fatal(System.String)">
            <summary>
            Write a log event with fatal level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the fatal level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the fatal level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IMilvaOptions">
            <summary>
            Dummy interface for options implementations.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IMilvaOptions.SectionName">
            <summary>
            Configuration section name.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Localization.ILocalizationManager">
            <summary>
            It is the manager that provides access to localization resources. You can use this interface for creating new custom managers. Or you can use ready-made milva managers. 
            <para> For ready made managers see here : https://github.com/Milvasoft/Milvasoft/tree/master/Localization/Milvasoft.Localization.Redis </para> 
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Item(System.String)">
            <summary>
            Gets the string resource with the given key.
            </summary>
            <param name="key"></param>
            <returns>The string resource as a <see cref="T:Milvasoft.Types.Classes.LocalizedValue"/>.</returns>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Item(System.String,System.Object[])">
            <summary>
            Gets the string resource with the given key and formatted with the supplied arguments.
            </summary>
            <param name="key">The key of the string resource.</param>
            <param name="arguments">The values to format the string with.</param>
            <returns>The formatted string resource as a <see cref="T:Milvasoft.Types.Classes.LocalizedValue"/>.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.GetAllStrings(System.Boolean)">
            <summary>
            Gets all string resources.
            </summary>
            <param name="includeParentCultures">
            A <see cref="T:System.Boolean"/> indicating whether to include strings from parent cultures.
            </param>
            <returns>The strings.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Set(System.String,System.String)">
            <summary>
            Sets the given <paramref name="value"/> with given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Set(System.String,System.String,System.String)">
            <summary>
            Sets the given <paramref name="value"/> with given <paramref name="key"/> in given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Remove(System.String)">
            <summary>
            Removes value from resource with given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Remove(System.String,System.String)">
            <summary>
            Removes value from resource with given <paramref name="key"/> with given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.SetAsync(System.String,System.String)">
            <summary>
            Sets the given <paramref name="value"/> with given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.SetAsync(System.String,System.String,System.String)">
            <summary>
            Sets the given <paramref name="value"/> with given <paramref name="key"/> in given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.RemoveAsync(System.String)">
            <summary>
            Removes value from resource with given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.RemoveAsync(System.String,System.String)">
            <summary>
            Removes value from resource with given <paramref name="key"/> with given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions">
            <summary>
            Milva localization options.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.ManagerLifetime">
            <summary>
            Localization manager service lifetime.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.KeyFormat">
            <summary>
            Key format
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.KeyFormatMethod">
            <summary>
            Formatted key creator method.
            Default is: (string key) => string.Format(config.KeyFormat, key);
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.UseInMemoryCache">
            <summary>
            LocalizationMemoryCache helps speeding up getting localized values from data stores.
            It is helpful to set to false during development mode and to true in production.
            Default value: false.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.MemoryCacheEntryOptions">
            <summary>
            Memory cache entry options.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer">
            <summary>
            Represents a service that provides localized strings.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.Item(System.String)">
            <summary>
            Gets the string resource with the given key.
            </summary>
            <param name="key"></param>
            <returns>The string resource as a <see cref="T:Milvasoft.Types.Classes.LocalizedValue"/>.</returns>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.Item(System.String,System.Object[])">
            <summary>
            Gets the string resource with the given key and formatted with the supplied arguments.
            </summary>
            <param name="key">The key of the string resource.</param>
            <param name="arguments">The values to format the string with.</param>
            <returns>The formatted string resource as a <see cref="T:Milvasoft.Types.Classes.LocalizedValue"/>.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.GetAllStrings(System.Boolean)">
            <summary>
            Gets all string resources.
            </summary>
            <param name="includeParentCultures">
            A <see cref="T:System.Boolean"/> indicating whether to include strings from parent cultures.
            </param>
            <returns>The strings.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.GetWithCulture(System.String,System.String)">
            <summary>
            Gets string resource with given <paramref name="key"/> with given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <returns>The string.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.GetWithCulture(System.String,System.String,System.Object[])">
            <summary>
            Gets string resource with given <paramref name="key"/> with given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <param name="arguments"></param>
            <returns>The string.</returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasCreator">
            <summary>
            Determines entity has creator.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasCreator.CreatorUserName">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasDeleter">
            <summary>
            Determines entity has deleter.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasDeleter.DeleterUserName">
            <summary>
            Deleter of entity.
            </summary>er
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModifier">
            <summary>
            Determines entity has modifier.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModifier.LastModifierUserName">
            <summary>
            Last modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.Auditing.ISoftDeletable">
            <summary>
            Determines entity has deletion date.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.ISoftDeletable.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.ISoftDeletable.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IAuditable`1">
            <summary>
            Determines entity is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.IAuditable`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IAuditableWithoutUser`1">
            <summary>
            Determines entity is auditable without modifier.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.IAuditableWithoutUser`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IBaseEntity`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IBaseEntity">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IEntityBase`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.IEntityBase`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IMilvaEntity">
            <summary>
            Dummy interface given for constraint
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.IMilvaEntity.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.ICreationAuditable`1">
            <summary>
            Determines entity's creation is auditable with user information.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.ICreationAuditable`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.ICreationAuditableWithoutUser`1">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.ICreationAuditableWithoutUser`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IFullAuditable`1">
            <summary>
            Determines entity is fully auditable with user information.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IFullAuditableWithoutUser`1">
            <summary>
            Determines entity is fully auditable.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntity`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntity`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntity`1.LastModifierUserName">
            <summary>
            Modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntityWithoutUser`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntityWithoutUser`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntity`1">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntity`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntity`1.CreatorUserName">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntityWithoutUser`1">
            <summary>
            Determines entity's creation is auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntityWithoutUser`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDto`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDto`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDto`1.LastModifierUserName">
            <summary>
            Modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDtoWithoutUser`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDtoWithoutUser`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDto`1">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDto`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDto`1.CreatorUserName">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDtoWithoutUser`1">
            <summary>
            Determines entity's creation is auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDtoWithoutUser`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDto`1">
            <summary>
            Determines entity is fully auditable soft deletable entity.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDto`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDto`1.DeleterUserName">
            <summary>
            Deleter of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDto`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDtoWithoutUser`1">
            <summary>
            Determines entity is fully auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDtoWithoutUser`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDtoWithoutUser`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntity`1">
            <summary>
            Determines entity is fully auditable soft deletable entity.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntity`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntity`1.DeleterUserName">
            <summary>
            Deleter of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntity`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntityWithoutUser`1">
            <summary>
            Determines entity is fully auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntityWithoutUser`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntityWithoutUser`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.BaseDto`1">
            <summary>
            Base dto for all of dtos.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.BaseDto`1.Id">
            <summary>
            Unique identifier for this dto.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.BaseDto`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Core.EntityBases.Concrete.BaseDto`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.DtoBase`1">
            <summary>
            Base dto for all of dtos.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.DtoBase`1.Id">
            <summary>
            Unique identifier for this dto.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.DtoBase`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Core.EntityBases.Concrete.DtoBase`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.DtoBase">
            <summary>
            Base dto for all of dtos.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.DtoBase.#ctor">
            <summary>
            Initializes new instance.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.DtoBase.GetUpdatableProperties">
            <summary>
            Returns a collection of PropertyInfo objects that represent properties of the DTO that implements <see cref="T:Milvasoft.Types.Structs.IUpdateProperty"/>.
            </summary>
            <returns>A collection of PropertyInfo objects representing the updatable properties of the DTO.</returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1">
            <summary>
            Base entity for all of entities.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.EntityBase`1">
            <summary>
            Base entity for all of entities.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.EntityBase`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.EntityBase`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.EntityBase">
            <summary>
            Base entity for all of entities.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.EntityBase.#ctor">
            <summary>
            Initializes new instance.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1">
            <summary>
            Tenant base.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1.TenancyName">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1.Name">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1.ConnectionString">
            <summary>
            ENCRYPTED connection string of the tenant database.
            Can be null if this tenant is stored in host database.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1.IsActive">
            <summary>
            Is this tenant active?
            If as tenant is not active, no user of this tenant can use the application.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaBaseTenant`1">
            <summary>
            Tenant base.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1">
            <summary>
            Tenant base.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1.TenancyName">
            <summary>
            Tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1.Name">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1.ConnectionString">
            <summary>
            ENCRYPTED connection string of the tenant database.
            Can be null if this tenant is stored in host database.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1.IsActive">
            <summary>
            Is this tenant active?
            If as tenant is not active, no user of this tenant can use the application.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant">
            <summary>
            Represents a Tenant of the application.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant.Id">
            <summary>
            Id of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant.TenancyName">
            <summary>
            Tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant.BranchNo">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant.SubscriptionExpireDate">
            <summary>
            Represents Tenant's subscription expire date.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant.#ctor">
            <summary>
            Creates a new tenant.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new tenant.
            </summary>
            <param name="tenancyName">UNIQUE name of this Tenant</param>
            <param name="branchNo"></param>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId">
            <summary>
            Fully unique tenant id.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.Empty">
            <summary>
            Creates an empty <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> instance.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.TenancyName">
            <summary>
            Unique tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.BranchNo">
            <summary>
            Branch no of Tenant.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.#ctor(System.String)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <param name="tenantIdString"></param>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.#ctor(System.String,System.Int32)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <param name="tenancyName"></param>
            <param name="branchNo"></param>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.NewTenantId">
            <summary>
            Generates new unique tenant id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.GetHashCode">
            <summary>
            Combines Tenancy Name and BranchNo into a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.GetHashString">
            <summary>
            Returns hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.Equals(System.Object)">
            <summary>
            Compares hashes.
            </summary>
            <param name="obj"></param>
            <returns> If both hash are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.Equals(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Compares hashes.
            </summary>
            <param name="other"></param>
            <returns> If both hash are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.TenancyNameEquals(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Compares <see cref="P:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.TenancyName"/> with <paramref name="other"/>.TenancyName.
            </summary>
            <param name="other"></param>
            <returns> If both TenancyName are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.BranchNoEquals(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Compares <see cref="P:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.BranchNo"/> with <paramref name="other"/>.BranchNo.
            </summary>
            <param name="other"></param>
            <returns> If both BranchNo are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.ToString">
            <summary>
            Returns Tenancy Name and Branch No with '_' seperator 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.ToString(System.String)">
            <summary>
            <para>Supported formats : G , H </para>
            <para>G returns tenancyName and branchNo with '_' seperator</para>
            <para>H returns tenancyName and branchNo and hash with '_' seperator</para>
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.Parse(System.String)">
            <summary>
            Parses <paramref name="str"/> to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.TryParse(System.String)">
            <summary>
            Converts the string representation of a <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> to its string equivalent.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Implicit(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)~System.String">
            <summary>
            Provides implicit casting.
            </summary>
            <param name="tenantId"></param>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Explicit(System.String)~Milvasoft.Core.EntityBases.MultiTenancy.TenantId">
            <summary>
            Provides explicit casting.
            </summary>
            <param name="tenantId"></param>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Equality(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> objects are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Inequality(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> objects are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_LessThan(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are smaller than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_GreaterThan(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are bigger than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_LessThanOrEqual(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are smaller or equal than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_GreaterThanOrEqual(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are bigger or equal than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Increment(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Increases <paramref name="tenantId"/>.BranchNo.
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Decrement(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Decreases <paramref name="tenantId"/>.BranchNo.
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter">
            <summary>
            Provides a type converter to convert string objects to and from <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines <paramref name="sourceType"/> can convert from string.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts <paramref name="value"/>(<see cref="T:System.String"/>) to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines <paramref name="destinationType"/> can convert to string.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaBaseException">
            <summary>
            Base exception class.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Exceptions.MilvaBaseException.ExceptionCode">
            <summary>
            Gets or sets error code.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Exceptions.MilvaBaseException.ExceptionObject">
            <summary>
            Gets or sets object of exception.
            Default value is null.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Exceptions.MilvaBaseException.UseLocalizerKey">
            <summary>
            Variable for exception middleware.
            Default value is true.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaBaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaBaseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaDeveloperException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaDeveloperException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaDeveloperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaDeveloperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaException">
            <summary>
            Defines the Milvasoft Exception Codes.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.Base">
            <summary>
            Defines the UnknownError.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.General">
            <summary>
            Defines the CannotFindEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotFindEntity">
            <summary>
            Defines the CannotFindEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.AddingNewEntityWithExistsId">
            <summary>
            Defines the AddingNewEntityWithExsistId.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.Encryption">
            <summary>
            Defines the EncryptionError.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotFindEnumById">
            <summary>
            Defines the CannotFindEnumById.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotStartRedisServer">
            <summary>
            Defines the CannotStartRedisServer.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.DeletingEntityWithRelations">
            <summary>
            Defines the DeletingEntityWithRelations.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.DeletingInvalidEntity">
            <summary>
            Defines the DeletingInvalidEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.TenancyNameRequired">
            <summary>
            Defines the TenancyNameRequired.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.EmptyList">
            <summary>
            Defines the EmptyList.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidNumericValue">
            <summary>
            Defines the InvalidNumericValue.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidParameter">
            <summary>
            Defines the InvalidParameter.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidStringExpression">
            <summary>
            Defines the InvalidStringExpression.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.NullParameter">
            <summary>
            Defines the NullParameter.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.FeatureNotImplemented">
            <summary>
            Defines the FeatureNotImplemented.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.UpdatingInvalidEntity">
            <summary>
            Defines the UpdatingInvalidEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.NotLoggedInUser">
            <summary>
            Defines the NotLoggedInUser.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.AnotherLoginExists">
            <summary>
            Defines the AnotherLoginExists.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.OldVersion">
            <summary>
            Defines the OldVersion.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidLicence">
            <summary>
            Defines the InvalidLicence.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.ExpiredDemo">
            <summary>
            Defines the ExpiredDemo.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.NeedForceOperation">
            <summary>
            Defines the NeedForceOperation.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotGetResponse">
            <summary>
            Defines the CannotGetResponse.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.IdentityResult">
            <summary>
            Defines the IdentityResult.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotUpdateOrDeleteDefaultRecord">
            <summary>
            Defines the CannotUpdateOrDeleteDefaultRecord.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.Validation">
            <summary>
            Defines the ValidationError.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidRelatedProcess">
            <summary>
            Defines the InvalidRelatedProcess.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.WrongPaginationParams">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.WrongRequestedPageNumber">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.WrongRequestedItemCount">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidTenantId">
            <summary>
            Defines the InvalidTenantId.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaTestException">
            <summary>
            Test exception class.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaTestException"/> class  with a specified error message.
            </remarks>
            <param name="exceptionMessage"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaTestException.#ctor(System.String)">
            <summary>
            Test exception class.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaTestException"/> class  with a specified error message.
            </remarks>
            <param name="exceptionMessage"></param>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="useLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,Milvasoft.Core.Exceptions.MilvaException)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,Milvasoft.Core.Exceptions.MilvaException,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="useLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(Milvasoft.Core.Exceptions.MilvaException)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(Milvasoft.Core.Exceptions.MilvaException,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="exceptionCode"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Boolean,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="useLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaValidationException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaValidationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaValidationException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaValidationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Core.Helpers.CommonHelper">
            <summary>
            Generic collection helper extension methods.
            </summary>
            <summary>
            Common Helper class.
            </summary>
            <summary>
            Helper for filtering.
            </summary>
            <summary>
            Expression extensions.
            </summary>
            <summary>
            Milvasoft library components options extensions.
            </summary>
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks if the collection is null or empty.
            </summary>
            <param name="this">The collection to check.</param>
            <returns>True if the collection is null or empty, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.OrderByProperty``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Orders the source collection by the specified property name.
            </summary>
            <typeparam name="T">The type of the elements in the source collection.</typeparam>
            <param name="source">The source collection to order.</param>
            <param name="propertyName">The name of the property to order by.</param>
            <returns>The ordered source collection.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.OrderByPropertyDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Orders the source collection in descending order by the specified property name.
            </summary>
            <typeparam name="T">The type of the elements in the source collection.</typeparam>
            <param name="source">The source collection to order.</param>
            <param name="propertyName">The name of the property to order by.</param>
            <returns>The ordered source collection in descending order.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToBatches``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Splits the list into batches with the specified batch size.
            </summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
            <param name="list">The list to split into batches.</param>
            <param name="batchSize">The size of each batch.</param>
            <returns>An enumerable of batches.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.UpdateSingletonInstance``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})">
            <summary>
            Updates the singleton implementation instance with the specified update action.
            </summary>
            <typeparam name="TInstance">The type of the singleton instance.</typeparam>
            <param name="services">The service collection.</param>
            <param name="updateAction">The update action to apply to the singleton instance.</param>
            <returns>The updated service collection.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.UpdateSingletonInstance``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``1})">
            <summary>
            Updates the singleton implementation instance with the specified update action.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <typeparam name="TInstance">The type of the singleton instance.</typeparam>
            <param name="services">The service collection.</param>
            <param name="updateAction">The update action to apply to the singleton instance.</param>
            <returns>The updated service collection.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ApplyDateSearch``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Filters the content list by the specified start and end dates.
            </summary>
            <typeparam name="T">The type of the elements in the content list.</typeparam>
            <param name="contentList">The content list to filter.</param>
            <param name="dateProperty">The expression representing the date property.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns>The filtered content list.</returns>
            
            <remarks>
            If a selection has been made between two dates, it will return those between the two dates.
            If only the <paramref name="endDate"/> value exists, it returns those larger than the <paramref name="startDate"/> value.
            If only the <paramref name="startDate"/> value exists, it returns those smaller than the <paramref name="endDate"/> value.
            </remarks>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CreateIsDeletedFalseExpression``1">
            <summary>
            Creates an expression that represents the condition where the IsDeleted property of an entity is false.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>An expression representing the condition where the IsDeleted property is false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.GetEnumDesciption``1(``0)">
            <summary>
            Gets the description attribute value of the specified enum value.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="enumValue">The enum value.</param>
            <returns>The description attribute value of the enum value.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.IsEnumerableType(System.Type)">
            <summary>
            Determines wheter the <paramref name="type"/> is enumerable or not.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.AssignUpdatedProperties``2(``0,``1)">
            <summary>
            Assigns the updated properties of a DTO object to the corresponding properties of an entity object.
            </summary>
            <typeparam name="TEntity">The type of the entity class that implements the <see cref="T:Milvasoft.Core.EntityBases.Abstract.IMilvaEntity"/> interface.</typeparam>
            <typeparam name="TDto">The type of the DTO class that inherits from the <see cref="T:Milvasoft.Core.EntityBases.Concrete.DtoBase"/> class.</typeparam>
            <param name="entity">The entity object to update.</param>
            <param name="dto">The DTO object containing the updated property values.</param>
            <returns>A list of PropertyInfo objects representing the updated properties.</returns>
            <remarks> To find out how this method finds the updated properties, please see <see cref="M:Milvasoft.Core.Helpers.CommonHelper.FindUpdatablePropertiesAndAct``2(``1,System.Action{System.Reflection.PropertyInfo,System.Object})"/>. </remarks>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.FindUpdatablePropertiesAndAct``2(``1,System.Action{System.Reflection.PropertyInfo,System.Object})">
            <summary>
            Finds the updatable properties in the provided DTO object and performs the specified action on each property.
            </summary>
            <typeparam name="TEntity">The type of the entity class that implements the IMilvaEntity interface.</typeparam>
            <typeparam name="TDto">The type of the DTO class that inherits from the DtoBase class.</typeparam>
            <param name="dto">The DTO object from which to find the updatable properties.</param>
            <param name="action">The action to perform on each updatable property. It takes two parameters: the PropertyInfo of the matching property in the entity class, and the value of the property in the DTO object.</param>
            <remarks>
            This method is used to update the entity object with the values of the updatable properties in the DTO object.
            It iterates over the updatable properties in the DTO object and finds the matching property in the entity class.
            If a matching property is found and the property value is an instance of <see cref="T:Milvasoft.Types.Structs.IUpdateProperty"/> and IsUpdated property is true,
            the specified action is performed on the matching property in the entity object.
            </remarks>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CanAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether the specified type can be assigned to the target type. 
            </summary>
            <param name="type">The type to check.</param>
            <param name="targetType">The target type to check against.</param>
            <remarks>
            The <see cref="M:System.Type.IsAssignableTo(System.Type)"/> method returns false in the examples like below. But <see cref="M:Milvasoft.Core.Helpers.CommonHelper.CanAssignableTo(System.Type,System.Type)"/> returns true.
            <code> typeof(SomeClass&lt;&gt;).IsAssignableTo(typeof(ISomeInterface&lt;&gt;)) </code>
            <code> typeof(SomeClass&lt;int&gt;).IsAssignableTo(typeof(ISomeInterface&lt;&gt;)) </code>
            </remarks>
            <returns>True if the specified type can be assigned to the target type; otherwise, false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToGuid(System.Int32)">
            <summary>
            Converts an integer value to a GUID value.
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>The GUID value.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToJson(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts an object to a json string.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="jsonOptions">The json serialization options (optional).</param>
            <returns>The json string representation of the object.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToObject``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts json string to an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to convert to.</typeparam>
            <param name="value">The string value to convert.</param>
            <param name="jsonOptions">The json deserialization options (optional).</param>
            <returns>The deserialized object of type T.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToObject(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts a string to an object of the specified return type.
            </summary>
            <param name="value">The string value to convert.</param>
            <param name="returnType">The return type of the object to convert to.</param>
            <param name="jsonOptions">The json deserialization options (optional).</param>
            <returns>The deserialized object of the specified return type.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.Deserialize(System.Text.Json.JsonElement,System.Type)">
            <summary>
            Deserializes a <see cref="T:System.Text.Json.JsonElement"/> to an object of the specified type.
            </summary>
            <param name="element">The json element to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <returns>The deserialized object of the specified type.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CreateDateSearchExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates an expression based on the provided <paramref name="endDate"/> and <paramref name="startDate"/> values.
            </summary>
            <remarks>
            If both <paramref name="startDate"/> and <paramref name="endDate"/> values are provided, it returns an expression that checks if the date property specified by <paramref name="datePropertySelector"/> is greater than or equal to <paramref name="startDate"/> and less than or equal to <paramref name="endDate"/>.
            If only the <paramref name="endDate"/> value is provided, it returns an expression that checks if the date property specified by <paramref name="datePropertySelector"/> is less than or equal to <paramref name="endDate"/>.
            If only the <paramref name="startDate"/> value is provided, it returns an expression that checks if the date property specified by <paramref name="datePropertySelector"/> is greater than or equal to <paramref name="startDate"/>.
            </remarks>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="endDate">The end date value.</param>
            <param name="startDate">The start date value.</param>
            <param name="datePropertySelector">The selector expression for the date property.</param>
            <returns>The expression representing the date search criteria.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.IsBetween(System.DateTime,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Checks if the given <paramref name="date"/> falls between the specified <paramref name="startTime"/> and <paramref name="endTime"/>.
            </summary>
            <param name="date">The date to check.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="convertTimesToUtc">Indicates whether to convert times to UTC before comparison. Default is true.</param>
            <returns>True if the date falls between the start time and end time, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.IsBetween(System.DateTime,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Checks if the given <paramref name="date"/> with the specified <paramref name="compareTime"/> falls between the <paramref name="startTime"/> and <paramref name="endTime"/>.
            </summary>
            <param name="date">The date to check.</param>
            <param name="compareTime">The time to compare.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="convertTimesToUtc">Indicates whether to convert times to UTC before comparison. Default is true.</param>
            <returns>True if the date with the compare time falls between the start time and end time, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Checks if the given <paramref name="date"/> falls between the specified <paramref name="startDate"/> and <paramref name="endDate"/>.
            </summary>
            <param name="date">The date to check.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns>True if the date falls between the start date and end date, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.IsBetween(System.DateTime,System.TimeSpan,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Checks if the given <paramref name="date"/> with the specified <paramref name="compareTime"/> falls between the <paramref name="startDate"/> and <paramref name="endDate"/>.
            </summary>
            <param name="date">The date to check.</param>
            <param name="compareTime">The time to compare.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="convertTimeToUtc">Indicates whether to convert the compare time to UTC before comparison. Default is true.</param>
            <returns>True if the date with the compare time falls between the start date and end date, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.WithTime(System.DateTime,System.TimeSpan)">
            <summary>
            Sets the time component of the given <paramref name="date"/> to the specified <paramref name="time"/>.
            </summary>
            <param name="date">The date to modify.</param>
            <param name="time">The time to set.</param>
            <returns>A new DateTime object with the same date as the original date and the specified time.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ConvertToUtc(System.TimeSpan)">
            <summary>
            Converts the specified <paramref name="timeSpan"/> to UTC.
            </summary>
            <param name="timeSpan">The time span to convert.</param>
            <returns>The converted time span in UTC.</returns> 
            <remarks>
            Be careful when using this method. Each time you use it, it will repeat the time difference process according to the time zone you are in.
            </remarks>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.Append``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.ExpressionType)">
            <summary>
            Appends the specified right expression to the left expression using the specified expression append type.
            </summary>
            <typeparam name="T">The type of the parameter in the expressions.</typeparam>
            <param name="left">The left expression.</param>
            <param name="right">The right expression.</param>
            <param name="expressionAppendType">The expression append type.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a lambda expression that represents a conditional AND operation.
            </summary>
            <typeparam name="T">The type of the parameter in the expression.</typeparam>
            <param name="left">The left expression.</param>
            <param name="right">The right expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a lambda expression that represents a conditional OR operation.
            </summary>
            <typeparam name="T">The type of the parameter in the expression.</typeparam>
            <param name="left">The left expression.</param>
            <param name="right">The right expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property name from the specified expression.
            </summary>
            <typeparam name="T">The type of the parameter in the expression.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The property name.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ConfigureOptions``1(Milvasoft.Core.Abstractions.IMilvaBuilder,Microsoft.Extensions.Configuration.IConfigurationManager)">
            <summary>
            Adds <see cref="T:Microsoft.Extensions.Localization.LocalizationOptions"/> as <see cref="T:Microsoft.Extensions.Options.IOptions`1"/>.
            </summary>
            <param name="builder"></param>
            <param name="configurationManager"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.PropertyExists``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Checks whether a property with the specified name exists in the collection of properties of the specified type.
            </summary>
            <typeparam name="T">The type of the source collection.</typeparam>
            <param name="_">The source collection (not used).</param>
            <param name="propertyName">The name of the property to check.</param>
            <returns>True if the property exists, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.PropertyExists``1(System.String)">
            <summary>
            Checks whether a property with the specified name exists in the properties of the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="propertyName">The name of the property to check.</param>
            <returns>True if the property exists, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.PropertyExists(System.Object,System.String)">
            <summary>
            Checks whether a property with the specified name exists in the properties of the specified object.
            </summary>
            <param name="content">The object to check.</param>
            <param name="propertyName">The name of the property to check.</param>
            <returns>True if the property exists, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.PropertyExists(System.Type,System.String)">
            <summary>
            Checks whether a property with the specified name exists in the properties of the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="propertyName">The name of the property to check.</param>
            <returns>True if the property exists, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ThrowIfPropertyNotExists``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if a property with the specified name does not exist in the collection of properties of the specified type.
            </summary>
            <typeparam name="T">The type of the source collection.</typeparam>
            <param name="_">The source collection (not used).</param>
            <param name="propertyName">The name of the property to check.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> object representing the property.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ThrowIfPropertyNotExists``1(System.String)">
            <summary>
            Throws an exception if a property with the specified name does not exist in the properties of the specified type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="propertyName">The name of the property to check.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> object representing the property.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ThrowIfPropertyNotExists(System.Object,System.String)">
            <summary>
            Throws an exception if a property with the specified name does not exist in the properties of the specified object.
            </summary>
            <param name="content">The object to check.</param>
            <param name="propertyName">The name of the property to check.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> object representing the property.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ThrowIfPropertyNotExists(System.Type,System.String)">
            <summary>
            Throws an exception if a property with the specified name does not exist in the properties of the specified type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="propertyName">The name of the property to check.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> object representing the property.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.GetPublicPropertyIgnoreCase(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> object representing the property with the specified name in the specified type.
            The search is case-insensitive and includes public instance properties.
            </summary>
            <param name="type">The type to search in.</param>
            <param name="propertyName">The name of the property to get.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> object representing the property, or null if the property does not exist.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CreatePropertySelector``2(System.String)">
            <summary>
            Creates a property selector expression for the specified property name.
            </summary>
            <typeparam name="T">The type to create the expression for.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The property selector expression.</returns>
            <exception cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException">Thrown when <typeparamref name="T"/> does not contain <paramref name="propertyName"/>.</exception>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CreateRequiredPropertySelector``2(System.String)">
            <summary>
            Creates a required property selector expression for the specified property name.
            </summary>
            <typeparam name="T">The type to create the expression for.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The required property selector expression.</returns>
            <exception cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException">Thrown when <typeparamref name="T"/> does not contain <paramref name="propertyName"/>.</exception>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CreateRequiredPropertySelector``1(System.String)">
            <summary>
            Creates an order by key selector expression for the specified property name.
            </summary>
            <typeparam name="T">The type to create the expression for.</typeparam>
            <param name="propertyName">The name of the property to order by.</param>
            <returns>The order by key selector expression.</returns>
            <exception cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException">Thrown when the type of <typeparamref name="T"/>'s properties does not contain '<paramref name="propertyName"/>'.</exception>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CreatePropertySelectorFunction``2(System.String)">
            <summary>
            Creates a property selector function for the specified property name.
            </summary>
            <typeparam name="T">The type to create the function for.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The property selector function.</returns>
            <exception cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException">Thrown when <typeparamref name="T"/> does not contain <paramref name="propertyName"/>.</exception>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CreateRequiredPropertySelectorFuction``2(System.String)">
            <summary>
            Creates a required property selector function for the specified property name.
            </summary>
            <typeparam name="T">The type to create the function for.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The required property selector function.</returns>
            <exception cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException">Thrown when <typeparamref name="T"/> does not contain <paramref name="propertyName"/>.</exception>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.DynamicInvokeCreatePropertySelector(System.String,System.Type,System.Type,System.String)">
            <summary>
            Dynamically gets a method and invokes the specified create property selector method from <see cref="T:Milvasoft.Core.Helpers.CommonHelper"/>.
            </summary>
            <param name="createPropertySelectorMethodName">The name of the create property selector method to invoke.</param>
            <param name="entityType">The type of the entity.</param>
            <param name="propType">The type of the property.</param>
            <param name="propName">The name of the property.</param>
            <returns>The result of the create property selector method.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.CreatePropertySelectorExpression``2(System.String)">
            <summary>
            Creates a property selector expression for the specified property name.
            </summary>
            <typeparam name="T">The type to create the expression for.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The property selector expression.</returns>
            <exception cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException">Thrown when <typeparamref name="T"/> does not contain <paramref name="propertyName"/>.</exception>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToUpperFirst(System.String,System.Globalization.CultureInfo)">
            <summary>
            Uppercases the first letter of the word.
            </summary>
            <param name="str">The input string.</param>
            <param name="cultureInfo">The culture info to be used for casing rules. If null, the current culture will be used.</param>
            <returns>The input string with the first letter uppercased.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToUpperInvariantFirst(System.String)">
            <summary>
            Uppercases the first letter of the word using the casing rules of the invariant culture.
            </summary>
            <param name="str">The input string.</param>
            <returns>The input string with the first letter uppercased using the casing rules of the invariant culture.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToLowerFirst(System.String,System.Globalization.CultureInfo)">
            <summary>
            Lowercases the first letter of the word.
            </summary>
            <param name="str">The input string.</param>
            <param name="cultureInfo">The culture info to be used for casing rules. If null, the current culture will be used.</param>
            <returns>The input string with the first letter lowercased.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.ToLowerInvariantFirst(System.String)">
            <summary>
            Lowercases the first letter of the word using the casing rules of the invariant culture.
            </summary>
            <param name="str">The input string.</param>
            <returns>The input string with the first letter lowercased using the casing rules of the invariant culture.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.GetByteArray(System.String)">
            <summary>
            Gets the byte array representation of the input string.
            </summary>
            <param name="str">The input string.</param>
            <returns>The byte array representation of the input string.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.GetString(System.Byte[])">
            <summary>
            Gets the string representation of the input byte array.
            </summary>
            <param name="array">The input byte array.</param>
            <returns>The string representation of the input byte array.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.HashToByteArray(System.String)">
            <summary>
            Hashes the input string using the SHA256 algorithm.
            </summary>
            <param name="str">The input string.</param>
            <returns>The hashed string as a byte array.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.Hash(System.String)">
            <summary>
            Computes the SHA256 hash of the given string.
            </summary>
            <param name="str">The string to be hashed.</param>
            <returns>The hashed string as a hexadecimal representation.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.CommonHelper.MilvaNormalize(System.String)">
            <summary>
            Normalizes the input string according to the invariant culture.
            </summary>
            <param name="value">The input string.</param>
            <returns>The normalized string according to the invariant culture.</returns>
        </member>
        <member name="T:Milvasoft.Core.Helpers.GeoLocation.GeoLocationExtensions">
            <summary>
            Contains extension methods for calculating distances between geographical points.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Helpers.GeoLocation.GeoLocationExtensions.CalculateDistance(Milvasoft.Core.Helpers.GeoLocation.Models.GeoPoint,Milvasoft.Core.Helpers.GeoLocation.Models.GeoPoint)">
            <summary>
            Calculates the distance in kilometers between two geographical points.
            </summary>
            <param name="point1">The first geographical point.</param>
            <param name="point2">The second geographical point.</param>
            <returns>The distance in kilometers between the two geographical points.</returns>
        </member>
        <member name="T:Milvasoft.Core.Helpers.GeoLocation.Models.GeoPoint">
            <summary>
            Represents a location point with latitude and longitude coordinates.
            </summary>
            <remarks>
            Use this class to initialize a new instance of <see cref="T:Milvasoft.Core.Helpers.GeoLocation.Models.GeoPoint"/> with latitude and longitude values.
            </remarks>
            <param name="latitude">The latitude coordinate of the point.</param>
            <param name="longitude">The longitude coordinate of the point.</param>
        </member>
        <member name="M:Milvasoft.Core.Helpers.GeoLocation.Models.GeoPoint.#ctor(System.Double,System.Double)">
            <summary>
            Represents a location point with latitude and longitude coordinates.
            </summary>
            <remarks>
            Use this class to initialize a new instance of <see cref="T:Milvasoft.Core.Helpers.GeoLocation.Models.GeoPoint"/> with latitude and longitude values.
            </remarks>
            <param name="latitude">The latitude coordinate of the point.</param>
            <param name="longitude">The longitude coordinate of the point.</param>
        </member>
        <member name="P:Milvasoft.Core.Helpers.GeoLocation.Models.GeoPoint.Latitude">
            <summary>
            Gets or sets the latitude coordinate of the point.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Helpers.GeoLocation.Models.GeoPoint.Longitude">
            <summary>
            Gets or sets the longitude coordinate of the point.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Helpers.RegexHelper">
            <summary>
            Helper class for matching input strings with regular expressions.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Helpers.RegexHelper.MatchRegex(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Checks if the <paramref name="input"/> matches the specified <paramref name="regex"/>.
            </summary>
            <param name="regex">The regular expression pattern to match.</param>
            <param name="input">The input string to match against the regular expression.</param>
            <returns><c>true</c> if the input matches the regex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Milvasoft.Core.Helpers.RegexHelper.MatchRegex(System.String,System.String)">
            <summary>
            Checks if the <paramref name="input"/> matches the specified <paramref name="regexString"/>.
            </summary>
            <param name="input">The input string to match against the regular expression.</param>
            <param name="regexString">The regular expression pattern to match.</param>
            <returns><c>true</c> if the input matches the regex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Milvasoft.Core.HttpRequestHelper">
            <summary>
            Helper class for request processes.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.HttpRequestHelper.BuildRequestMessage(System.Net.Http.HttpMethod,System.String,System.Object,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.Encoding,System.String,System.Version)">
            <summary>
            Creates an HTTP request message with the specified HTTP method, URL, content, encoding, media type, version, and headers.
            </summary>
            <param name="httpMethod">The HTTP method of the request.</param>
            <param name="url">The URL of the request.</param>
            <param name="content">The content of the request.</param>
            <param name="encoding">The encoding to be used for the request content. Default is <see cref="P:System.Text.Encoding.UTF8"/></param>
            <param name="mediaType">The media type of the request content. Default is 'json'</param>
            <param name="version">The version of the HTTP protocol to be used. Default is '1.0'</param>
            <param name="headers">The headers to be added to the request.</param>
            <returns>The created HttpRequestMessage object.</returns>
        </member>
        <member name="M:Milvasoft.Core.HttpRequestHelper.BuildRequestUrl(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <b>Makes reques url from requested params.</b> <para> For more detailed information of URL Sections, please refer to the remarks section where the method is described.</para>
            </summary>
            
            Remarks:
            
              https://www.milvasoft.com:444/api/v1/products/product?id=1
              _____   ________________  ___ _______________________  ____  
                |             |          |              |              |   
              protocol        |          |           pathName        query 
                          hostName       |                                 
                                        port                               
            
            
            
             !!! Hostname can be IP Address. (e.g. 127.20.10.1) 
            
            <param name="protocol"></param>
            <param name="hostName"></param>
            <param name="port"></param>
            <param name="pathName"></param>
            <param name="query"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.HttpRequestHelper.BuildRequestUrlFromAddress(System.String,System.String,System.String,System.String)">
            <summary>
            <b>Makes reques url from requested params.</b>  <para> For more detailed information of URL Sections, please refer to the remarks section where the method is described. </para>
            </summary>
            
            Remarks:
            
              https://www.milvasoft.com:444/api/v1/products/product?id=1
              _________________________  ___ _______________________  ____  
                           |              |              |              |   
                        address           |           pathName        query 
                                          |                                 
                                         port                               
            
            
            
             !!! Hostname can be IP Address. (e.g. 127.20.10.1) 
            
            <param name="address"></param>
            <param name="pathName"></param>
            <param name="query"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.HttpRequestHelper.UriRegex">
            <remarks>
            Pattern:<br/>
            <code>^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\=\\,\\'\\/\\\\\\+&amp;%\\$#_]*)?$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match the string "ht".<br/>
                    ○ Match 'f'.<br/>
            ○ Match the string "tp".<br/>
            ○ 2nd capture group.<br/>
                ○ Match 's' atomically, optionally.<br/>
            ○ Match the string "://".<br/>
            ○ Match a character in the set [0-9A-Za-z].<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match a character in the set [-.\w] greedily any number of times.<br/>
                    ○ Match a character in the set [0-9A-Za-z].<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 4th capture group.<br/>
                    ○ Match ':'.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ 5th capture group.<br/>
                            ○ Match the string "0-9".<br/>
            ○ 6th capture group.<br/>
                ○ Match '/' greedily, optionally.<br/>
            ○ Optional (greedy).<br/>
                ○ 7th capture group.<br/>
                    ○ Match a character in the set [#-'+-9=?A-Z\\_a-z] greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Milvasoft.Core.ServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extension for adding milva core components.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.ServiceCollectionExtension.AddMilvaLazy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            It configures the Lazy implementation to work with the dependency injection container.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.EntityPropertyNames">
            <summary>
            Auditing property names.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.LocalizerKeys">
            <summary>
            Localizer message keys
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.MilvaConstant">
            <summary>
            Milvasoft library constants.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MilvaConstant.ParentSectionName">
            <summary>
            Milvasoft main configuration object name.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.MilvaStatusCodes">
            <summary>
            Http status codes.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.MimeTypeNames">
            <summary>
            Common mime types. 
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXJavascript">
            <summary>Used to denote the encoding necessary for files containing JavaScript source code. The alternative MIME type for this file type is text/javascript.</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioL24">
            <summary>24bit Linear PCM audio at 8-48kHz, 1-N channels; Defined in RFC 3190</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXShockwaveFlash">
            <summary>Adobe Flash files for example with the extension .swf</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationOctetStream">
            <summary>Arbitrary binary data.[5] Generally speaking this type identifies files that are not associated with a specific application. Contrary to past assumptions by software packages such as Apache this is not a type that should be applied to unknown files. In such a case, a server or application should not indicate a content type, as it may be incorrect, but rather, should omit the type in order to allow the recipient to guess the type.[6]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationAtomXml">
            <summary>Atom feeds</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextCss">
            <summary>Cascading Style Sheets; Defined in RFC 2318</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextCmd">
            <summary>commands; subtype resident in Gecko browsers like Firefox 3.5</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextCsv">
            <summary>Comma-separated values; Defined in RFC 4180</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXDeb">
            <summary>deb (file format), a software package format used by the Debian project</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartEncrypted">
            <summary>Defined in RFC 1847</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartSigned">
            <summary>Defined in RFC 1847</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MessageHttp">
            <summary>Defined in RFC 2616</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelExample">
            <summary>Defined in RFC 4735</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXDvi">
            <summary>device-independent document in DVI format</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXmlDtd">
            <summary>DTD files; Defined by RFC 3023</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationJavascript">
            <summary>
            ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/ecmascript but with looser processing rules) 
            It is not accepted in IE 8 or earlier - text/javascript is accepted but it is defined as obsolete in RFC 4329.
            The "type" attribute of the script tag in HTML5 is optional and in practice omitting the media type of JavaScript programs is the most interoperable solution since 
            all browsers have always assumed the correct default even before HTML5.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationEcmascript">
            <summary>ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/javascript but with stricter processing rules)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationEdifact">
            <summary>EDI EDIFACT data; Defined in RFC 1767</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationEdiX12">
            <summary>EDI X12 data; Defined in RFC 1767</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MessagePartial">
            <summary>Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MessageRfc822">
            <summary>Email; EML files, MIME files, MHT files, MHTML files; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextXml">
            <summary>Extensible Markup Language; Defined in RFC 3023</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoXFlv">
            <summary>Flash video (FLV files)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageGif">
            <summary>GIF image; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextXGwtRpc">
            <summary>GoogleWebToolkit data</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXGzip">
            <summary>Gzip</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextHtml">
            <summary>HTML; Defined in RFC 2854</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageVndMicrosoftIcon">
            <summary>ICO image; Registered[9]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelIges">
            <summary>IGS files, IGES files; Defined in RFC 2077</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MessageImdnXml">
            <summary>IMDN Instant Message Disposition Notification; Defined in RFC 5438</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.Json">
            <summary>JavaScript Object Notation JSON; Defined in RFC 4627</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationJson">
            <summary>JavaScript Object Notation JSON; Defined in RFC 4627</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationJsonPatch">
            <summary>JavaScript Object Notation (JSON) Patch; Defined in RFC 6902</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImagePjpeg">
            <summary>JPEG JFIF image; Associated with Internet Explorer; Listed in ms775147(v=vs.85) - Progressive JPEG, initiated before global browser support for progressive 
            JPEGs (Microsoft and Firefox).</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageJpeg">
            <summary>JPEG JFIF image; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextXJqueryTmpl">
            <summary>jQuery template data</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndGoogleEarthKmlXml">
            <summary>KML files (e.g. for Google Earth)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXLatex">
            <summary>LaTeX files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoXMatroska">
            <summary>Matroska open media format</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet">
            <summary>Microsoft Excel 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndMsExcel">
            <summary>Microsoft Excel files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation">
            <summary>Microsoft Powerpoint 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndMsPowerpoint">
            <summary>Microsoft Powerpoint files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument">
            <summary>Microsoft Word 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationMsword">
            <summary>Microsoft Word files[15]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartAlternative">
            <summary>MIME Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartMixed">
            <summary>MIME Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartRelated">
            <summary>MIME Email; Defined in RFC 2387 and used by MHTML (HTML mail)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartFormData">
            <summary>MIME Webform; Defined in RFC 2388</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndMozillaXulXml">
            <summary>Mozilla XUL files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioMpeg">
            <summary>MP3 or other MPEG audio; Defined in RFC 3003</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioMp4">
            <summary>MP4 audio</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoMp4">
            <summary>MP4 video; Defined in RFC 4337</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoMpeg">
            <summary>MPEG-1 video with multiplexed audio; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelMesh">
            <summary>MSH files, MESH files; Defined in RFC 2077, SILO files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioBasic">
            <summary>mulaw audio at 8 kHz, 1 channel; Defined in RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoOgg">
            <summary>Ogg Theora or other video (with audio); Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioOgg">
            <summary>Ogg Vorbis, Speex, Flac and other audio; Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationOgg">
            <summary>Ogg, a multimedia bitstream container format; Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXopXml">
            <summary>OP</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOasisOpendocumentGraphics">
            <summary>OpenDocument Graphics; Registered[14]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOasisOpendocumentPresentation">
            <summary>OpenDocument Presentation; Registered[13]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOasisOpendocumentSpreadsheet">
            <summary>OpenDocument Spreadsheet; Registered[12]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOasisOpendocumentText">
            <summary>OpenDocument Text; Registered[11]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs12">
            <summary>p12 files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs7Certificates">
            <summary>p7b and spc files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs7Mime">
            <summary>p7c files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs7Certreqresp">
            <summary>p7r files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs7Signature">
            <summary>p7s files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationPdf">
            <summary>Portable Document Format, PDF has been in use for document exchange on the Internet since 1993; Defined in RFC 3778</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImagePng">
            <summary>Portable Network Graphics; Registered,[8] Defined in RFC 2083</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationPostscript">
            <summary>PostScript; Defined in RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoQuicktime">
            <summary>QuickTime video; Registered[10]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXRarCompressed">
            <summary>RAR archive files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioVndRnRealaudio">
            <summary>RealAudio; Documented in RealPlayer Customer Support Answer 2559</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationRdfXml">
            <summary>Resource Description Framework; Defined by RFC 3870</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationRssXml">
            <summary>RSS feeds</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationSoapXml">
            <summary>SOAP; Defined by RFC 3902</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXStuffit">
            <summary>StuffIt archive files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageSvgXml">
            <summary>SVG vector image; Defined in SVG Tiny 1.2 Specification Appendix M</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageTiff">
            <summary>Tag Image File Format (only for Baseline TIFF); Defined in RFC 3302</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXTar">
            <summary>Tarball files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextPlain">
            <summary>Textual data; Defined in RFC 2046 and RFC 3676</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXFontTtf">
            <summary>TrueType Font No registered MIME type, but this is the most commonly used</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextVcard">
            <summary>vCard (contact information); Defined in RFC 6350</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioVorbis">
            <summary>Vorbis encoded audio; Defined in RFC 5215</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioVndWave">
            <summary>WAV audio; Defined in RFC 2361</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationFontWoff">
            <summary>Web Open Font Format; (candidate recommendation; use application/x-font-woff until standard is official)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoWebm">
            <summary>WebM Matroska-based open media format</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioWebm">
            <summary>WebM open media format</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioXMsWax">
            <summary>Windows Media Audio Redirector; Documented in Microsoft help page</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioXMsWma">
            <summary>Windows Media Audio; Documented in Microsoft KB 288102</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoXMsWmv">
            <summary>Windows Media Video; Documented in Microsoft KB 288102</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelVrml">
            <summary>WRL files, VRML files; Defined in RFC 2077</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelX3DXml">
            <summary>X3D ISO standard for representing 3D computer graphics, X3D XML files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelX3DBinary">
            <summary>X3D ISO standard for representing 3D computer graphics, X3DB binary files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelX3DVrml">
            <summary>X3D ISO standard for representing 3D computer graphics, X3DV VRML files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXhtmlXml">
            <summary>XHTML; Defined by RFC 3236</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationZip">
            <summary>ZIP archive files; Registered[7]</summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.ExpressionParameterReplacer">
            <summary>
            Replaces the parameters in an expression for the expression builder.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Utils.ExpressionParameterReplacer.#ctor(System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Utils.ExpressionParameterReplacer"/> class.
            </summary>
            <param name="fromParameters">The original parameters.</param>
            <param name="toParameters">The replacement parameters.</param>
        </member>
        <member name="M:Milvasoft.Core.Utils.ExpressionParameterReplacer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.ExceptionConverter`1">
            <summary>
            Converts exceptions to JSON by serializing only the <see cref="P:System.Exception.Message"/> and <see cref="P:System.Exception.StackTrace"/> properties. Ignores the <see cref="P:System.Exception.TargetSite"/> property.
            </summary>
            <typeparam name="TExceptionType">The type of exception to convert.</typeparam>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.ExceptionConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether the specified type can be converted to <see cref="T:System.Exception"/>.
            </summary>
            <param name="typeToConvert">The type to convert.</param>
            <returns><c>true</c> if the specified type can be converted to <see cref="T:System.Exception"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.ExceptionConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserializes the JSON representation of an exception.
            </summary>
            <param name="reader">The reader to use.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The serializer options.</param>
            <returns>The deserialized exception.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when deserialization is not supported.</exception>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.ExceptionConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serializes the specified exception to JSON.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="value">The exception to serialize.</param>
            <param name="options">The serializer options.</param>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.InterfaceConverter`2">
            <summary>
            Converter for deserializing generic interfaces with System.Text.Json. 
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverter`2.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserializes the JSON data to the specified type.
            </summary>
            <param name="reader">The reader used to read the JSON data.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The serializer options.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverter`2.Write(System.Text.Json.Utf8JsonWriter,`1,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serializes the specified object to JSON.
            </summary>
            <param name="writer">The writer used to write the JSON data.</param>
            <param name="value">The object to serialize.</param>
            <param name="options">The serializer options.</param>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory`2">
            <summary>
            Converter factory for deserializing generic interfaces with System.Text.Json. 
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory`2"/> class.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory">
            <summary>
            Converter factory for deserializing generic interfaces with System.Text.Json. 
            </summary>
            <param name="implementationType">The implementation type.</param>
            <param name="interfaceType">The interface type.</param>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.#ctor(System.Type,System.Type)">
            <summary>
            Converter factory for deserializing generic interfaces with System.Text.Json. 
            </summary>
            <param name="implementationType">The implementation type.</param>
            <param name="interfaceType">The interface type.</param>
        </member>
        <member name="P:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.ImplementationType">
            <summary>
            Gets the implementation type.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.InterfaceType">
            <summary>
            Gets the interface type.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.CanConvert(System.Type)">
            <summary>
            Determines whether the specified type can be converted to the interface type.
            </summary>
            <param name="typeToConvert">The type to convert.</param>
            <returns><c>true</c> if the specified type can be converted to the interface type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a converter for the specified type.
            </summary>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The serializer options.</param>
            <returns>A converter for the specified type.</returns>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions">
            <summary>
            Provides options for serialization and deserialization operations used by the library.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.Current">
            <summary>
            Gets or sets the current <see cref="T:System.Text.Json.JsonSerializerOptions"/> used by the library.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.ResetCurrentOptionsToDefault">
            <summary>
            Resets the current <see cref="T:System.Text.Json.JsonSerializerOptions"/> to the default options.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.NewOptionsObjectFromCurrent">
            <summary>
            Creates a new <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance based on the current <see cref="P:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.Current"/> object.
            </summary>
            <returns>A new <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.</returns>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.ConfigureCurrentMilvaJsonSerializerOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.Text.Json.JsonSerializerOptions},System.Boolean)">
            <summary>
            Configures the <see cref="P:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.Current"/> options with the specified <paramref name="options"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> used for dependency injection.</param>
            <param name="options">The <see cref="T:System.Action`1"/> used to configure the options.</param>
            <param name="includeMilvaOptions">A boolean value indicating whether to include Milva converters.</param>
            <returns>The configured <see cref="T:System.Text.Json.JsonSerializerOptions"/>.</returns>
        </member>
        <member name="T:Milvasoft.Core.Utils.MilvaLazy`1">
            <summary>
            Represents a custom implementation of the <see cref="T:System.Lazy`1"/> class.
            </summary>
            <typeparam name="T">The type of the lazily initialized value.</typeparam>
            <remarks>
            This class provides a constructor for creating an instance of <see cref="T:Milvasoft.Core.Utils.MilvaLazy`1"/>.
            </remarks>
            <param name="serviceProvider">The service provider used to resolve the lazily initialized value.</param>
        </member>
        <member name="M:Milvasoft.Core.Utils.MilvaLazy`1.#ctor(System.IServiceProvider)">
            <summary>
            Represents a custom implementation of the <see cref="T:System.Lazy`1"/> class.
            </summary>
            <typeparam name="T">The type of the lazily initialized value.</typeparam>
            <remarks>
            This class provides a constructor for creating an instance of <see cref="T:Milvasoft.Core.Utils.MilvaLazy`1"/>.
            </remarks>
            <param name="serviceProvider">The service provider used to resolve the lazily initialized value.</param>
        </member>
        <member name="T:Milvasoft.Core.Utils.Models.InvalidString">
            <summary>
            Invalid strings for prevent hacking or someting ;)
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.InvalidString.Name">
            <summary>
            Name of invalid string.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.InvalidString.Values">
            <summary>
            Invalid values.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Models.OrderByProp">
            <summary>
            Order by properties for multiple ordey by in database.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.OrderByProp.PropName">
            <summary>
            Determines order by Property name of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.OrderByProp.Ascending">
            <summary>
            Determines order by ascending or descending.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.OrderByProp.Priority">
            <summary>
            Priority of order operation. Ex. first order by creation date then order by updated date.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UriRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UriRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UriRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UriRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UriRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_F8F8FFA3FEFFFF97FEFFFF07">
            <summary>Supports searching for characters in or not in "#$%&amp;'+,-./0123456789=?ABCDEFGHIJKLMNOPQRSTUVWXYZ\\_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
