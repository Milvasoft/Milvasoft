<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.Core</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.Core.Abstractions.Cache.ICacheAccessor">
            <summary>
            Provides cache access methods.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.IsConnected">
            <summary>
            Gets redis client connection state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.GetAsync``1(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.GetAsync(System.String,System.Type)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.GetAsync(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.GetAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets <paramref name="keys"/> values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.SetAsync(System.String,System.Object)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Sets <paramref name="value"/> to <paramref name="key"/> with <paramref name="expiration"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.RemoveAsync(System.String)">
            <summary>
            Removes <paramref name="key"/> and value.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.RemoveAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes <paramref name="keys"/> and value.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExistsAsync(System.String)">
            <summary>
            Checks if there is a <paramref name="key"/> in database. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExpireAsync(System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Get``1(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Get(System.String)">
            <summary>
            Gets <paramref name="key"/>'s value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Get``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets <paramref name="keys"/> values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Set(System.String,System.String)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Set``1(System.String,``0)">
            <summary>
            Sets <paramref name="value"/> with <paramref name="key"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Set(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Sets <paramref name="value"/> to <paramref name="key"/> with <paramref name="expiration"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.Remove(System.String)">
            <summary>
            Removes <paramref name="key"/> and value.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExists(System.String)">
            <summary>
            Checks if there is a <paramref name="key"/> in database. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExpire(System.String,System.TimeSpan)">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Cache.ICacheAccessor.KeyExpire(System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets timeout on <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Cache.ICacheAccessor`1">
            <summary>
            Cache accessor generic implementation. 
            </summary>
            <typeparam name="TAccessor"></typeparam>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Cache.ICacheOptions`1">
            <summary>
            Makes IOptions cache aware.
            </summary>
            <typeparam name="TCacheOptions"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Cache.ICacheOptions`1.AccessorLifetime">
            <summary>
            Caching accessor service lifetime.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IFileDTO">
            <summary>
            Abstraction for multiple file upload process.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IFileDTO.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IFileDTO.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IFileEntity">
            <summary>
             Abstraction for multiple file upload process.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IFileEntity.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IFileEntity.FilePath">
            <summary>
            Path of file.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IInterceptable">
            <summary>
            It is the dummy interface that marks which class's methods can be intercepted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IMapper">
            <summary>
            Responsible interface for mapping from the source object to the object we want to access.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``1(System.Object)">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``1(System.Object,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``1(System.Object,System.Int32,System.Boolean,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="preserveReference"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``2(``0)">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``2(``0,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``2(``0,System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMapper.Map``2(``0,System.Int32,System.Boolean,System.Boolean,System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
            <summary>
            Responsible for mapping from the source object to the object we want to map.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="ignoredMembers"></param>
            <param name="maxDepth"></param>
            <param name="preserveReference"></param>
            <param name="ignoreNullValues"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IMilvaBuilder">
            <summary>
            Dummy class for builder implementations.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IMilvaBuilder.Services">
            <summary>
            Service collection.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IMilvaLogger">
            <summary>
            Logger interface for DI. If you want to get logs from library side errors implement this interface and register to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Log(System.String)">
            <summary>
            Abstraction where you can make logs such as database logging.
            </summary>
            <param name="logEntry">Log object json string.</param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.LogAsync(System.String)">
            <summary>
            Abstraction where you can make logs such as database logging.
            </summary>
            <param name="logEntry">Log object json string</param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Verbose(System.String)">
            <summary>
            Write a log event with verbose level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the verbose level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the verbose level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Debug(System.String)">
            <summary>
            Write a log event with debug level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the debug level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the debug level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Information(System.String)">
            <summary>
            Write a log event with information level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the information level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the information level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Warning(System.String)">
            <summary>
            Write a log event with warning level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the warning level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the warning level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Error(System.String)">
            <summary>
            Write a log event with error level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the error level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the error level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Fatal(System.String)">
            <summary>
            Write a log event with fatal level.
            </summary>
            <param name="message">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the fatal level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(exception, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.IMilvaLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the fatal level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into {@from}, wondering where this comet came from.", space);
            </example>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.IMilvaOptions">
            <summary>
            Dummy interface for options implementations.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.IMilvaOptions.SectionName">
            <summary>
            Configuration section name.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Localization.ILocalizationManager">
            <summary>
            It is the manager that provides access to localization resources. You can use this interface for creating new custom managers. Or you can use ready-made milva managers. 
            <para> For ready made managers see here : https://github.com/Milvasoft/Milvasoft/tree/master/Localization/Milvasoft.Localization.Redis </para> 
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Item(System.String)">
            <summary>
            Gets the string resource with the given key.
            </summary>
            <param name="key"></param>
            <returns>The string resource as a <see cref="T:Milvasoft.Types.Classes.LocalizedValue"/>.</returns>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Item(System.String,System.Object[])">
            <summary>
            Gets the string resource with the given key and formatted with the supplied arguments.
            </summary>
            <param name="key">The key of the string resource.</param>
            <param name="arguments">The values to format the string with.</param>
            <returns>The formatted string resource as a <see cref="T:Milvasoft.Types.Classes.LocalizedValue"/>.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.GetAllStrings(System.Boolean)">
            <summary>
            Gets all string resources.
            </summary>
            <param name="includeParentCultures">
            A <see cref="T:System.Boolean"/> indicating whether to include strings from parent cultures.
            </param>
            <returns>The strings.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Set(System.String,System.String)">
            <summary>
            Sets the given <paramref name="value"/> with given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Set(System.String,System.String,System.String)">
            <summary>
            Sets the given <paramref name="value"/> with given <paramref name="key"/> in given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Remove(System.String)">
            <summary>
            Removes value from resource with given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.Remove(System.String,System.String)">
            <summary>
            Removes value from resource with given <paramref name="key"/> with given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.SetAsync(System.String,System.String)">
            <summary>
            Sets the given <paramref name="value"/> with given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.SetAsync(System.String,System.String,System.String)">
            <summary>
            Sets the given <paramref name="value"/> with given <paramref name="key"/> in given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.RemoveAsync(System.String)">
            <summary>
            Removes value from resource with given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.ILocalizationManager.RemoveAsync(System.String,System.String)">
            <summary>
            Removes value from resource with given <paramref name="key"/> with given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions">
            <summary>
            Milva localization options.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.ManagerLifetime">
            <summary>
            Localization manager service lifetime.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.KeyFormat">
            <summary>
            Key format
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.KeyFormatMethod">
            <summary>
            Formatted key creator method.
            Default is: (string key) => string.Format(config.KeyFormat, key);
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.UseInMemoryCache">
            <summary>
            LocalizationMemoryCache helps speeding up getting localized values from data stores.
            It is helpful to set to false during development mode and to true in production.
            Default value: false.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.ILocalizationOptions.MemoryCacheEntryOptions">
            <summary>
            Memory cache entry options.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer">
            <summary>
            Represents a service that provides localized strings.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.Item(System.String)">
            <summary>
            Gets the string resource with the given key.
            </summary>
            <param name="key"></param>
            <returns>The string resource as a <see cref="T:Milvasoft.Types.Classes.LocalizedValue"/>.</returns>
        </member>
        <member name="P:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.Item(System.String,System.Object[])">
            <summary>
            Gets the string resource with the given key and formatted with the supplied arguments.
            </summary>
            <param name="key">The key of the string resource.</param>
            <param name="arguments">The values to format the string with.</param>
            <returns>The formatted string resource as a <see cref="T:Milvasoft.Types.Classes.LocalizedValue"/>.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.GetAllStrings(System.Boolean)">
            <summary>
            Gets all string resources.
            </summary>
            <param name="includeParentCultures">
            A <see cref="T:System.Boolean"/> indicating whether to include strings from parent cultures.
            </param>
            <returns>The strings.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.GetWithCulture(System.String,System.String)">
            <summary>
            Gets string resource with given <paramref name="key"/> with given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <returns>The string.</returns>
        </member>
        <member name="M:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer.GetWithCulture(System.String,System.String,System.Object[])">
            <summary>
            Gets string resource with given <paramref name="key"/> with given <paramref name="culture"/>.
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <param name="arguments"></param>
            <returns>The string.</returns>
        </member>
        <member name="T:Milvasoft.Core.CommonHelper">
            <summary>
            Common Helper class.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.ThrowIfPropertyNotExists``1(System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b>typeof(<typeparamref name="T"/>)</b>. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.ThrowIfPropertyNotExists(System.Object,System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="content"/></b>. 
            </summary>
            <param name="content"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.ThrowIfPropertyNotExists(System.Type,System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="type"/></b>. 
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.PropertyExists``1(System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b>typeof(<typeparamref name="T"/>)</b>. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.PropertyExists(System.Object,System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="content"/></b>. 
            </summary>
            <param name="content"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.PropertyExists(System.Type,System.String)">
            <summary>
            Checks if there is a property named <paramref name="propertyName"/> in the properties of <b><paramref name="type"/></b>. 
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.GetPublicPropertyIgnoreCase(System.Type,System.String)">
            <summary>
            Gets property with <see cref="F:System.Reflection.BindingFlags.Public"/>, <see cref="F:System.Reflection.BindingFlags.IgnoreCase"/>, <see cref="F:System.Reflection.BindingFlags.Instance"/>
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.CreateOrderByKeySelector``1(System.String)">
            <summary>
            Creates order by key selector by <paramref name="orderByPropertyName"/>.
            </summary>
            
            <exception cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"> Throwns when type of <typeparamref name="T"/>'s properties doesn't contain '<paramref name="orderByPropertyName"/>'. </exception>
            
            <typeparam name="T"></typeparam>
            <param name="orderByPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.CreatePropertySelector``2(System.String)">
            <summary>
            Create property selector predicate.(e.g. i => i.User).
            If <typeparamref name="T"/> doesn't contains <paramref name="propertyName"/> throwns <see cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"/>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.CreatePropertySelectorFunction``2(System.String)">
            <summary>
            Create property selector predicate.(e.g. i => i.User).
            If <typeparamref name="T"/> doesn't contains <paramref name="propertyName"/> throwns <see cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"/>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.CreateRequiredPropertySelector``2(System.String)">
            <summary>
            Create property selector predicate.(e.g. i => i.User).
            If <typeparamref name="T"/> doesn't contains <paramref name="propertyName"/> returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.CreateRequiredPropertySelectorFuction``2(System.String)">
            <summary>
            Create property selector predicate.(e.g. i => i.User).
            If <typeparamref name="T"/> doesn't contains <paramref name="propertyName"/> returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.DynamicInvokeCreatePropertySelector(System.String,System.Type,System.Type,System.String)">
            <summary>
            Dynamically gets method and invokes <see cref="T:Milvasoft.Core.CommonHelper"/> create property selector methods.
            </summary>
            <param name="createPropertySelectorMethodName"></param>
            <param name="entityType"></param>
            <param name="propType"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.CreateIsDeletedFalseExpression``1">
            <summary>
            Gets <b>entity => entity.IsDeleted == false</b> expression, if <typeparamref name="TEntity"/> is assignable from <see cref="T:Milvasoft.Core.EntityBases.Abstract.IFullAuditable`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Provides get nested property value. e.g. Product.Stock.Amount
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.EnsureLegalLengths(System.Int32,System.Int32,Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer)">
            <summary>
            Checks that MinimumLength and MaximumLength have legal values. Throws <see cref="T:System.InvalidOperationException"/>  if not.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.GetEnumDesciption``1(``0)">
            <summary>
            Gets enum description.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.ToGuid(System.Int32)">
            <summary>
            This method return int value to guid value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.ToJson(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts <paramref name="value"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value"></param>
            <param name="jsonOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.ToObject``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts <paramref name="value"/> to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="jsonOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.ToObject(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts <paramref name="value"/> to <paramref name="returnType"/>.
            </summary>
            <param name="value"></param>
            <param name="returnType"></param>
            <param name="jsonOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.IsBetween(System.DateTime,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Compares <paramref name="date"/> for whether between <paramref name="startTime"/> and <paramref name="endTime"/>. 
            </summary>
            
            <remarks>
            This is a time comparison not a date comparison.
            </remarks>
            
            <param name="date"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="convertTimesToUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.IsBetween(System.DateTime,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Removes <paramref name="date"/>'s hour, second and milisecond then adds <paramref name="compareTime"/> to <paramref name="date"/> 
            and compares <paramref name="date"/> for whether between <paramref name="startTime"/> and <paramref name="endTime"/>. 
            </summary>
            
            <remarks>
            This is a time comparison not a date comparison.
            </remarks>
            
            <param name="date"></param>
            <param name="compareTime"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="convertTimesToUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Compares <paramref name="date"/> for whether between <paramref name="startDate"/> and <paramref name="endDate"/>. 
            </summary>
            <param name="date"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.IsBetween(System.DateTime,System.TimeSpan,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Compares <paramref name="date"/> for whether between <paramref name="startDate"/> and <paramref name="endDate"/>. 
            </summary>
            <param name="date"></param>
            <param name="time"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="convertTimeToUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.ConvertToUtc(System.TimeSpan)">
            <summary>
            Converts timespan to universal time.
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.GetMilvaLocalizer(System.IServiceProvider)">
            <summary>
            Returns <see cref="T:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer"/> which registered to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            If <see cref="T:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer"/> not registered, returns null.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.GetRequiredMilvaLocalizer(System.IServiceProvider)">
            <summary>
            Returns <see cref="T:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer"/> which registered to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            If <see cref="T:Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer"/> not registered, throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.MilvaNormalize(System.String)">
            <summary>
            Normalize string according to invariant culture.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.CreateType(System.String)">
            <summary>
            Creates dynamic assembly type.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.AssignUpdatedProperties``2(``0,``1)">
            <summary>
            Updates entity matching properties with <paramref name="dto"/>'s not null properties.
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <param name="dto"></param>
            <param name="entity"></param>
            <returns>Updated property informations.</returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.GetHexadecimalHash(System.String)">
            <summary>
            Gets hexadecimal string hash.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.Deserialize(System.Text.Json.JsonElement,System.Type)">
            <summary>
            Deserializes json element to <paramref name="type"/>. 
            </summary>
            <param name="element"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.CommonHelper.IsEnumerableType(System.Type)">
            <summary>
            Determines wheter the <paramref name="type"/> is enumerable or not.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasCreator">
            <summary>
            Determines entity has creator.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasCreator.CreatorUserName">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasDeleter">
            <summary>
            Determines entity has deleter.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasDeleter.DeleterUserName">
            <summary>
            Deleter of entity.
            </summary>er
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModifier">
            <summary>
            Determines entity has modifier.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModifier.LastModifierUserName">
            <summary>
            Last modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.Auditing.ISoftDeletable">
            <summary>
            Determines entity has deletion date.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.ISoftDeletable.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.Auditing.ISoftDeletable.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IAuditable`1">
            <summary>
            Determines entity is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.IAuditable`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IAuditableWithoutUser`1">
            <summary>
            Determines entity is auditable without modifier.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.IAuditableWithoutUser`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IBaseEntity`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IBaseEntity">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IEntityBase`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.IEntityBase`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IMilvaEntity">
            <summary>
            Dummy interface given for constraint
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.IMilvaEntity.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.ICreationAuditable`1">
            <summary>
            Determines entity's creation is auditable with user information.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.ICreationAuditable`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.ICreationAuditableWithoutUser`1">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Abstract.ICreationAuditableWithoutUser`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IFullAuditable`1">
            <summary>
            Determines entity is fully auditable with user information.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Abstract.IFullAuditableWithoutUser`1">
            <summary>
            Determines entity is fully auditable.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntity`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntity`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntity`1.LastModifierUserName">
            <summary>
            Modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntityWithoutUser`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.AuditableEntityWithoutUser`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntity`1">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntity`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntity`1.CreatorUserName">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntityWithoutUser`1">
            <summary>
            Determines entity's creation is auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.CreationAuditableEntityWithoutUser`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDto`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDto`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDto`1.LastModifierUserName">
            <summary>
            Modifier of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDtoWithoutUser`1">
            <summary>
            Determines entity's is auditable with modifier and modification date.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.AuditableDtoWithoutUser`1.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDto`1">
            <summary>
            Determines entity's creation is auditable.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDto`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDto`1.CreatorUserName">
            <summary>
            Creator of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDtoWithoutUser`1">
            <summary>
            Determines entity's creation is auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.CreationAuditableDtoWithoutUser`1.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDto`1">
            <summary>
            Determines entity is fully auditable soft deletable entity.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDto`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDto`1.DeleterUserName">
            <summary>
            Deleter of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDto`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDtoWithoutUser`1">
            <summary>
            Determines entity is fully auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDtoWithoutUser`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.Dto.FullAuditableDtoWithoutUser`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntity`1">
            <summary>
            Determines entity is fully auditable soft deletable entity.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntity`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntity`1.DeleterUserName">
            <summary>
            Deleter of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntity`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntityWithoutUser`1">
            <summary>
            Determines entity is fully auditable without user.
            </summary>
            <typeparam name="TKey">Type of the user</typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntityWithoutUser`1.DeletionDate">
            <summary>
            Deletion date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.Auditing.FullAuditableEntityWithoutUser`1.IsDeleted">
            <summary>
            Gets or sets a value indicating whether IsDeleted.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.BaseDto`1">
            <summary>
            Base dto for all of dtos.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.BaseDto`1.Id">
            <summary>
            Unique identifier for this dto.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.BaseDto`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Core.EntityBases.Concrete.BaseDto`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.DtoBase`1">
            <summary>
            Base dto for all of dtos.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.DtoBase`1.Id">
            <summary>
            Unique identifier for this dto.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.DtoBase`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Core.EntityBases.Concrete.DtoBase`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.DtoBase">
            <summary>
            Base dto for all of dtos.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.DtoBase.#ctor">
            <summary>
            Initializes new instance.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.DtoBase.GetDtoType">
            <summary>
            Gets dto type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.DtoBase.GetDtoProperties">
            <summary>
            Get dto type properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1">
            <summary>
            Base entity for all of entities.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.EntityBase`1">
            <summary>
            Base entity for all of entities.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.Concrete.EntityBase`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.EntityBase`1.ToString">
            <summary>
            Returns this instance of "<see cref="T:System.Type"/>.Name <see cref="T:Milvasoft.Core.EntityBases.Concrete.BaseEntity`1"/>.Id" as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.Concrete.EntityBase">
            <summary>
            Base entity for all of entities.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.EntityBase.#ctor">
            <summary>
            Initializes new instance.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.EntityBase.GetEntityType">
            <summary>
            Gets entity type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.Concrete.EntityBase.GetEntityProperties">
            <summary>
            Gets entity's type properties from static collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1">
            <summary>
            Tenant base.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1.TenancyName">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1.Name">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1.ConnectionString">
            <summary>
            ENCRYPTED connection string of the tenant database.
            Can be null if this tenant is stored in host database.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaTenantBase`1.IsActive">
            <summary>
            Is this tenant active?
            If as tenant is not active, no user of this tenant can use the application.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.IMilvaBaseTenant`1">
            <summary>
            Tenant base.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1">
            <summary>
            Tenant base.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1.TenancyName">
            <summary>
            Tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1.Name">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1.ConnectionString">
            <summary>
            ENCRYPTED connection string of the tenant database.
            Can be null if this tenant is stored in host database.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaBaseTenant`1.IsActive">
            <summary>
            Is this tenant active?
            If as tenant is not active, no user of this tenant can use the application.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant`2">
            <summary>
            Represents a Tenant of the application.
            </summary>
            <typeparam name="TUser"></typeparam>
            <typeparam name="TUserKey"></typeparam>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant`2.Id">
            <summary>
            Id of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant`2.TenancyName">
            <summary>
            Tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant`2.BranchNo">
            <summary>
            Display name of the Tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant`2.SubscriptionExpireDate">
            <summary>
            Represents Tenant's subscription expire date.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant`2.#ctor">
            <summary>
            Creates a new tenant.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.MilvaTenant`2.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new tenant.
            </summary>
            <param name="tenancyName">UNIQUE name of this Tenant</param>
            <param name="branchNo"></param>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId">
            <summary>
            Fully unique tenant id.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.Empty">
            <summary>
            Creates an empty <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> instance.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.TenancyName">
            <summary>
            Unique tenancy name of tenant.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.BranchNo">
            <summary>
            Branch no of Tenant.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.#ctor(System.String)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <param name="tenantIdString"></param>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.#ctor(System.String,System.Int32)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <param name="tenancyName"></param>
            <param name="branchNo"></param>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.NewTenantId">
            <summary>
            Generates new unique tenant id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.GetHashCode">
            <summary>
            Combines Tenancy Name and BranchNo into a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.GetHashString">
            <summary>
            Returns hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.Equals(System.Object)">
            <summary>
            Compares hashes.
            </summary>
            <param name="other"></param>
            <returns> If both hash are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.Equals(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Compares hashes.
            </summary>
            <param name="other"></param>
            <returns> If both hash are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.TenancyNameEquals(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Compares <see cref="P:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.TenancyName"/> with <paramref name="other"/>.TenancyName.
            </summary>
            <param name="other"></param>
            <returns> If both TenancyName are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.BranchNoEquals(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Compares <see cref="P:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.BranchNo"/> with <paramref name="other"/>.BranchNo.
            </summary>
            <param name="other"></param>
            <returns> If both BranchNo are equals returns true, othewise false. </returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.ToString">
            <summary>
            Returns Tenancy Name and Branch No with '_' seperator 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.ToString(System.String)">
            <summary>
            <para>Supported formats : G , H </para>
            <para>G returns tenancyName and branchNo with '_' seperator</para>
            <para>H returns tenancyName and branchNo and hash with '_' seperator</para>
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.Parse(System.String)">
            <summary>
            Parses <paramref name="str"/> to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.TryParse(System.String)">
            <summary>
            Converts the string representation of a <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> to its string equivalent.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Implicit(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)~System.String">
            <summary>
            Provides implicit casting.
            </summary>
            <param name="tenantId"></param>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Explicit(System.String)~Milvasoft.Core.EntityBases.MultiTenancy.TenantId">
            <summary>
            Provides explicit casting.
            </summary>
            <param name="tenantId"></param>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Equality(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> objects are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Inequality(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> objects are not equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_LessThan(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are smaller than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_GreaterThan(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are bigger than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_LessThanOrEqual(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are smaller or equal than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_GreaterThanOrEqual(Milvasoft.Core.EntityBases.MultiTenancy.TenantId,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Indicates whether the values of <paramref name="a"/>.BranchNo are bigger or equal than <paramref name="b"/>.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Increment(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Increases <paramref name="tenantId"/>.BranchNo.
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantId.op_Decrement(Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Decreases <paramref name="tenantId"/>.BranchNo.
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter">
            <summary>
            Provides a type converter to convert string objects to and from <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines <paramref name="sourceType"/> can convert from string.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts <paramref name="value"/>(<see cref="T:System.String"/>) to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines <paramref name="destinationType"/> can convert to string.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.EntityBases.MultiTenancy.TenantIdTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaBaseException">
            <summary>
            Base exception class.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Exceptions.MilvaBaseException.ExceptionCode">
            <summary>
            Gets or sets error code.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Exceptions.MilvaBaseException.ExceptionObject">
            <summary>
            Gets or sets object of exception.
            Default value is null.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Exceptions.MilvaBaseException.UseLocalizerKey">
            <summary>
            Variable for exception middleware.
            Default value is true.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaBaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaBaseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaDeveloperException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaDeveloperException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaDeveloperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaDeveloperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaDeveloperException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaException">
            <summary>
            Defines the Milvasoft Exception Codes.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.Base">
            <summary>
            Defines the UnknownError.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.General">
            <summary>
            Defines the CannotFindEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotFindEntity">
            <summary>
            Defines the CannotFindEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.AddingNewEntityWithExistsId">
            <summary>
            Defines the AddingNewEntityWithExsistId.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.Encryption">
            <summary>
            Defines the EncryptionError.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotFindEnumById">
            <summary>
            Defines the CannotFindEnumById.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotStartRedisServer">
            <summary>
            Defines the CannotStartRedisServer.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.DeletingEntityWithRelations">
            <summary>
            Defines the DeletingEntityWithRelations.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.DeletingInvalidEntity">
            <summary>
            Defines the DeletingInvalidEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.TenancyNameRequired">
            <summary>
            Defines the TenancyNameRequired.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.EmptyList">
            <summary>
            Defines the EmptyList.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidNumericValue">
            <summary>
            Defines the InvalidNumericValue.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidParameter">
            <summary>
            Defines the InvalidParameter.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidStringExpression">
            <summary>
            Defines the InvalidStringExpression.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.NullParameter">
            <summary>
            Defines the NullParameter.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.FeatureNotImplemented">
            <summary>
            Defines the FeatureNotImplemented.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.UpdatingInvalidEntity">
            <summary>
            Defines the UpdatingInvalidEntity.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.NotLoggedInUser">
            <summary>
            Defines the NotLoggedInUser.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.AnotherLoginExists">
            <summary>
            Defines the AnotherLoginExists.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.OldVersion">
            <summary>
            Defines the OldVersion.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidLicence">
            <summary>
            Defines the InvalidLicence.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.ExpiredDemo">
            <summary>
            Defines the ExpiredDemo.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.NeedForceOperation">
            <summary>
            Defines the NeedForceOperation.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotGetResponse">
            <summary>
            Defines the CannotGetResponse.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.IdentityResult">
            <summary>
            Defines the IdentityResult.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.CannotUpdateOrDeleteDefaultRecord">
            <summary>
            Defines the CannotUpdateOrDeleteDefaultRecord.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.Validation">
            <summary>
            Defines the ValidationError.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidRelatedProcess">
            <summary>
            Defines the InvalidRelatedProcess.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.WrongPaginationParams">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.WrongRequestedPageNumber">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.WrongRequestedItemCount">
            <summary>
            Defines the WrongPaginationParams.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Exceptions.MilvaException.InvalidTenantId">
            <summary>
            Defines the InvalidTenantId.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaTestException">
            <summary>
            Test exception class.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaTestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaTestException"/> class  with a specified error message.
            </summary>
            <param name="exceptionMessage"></param>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="useLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,Milvasoft.Core.Exceptions.MilvaException)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,Milvasoft.Core.Exceptions.MilvaException,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="useLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(Milvasoft.Core.Exceptions.MilvaException)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="exceptionCode"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(Milvasoft.Core.Exceptions.MilvaException,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message.
            </summary>
            <param name="exceptionCode"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Boolean,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaBaseException"/> class  with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="useLocalizerKey"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaUserFriendlyException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="exceptionCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Core.Exceptions.MilvaValidationException">
            <summary>
            The exception that is thrown when attempt to add an entity with Id the repository contains an entity with the same Id.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaValidationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaValidationException"/> class with a specified error message.
            </summary>
            <param name="messageOrLocalizerKey"></param>
        </member>
        <member name="M:Milvasoft.Core.Exceptions.MilvaValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Milvasoft.Core.Exceptions.MilvaValidationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="messageOrLocalizerKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Milvasoft.Core.Extensions.Expressions">
            <summary>
            Expression extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Expressions.Append``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.ExpressionType)">
            <summary>
            Appends <paramref name="right"/> to <paramref name="left"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="expressionAppendType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Expressions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a lambda expression that represents a conditional AND operation
            </summary>
            <param name="left">An expression to set the left property of the binary expression</param>
            <param name="right">An expression to set the right property of the binary expression</param>
            <returns>A binary expression that has the node type property equal to AndAlso, 
            and the left and right properties set to the specified values</returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Expressions.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a lambda expression that represents a conditional OR operation
            </summary>
            <param name="left">An expression to set the left property of the binary expression</param>
            <param name="right">An expression to set the right property of the binary expression</param>
            <returns>A binary expression that has the node type property equal to OrElse, 
            and the left and right properties set to the specified values</returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Expressions.Combine``1(System.Linq.Expressions.Expression{System.Func{``0,``0}}[])">
            <summary>
            Combines two expressions to one.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Expressions.Combine``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Combines two expressions to one.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Expressions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Determines the right casting and pets property from expression with this right casting.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Expressions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Determines the right casting and pets property name from expression with this right casting.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Extensions.Filter">
            <summary>
            Helper for filtering.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Filter.FilterByDate``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}})">
             <summary>
             <para> Filter <paramref name="contentList"/> by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
             </summary>
             
             <remarks>
             
             <para><b>Remarks: </b></para>
             
             <para> If a selection has been made between two dates, it will return those between the two dates. </para>
             <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
             <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
             
             </remarks>
            
             <typeparam name="T"></typeparam>
             <param name="contentList"></param>
             <param name="dateTopValue"></param>
             <param name="dateLowerValue"></param>
             <param name="dateProperty"></param>
             <returns> Filtered <paramref name="contentList"/> </returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Filter.CreateDateFilterExpression``1(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}})">
            <summary>
            <para> Creates expression by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks: </b></para>
            
            <para> If a selection has been made between two dates, it will return those between the two dates. </para>
            <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
            <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
            
            </remarks>
            
            <typeparam name="T"></typeparam>
            <param name="dateTopValue"></param>
            <param name="dateLowerValue"></param>
            <param name="dateProperty"></param>
            <returns> 
            
            Example Return when both values has value :
            
            <code> i => i.<paramref name="dateProperty"/> <b>biggerThanOrEqual</b> <paramref name="dateLowerValue"/> <b>AND</b> i.<paramref name="dateProperty"/> <b>lessThanOrEqual</b> <paramref name="dateTopValue"/> </code>
            
            </returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Filter.CreateDateFilterExpression``1(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.DateTime}})">
            <summary>
            <para> Creates expression by <paramref name="dateTopValue"/> and <paramref name="dateLowerValue"/> values. </para>
            </summary>
            
            <remarks>
            
            <para><b>Remarks: </b></para>
            
            <para> If a selection has been made between two dates, it will return those between the two dates. </para>
            <para> If only the <paramref name="dateTopValue"/> value exists, it returns those larger than the <paramref name="dateLowerValue"/> value. </para>
            <para> If only the <paramref name="dateLowerValue"/> value exists, it returns those smaller than the <paramref name="dateTopValue"/> value. </para>
            
            </remarks>
            
            <typeparam name="T"></typeparam>
            <param name="dateTopValue"></param>
            <param name="dateLowerValue"></param>
            <param name="dateProperty"></param>
            <returns> 
            
            Example Return when both values has value :
            
            <code> i => i.<paramref name="dateProperty"/> <b>biggerThanOrEqual</b> <paramref name="dateLowerValue"/> <b>AND</b> i.<paramref name="dateProperty"/> <b>lessThanOrEqual</b> <paramref name="dateTopValue"/> </code>
            
            </returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Filter.GetSpecMaxValues``2(System.Collections.Generic.IEnumerable{``0},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}}[])">
            <summary>
            <para>Gets maximum list values of matching properties of <paramref name="maxValuesObject"/> and <typeparamref name = "T" />.</para>
            <para>Returns that max values in <paramref name="maxValuesObject"/>.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturnObject"></typeparam>
            <param name="entities"></param>
            <param name="maxValuesObject"></param>
            <param name="requestedProperties"></param>
            <returns> Mapped <paramref name="maxValuesObject"/> </returns>
        </member>
        <member name="T:Milvasoft.Core.Extensions.GenericCollection">
            <summary>
            Generic collection helper extension methods.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GenericCollection.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks whether or not collection is null or empty. Assumes collection can be safely enumerated multiple times.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GenericCollection.PropertyExists``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Checks whether property exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="_"> Source collection for code readiness. </param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GenericCollection.OrderByProperty``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Order <paramref name="source"/> by <paramref name="propertyName"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GenericCollection.OrderByPropertyDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Order by descending <paramref name="source"/> by <paramref name="propertyName"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GenericCollection.ToBatches``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Splits list into batches with specified batch size.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="batchSize"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GenericCollection.UpdateSingletonInstance``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})">
            <summary>
            Updates singleton implementation instance with <paramref name="updateAction"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <param name="services"></param>
            <param name="updateAction"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GenericCollection.UpdateSingletonInstance``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``1})">
            <summary>
            Updates singleton implementation instance with <paramref name="updateAction"/>.
            </summary>
            <typeparam name="TImplementation"></typeparam>
            <typeparam name="TInstance"></typeparam>
            <param name="services"></param>
            <param name="updateAction"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Extensions.GeoLocation.GeoLocationExtensions">
            <summary>
            Extension methods for geo location.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GeoLocation.GeoLocationExtensions.CalculateDistance(Milvasoft.Core.Extensions.GeoLocation.Models.GeoPoint,Milvasoft.Core.Extensions.GeoLocation.Models.GeoPoint)">
            <summary>
            Calculates the distance in km from <paramref name="point1"/> to <paramref name="point2"/>.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Extensions.GeoLocation.Models.GeoPoint">
            <summary>
            Location point.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Extensions.GeoLocation.Models.GeoPoint.Latitude">
            <summary>
            Latitude of point.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Extensions.GeoLocation.Models.GeoPoint.Longitude">
            <summary>
            Longitude of point.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.GeoLocation.Models.GeoPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initialize new instance of <see cref="T:Milvasoft.Core.Extensions.GeoLocation.Models.GeoPoint"/> with lat and lon.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="T:Milvasoft.Core.Extensions.Helpers.ExpressionParameterReplacer">
            <summary>
            Expression parameter replacer for expression builder.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Helpers.ExpressionParameterReplacer.#ctor(System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Constructor of <see cref="T:Milvasoft.Core.Extensions.Helpers.ExpressionParameterReplacer"/>
            </summary>
            <param name="fromParameters"></param>
            <param name="toParameters"></param>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Helpers.ExpressionParameterReplacer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="node"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="T:Milvasoft.Core.Extensions.Helpers.ParameterReplaceVisitor">
            <summary>
            Expression parameter replacer for expression builder.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Helpers.ParameterReplaceVisitor.#ctor(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Constructor of <see cref="T:Milvasoft.Core.Extensions.Helpers.ParameterReplaceVisitor"/>
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Helpers.ParameterReplaceVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the System.Linq.Expressions.ParameterExpression.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Extensions.MilvaOptionsExtensions">
            <summary>
            Milvasoft library components options extensions.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Extensions.MilvaOptionsExtensions.ParentSectionName">
            <summary>
            Milvasoft main configuration object name.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.MilvaOptionsExtensions.ConfigureOptions``1(Milvasoft.Core.Abstractions.IMilvaBuilder,Microsoft.Extensions.Configuration.IConfigurationManager)">
            <summary>
            Adds <see cref="T:Microsoft.Extensions.Localization.LocalizationOptions"/> as <see cref="T:Microsoft.Extensions.Options.IOptions`1"/>.
            </summary>
            <param name="builder"></param>
            <param name="configurationManager"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Extensions.Strings">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Strings.ToUpperFirst(System.String,System.Globalization.CultureInfo)">
            <summary>
            Uppercases the first letter of the word.
            </summary>
            <param name="str"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Strings.ToUpperInvariantFirst(System.String)">
            <summary>
            Uppercases the first letter of the word using the casing rules of the invariant culture.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Strings.ToLowerFirst(System.String,System.Globalization.CultureInfo)">
            <summary>
            Lowercases the first letter of the word.
            </summary>
            <param name="str"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Strings.ToLowerInvariantFirst(System.String)">
            <summary>
            Lowercases the first letter of the word using the casing rules of the invariant culture.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Strings.GetByteArray(System.String)">
            <summary>
            Gets <paramref name="str"/>'s bytes.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Strings.GetString(System.Byte[])">
            <summary>
            Gets string from <paramref name="array"/>.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Strings.HashToByteArray(System.String)">
            <summary>
            Hashes <paramref name="str"/> with <see cref="T:System.Security.Cryptography.SHA256"/>
            </summary>
            <param name="str"></param>
            <returns> Hashed <paramref name="str"/> as byte content. </returns>
        </member>
        <member name="M:Milvasoft.Core.Extensions.Strings.Hash(System.String)">
            <summary>
            Computes the SHA256 hash of the given string.
            </summary>
            <param name="str">The string to be hashed.</param>
            <returns>The hashed string as a hexadecimal representation.</returns>
        </member>
        <member name="T:Milvasoft.Core.MilvaLazy`1">
            <summary>
            Custom <see cref="T:System.Lazy`1"/> class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Milvasoft.Core.MilvaLazy`1.#ctor(System.IServiceProvider)">
            <summary>
            Constructor of <see cref="T:Milvasoft.Core.MilvaLazy`1"/>.
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:Milvasoft.Core.NetworkUtil">
            <summary>
            Provides access network statistics.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.NetworkUtil.GetIPAddressesAsync">
            <summary>
            Gets all the IP addresses of the server machine hosting the application.
            </summary>
            <returns>a string array containing all the IP addresses of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Core.NetworkUtil.GetIPAddressAsync(System.Int32)">
            <summary>
            Gets the IP address of the server machine hosting the application.
            </summary>
            <param name="num">if set, it will return the Nth available IP address: if not set, the first available one will be returned.</param>
            <returns>the (first available or chosen) IP address of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Core.NetworkUtil.HasIPAddressAsync(System.Net.IPAddress)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Core.NetworkUtil.HasIPAddressAsync(System.String)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Core.NetworkUtil.GetIPAddresses">
            <summary>
            Gets all the IP addresses of the server machine hosting the application.
            </summary>
            <returns>a string array containing all the IP addresses of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Core.NetworkUtil.GetIPAddress(System.Int32)">
            <summary>
            Gets the IP address of the server machine hosting the application.
            </summary>
            <param name="num">if set, it will return the Nth available IP address: if not set, the first available one will be returned.</param>
            <returns>the (first available or chosen) IP address of the server machine</returns>
        </member>
        <member name="M:Milvasoft.Core.NetworkUtil.HasIPAddress(System.Net.IPAddress)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="M:Milvasoft.Core.NetworkUtil.HasIPAddress(System.String)">
            <summary>
            Checks if the given IP address is one of the IP addresses registered to the server machine hosting the application.
            </summary>
            <param name="ipAddress">the IP Address to check</param>
            <returns>TRUE if the IP address is registered, FALSE otherwise</returns>
        </member>
        <member name="T:Milvasoft.Core.RegexMatcher">
            <summary>
            Helper class for match input string and regex.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.RegexMatcher.MatchRegex(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regex"/>.
            </summary>
            <param name="regex"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.RegexMatcher.MatchRegex(System.String,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regexString"/>.
            </summary>
            <param name="input"></param>
            <param name="regexString"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.RegexMatcher.GetMatchResult(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regex"/>.
            </summary>
            <param name="regex"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.RegexMatcher.GetMatchResult(System.String,System.String)">
            <summary>
            Checks if <paramref name="input"/> matches <paramref name="regexString"/>.
            </summary>
            <param name="input"></param>
            <param name="regexString"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Request">
            <summary>
            Helper class for request processes.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Core.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="content"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Core.Request.CreateRequestMessage(System.Net.Http.HttpMethod,System.Text.Encoding,System.String,System.String,System.Object,System.Version,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates HTTP request message.
            </summary>
            <param name="encoding"></param>
            <param name="mediaType"> etc "json" </param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="content"></param>
            <param name="version"></param>
            <param name="headers"></param>
            <returns> HttpRequestMessage </returns>
        </member>
        <member name="M:Milvasoft.Core.Request.CreateRequestUrl(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <b>Makes reques url from requested params.</b> <para> For more detailed information of URL Sections, please refer to the remarks section where the method is described.</para>
            </summary>
            
            Remarks:
            
              https://www.milvasoft.com:444/api/v1/products/product?id=1
              _____   ________________  ___ _______________________  ____  
                |             |          |              |              |   
              protocol        |          |           pathName        query 
                          hostName       |                                 
                                        port                               
            
            
            
             !!! Hostname can be IP Address. (e.g. 127.20.10.1) 
            
            <param name="protocol"></param>
            <param name="hostName"></param>
            <param name="port"></param>
            <param name="pathName"></param>
            <param name="query"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Request.CreateRequestUrlFromAddress(System.String,System.String,System.String,System.String)">
            <summary>
            <b>Makes reques url from requested params.</b>  <para> For more detailed information of URL Sections, please refer to the remarks section where the method is described. </para>
            </summary>
            
            Remarks:
            
              https://www.milvasoft.com:444/api/v1/products/product?id=1
              _________________________  ___ _______________________  ____  
                           |              |              |              |   
                        address           |           pathName        query 
                                          |                                 
                                         port                               
            
            
            
             !!! Hostname can be IP Address. (e.g. 127.20.10.1) 
            
            <param name="address"></param>
            <param name="pathName"></param>
            <param name="query"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.ServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extension for adding milva core components.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.ServiceCollectionExtension.AddMilvaLazy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            It configures the Lazy implementation to work with the dependency injection container.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.EntityPropertyNames">
            <summary>
            Auditing property names.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.LocalizerKeys">
            <summary>
            Localizer message keys
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.MilvaStatusCodes">
            <summary>
            Http status codes.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Constants.MimeTypeNames">
            <summary>
            Common mime types. 
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXJavascript">
            <summary>Used to denote the encoding necessary for files containing JavaScript source code. The alternative MIME type for this file type is text/javascript.</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioL24">
            <summary>24bit Linear PCM audio at 8-48kHz, 1-N channels; Defined in RFC 3190</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXShockwaveFlash">
            <summary>Adobe Flash files for example with the extension .swf</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationOctetStream">
            <summary>Arbitrary binary data.[5] Generally speaking this type identifies files that are not associated with a specific application. Contrary to past assumptions by software packages such as Apache this is not a type that should be applied to unknown files. In such a case, a server or application should not indicate a content type, as it may be incorrect, but rather, should omit the type in order to allow the recipient to guess the type.[6]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationAtomXml">
            <summary>Atom feeds</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextCss">
            <summary>Cascading Style Sheets; Defined in RFC 2318</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextCmd">
            <summary>commands; subtype resident in Gecko browsers like Firefox 3.5</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextCsv">
            <summary>Comma-separated values; Defined in RFC 4180</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXDeb">
            <summary>deb (file format), a software package format used by the Debian project</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartEncrypted">
            <summary>Defined in RFC 1847</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartSigned">
            <summary>Defined in RFC 1847</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MessageHttp">
            <summary>Defined in RFC 2616</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelExample">
            <summary>Defined in RFC 4735</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXDvi">
            <summary>device-independent document in DVI format</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXmlDtd">
            <summary>DTD files; Defined by RFC 3023</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationJavascript">
            <summary>
            ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/ecmascript but with looser processing rules) 
            It is not accepted in IE 8 or earlier - text/javascript is accepted but it is defined as obsolete in RFC 4329.
            The "type" attribute of the script tag in HTML5 is optional and in practice omitting the media type of JavaScript programs is the most interoperable solution since 
            all browsers have always assumed the correct default even before HTML5.
            </summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationEcmascript">
            <summary>ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/javascript but with stricter processing rules)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationEdifact">
            <summary>EDI EDIFACT data; Defined in RFC 1767</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationEdiX12">
            <summary>EDI X12 data; Defined in RFC 1767</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MessagePartial">
            <summary>Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MessageRfc822">
            <summary>Email; EML files, MIME files, MHT files, MHTML files; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextXml">
            <summary>Extensible Markup Language; Defined in RFC 3023</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoXFlv">
            <summary>Flash video (FLV files)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageGif">
            <summary>GIF image; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextXGwtRpc">
            <summary>GoogleWebToolkit data</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXGzip">
            <summary>Gzip</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextHtml">
            <summary>HTML; Defined in RFC 2854</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageVndMicrosoftIcon">
            <summary>ICO image; Registered[9]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelIges">
            <summary>IGS files, IGES files; Defined in RFC 2077</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MessageImdnXml">
            <summary>IMDN Instant Message Disposition Notification; Defined in RFC 5438</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationJson">
            <summary>JavaScript Object Notation JSON; Defined in RFC 4627</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationJsonPatch">
            <summary>JavaScript Object Notation (JSON) Patch; Defined in RFC 6902</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextJavascript">
            <summary>JavaScript - Defined in and obsoleted by RFC 4329 in order to discourage its usage in favor of application/javascript. 
            However,text/javascript is allowed in HTML 4 and 5 and, unlike application/javascript, has cross-browser support. 
            The "type" attribute of the script tag in HTML5 is optional and there is no need to use it at all since all browsers have always assumed the correct
            default (even in HTML 4 where it was required by the specification).</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImagePjpeg">
            <summary>JPEG JFIF image; Associated with Internet Explorer; Listed in ms775147(v=vs.85) - Progressive JPEG, initiated before global browser support for progressive 
            JPEGs (Microsoft and Firefox).</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageJpeg">
            <summary>JPEG JFIF image; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextXJqueryTmpl">
            <summary>jQuery template data</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndGoogleEarthKmlXml">
            <summary>KML files (e.g. for Google Earth)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXLatex">
            <summary>LaTeX files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoXMatroska">
            <summary>Matroska open media format</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet">
            <summary>Microsoft Excel 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndMsExcel">
            <summary>Microsoft Excel files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation">
            <summary>Microsoft Powerpoint 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndMsPowerpoint">
            <summary>Microsoft Powerpoint files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument">
            <summary>Microsoft Word 2007 files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationMsword">
            <summary>Microsoft Word files[15]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartAlternative">
            <summary>MIME Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartMixed">
            <summary>MIME Email; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartRelated">
            <summary>MIME Email; Defined in RFC 2387 and used by MHTML (HTML mail)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.MultipartFormData">
            <summary>MIME Webform; Defined in RFC 2388</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndMozillaXulXml">
            <summary>Mozilla XUL files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioMpeg">
            <summary>MP3 or other MPEG audio; Defined in RFC 3003</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioMp4">
            <summary>MP4 audio</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoMp4">
            <summary>MP4 video; Defined in RFC 4337</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoMpeg">
            <summary>MPEG-1 video with multiplexed audio; Defined in RFC 2045 and RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelMesh">
            <summary>MSH files, MESH files; Defined in RFC 2077, SILO files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioBasic">
            <summary>mulaw audio at 8 kHz, 1 channel; Defined in RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoOgg">
            <summary>Ogg Theora or other video (with audio); Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioOgg">
            <summary>Ogg Vorbis, Speex, Flac and other audio; Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationOgg">
            <summary>Ogg, a multimedia bitstream container format; Defined in RFC 5334</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXopXml">
            <summary>OP</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOasisOpendocumentGraphics">
            <summary>OpenDocument Graphics; Registered[14]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOasisOpendocumentPresentation">
            <summary>OpenDocument Presentation; Registered[13]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOasisOpendocumentSpreadsheet">
            <summary>OpenDocument Spreadsheet; Registered[12]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationVndOasisOpendocumentText">
            <summary>OpenDocument Text; Registered[11]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs12">
            <summary>p12 files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs7Certificates">
            <summary>p7b and spc files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs7Mime">
            <summary>p7c files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs7Certreqresp">
            <summary>p7r files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXPkcs7Signature">
            <summary>p7s files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationPdf">
            <summary>Portable Document Format, PDF has been in use for document exchange on the Internet since 1993; Defined in RFC 3778</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImagePng">
            <summary>Portable Network Graphics; Registered,[8] Defined in RFC 2083</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationPostscript">
            <summary>PostScript; Defined in RFC 2046</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoQuicktime">
            <summary>QuickTime video; Registered[10]</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXRarCompressed">
            <summary>RAR archive files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioVndRnRealaudio">
            <summary>RealAudio; Documented in RealPlayer Customer Support Answer 2559</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationRdfXml">
            <summary>Resource Description Framework; Defined by RFC 3870</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationRssXml">
            <summary>RSS feeds</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationSoapXml">
            <summary>SOAP; Defined by RFC 3902</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXStuffit">
            <summary>StuffIt archive files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageSvgXml">
            <summary>SVG vector image; Defined in SVG Tiny 1.2 Specification Appendix M</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ImageTiff">
            <summary>Tag Image File Format (only for Baseline TIFF); Defined in RFC 3302</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXTar">
            <summary>Tarball files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextPlain">
            <summary>Textual data; Defined in RFC 2046 and RFC 3676</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXFontTtf">
            <summary>TrueType Font No registered MIME type, but this is the most commonly used</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.TextVcard">
            <summary>vCard (contact information); Defined in RFC 6350</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioVorbis">
            <summary>Vorbis encoded audio; Defined in RFC 5215</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioVndWave">
            <summary>WAV audio; Defined in RFC 2361</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationFontWoff">
            <summary>Web Open Font Format; (candidate recommendation; use application/x-font-woff until standard is official)</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoWebm">
            <summary>WebM Matroska-based open media format</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioWebm">
            <summary>WebM open media format</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioXMsWax">
            <summary>Windows Media Audio Redirector; Documented in Microsoft help page</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.AudioXMsWma">
            <summary>Windows Media Audio; Documented in Microsoft KB 288102</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.VideoXMsWmv">
            <summary>Windows Media Video; Documented in Microsoft KB 288102</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelVrml">
            <summary>WRL files, VRML files; Defined in RFC 2077</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelX3DXml">
            <summary>X3D ISO standard for representing 3D computer graphics, X3D XML files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelX3DBinary">
            <summary>X3D ISO standard for representing 3D computer graphics, X3DB binary files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ModelX3DVrml">
            <summary>X3D ISO standard for representing 3D computer graphics, X3DV VRML files</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationXhtmlXml">
            <summary>XHTML; Defined by RFC 3236</summary>
        </member>
        <member name="F:Milvasoft.Core.Utils.Constants.MimeTypeNames.ApplicationZip">
            <summary>ZIP archive files; Registered[7]</summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.ExceptionConverter`1">
            <summary>
            System.Text.Json exception converter. Ignores <see cref="P:System.Exception.TargetSite"/> property. Only serializes <see cref="P:System.Exception.Message"/> and <see cref="P:System.Exception.StackTrace"/> properties.
            </summary>
            <typeparam name="TExceptionType"></typeparam>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.ExceptionConverter`1.CanConvert(System.Type)">
            <summary>
            Determnies whether <typeparamref name="TExceptionType"/> is convertible to <see cref="T:System.Exception"/> or not.
            </summary>
            <param name="typeToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.ExceptionConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserialization operation.
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.ExceptionConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serialization operation.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.InterfaceConverter`2">
            <summary>
            Converter for deserializing generic interfaces with System.Text.Json. 
            </summary>
            <typeparam name="TImplementation"></typeparam>
            <typeparam name="TInterface"></typeparam>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverter`2.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserialization operation.
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverter`2.Write(System.Text.Json.Utf8JsonWriter,`1,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serialization operation.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory`2">
            <summary>
            Converter factory for deserializing generic interfaces with System.Text.Json. 
            </summary>
            <typeparam name="TImplementation"></typeparam>
            <typeparam name="TInterface"></typeparam>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory`2.#ctor">
            <summary>
            Initializes new instance.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory">
            <summary>
            Converter factory for deserializing generic interfaces with System.Text.Json. 
            </summary>
            <param name="implementationType"></param>
            <param name="interfaceType"></param>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.#ctor(System.Type,System.Type)">
            <summary>
            Converter factory for deserializing generic interfaces with System.Text.Json. 
            </summary>
            <param name="implementationType"></param>
            <param name="interfaceType"></param>
        </member>
        <member name="P:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.ImplementationType">
            <summary>
            Implementation type.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.InterfaceType">
            <summary>
            Interface type.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.CanConvert(System.Type)">
            <summary>
            Determnies whether <paramref name="typeToConvert"/> is convertible to interface type or not.
            </summary>
            <param name="typeToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.InterfaceConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates json converter.
            </summary>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions">
            <summary>
            Options that the library will use for serialization and deserialization operations.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.Current">
            <summary>
            Current options.
            </summary>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.NewOptionsObjectFromCurrent">
            <summary>
            Create new <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance from <see cref="P:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.Current"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.ConfigureCurrentMilvaJsonSerializerOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.Text.Json.JsonSerializerOptions},System.Boolean)">
            <summary>
            Configure <see cref="P:Milvasoft.Core.Utils.JsonConverters.MilvaJsonConverterOptions.Current"/> options with <paramref name="options"/>.
            </summary>
            <param name="services"></param>
            <param name="options"></param>
            <param name="includeMilvaConverters"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Core.Utils.Models.InvalidString">
            <summary>
            Invalid strings for prevent hacking or someting ;)
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.InvalidString.Name">
            <summary>
            Name of invalid string.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.InvalidString.Values">
            <summary>
            Invalid values.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Models.OrderByProp">
            <summary>
            Order by properties for multiple ordey by in database.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.OrderByProp.PropName">
            <summary>
            Determines order by Property name of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.OrderByProp.Ascending">
            <summary>
            Determines order by ascending or descending.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.OrderByProp.Priority">
            <summary>
            Priority of order operation. Ex. first order by creation date then order by updated date.
            </summary>
        </member>
        <member name="T:Milvasoft.Core.Utils.Models.PaginationDTO`1">
            <summary>
            Stores pagination information.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.PaginationDTO`1.DTOList">
            <summary>
            Items in page. 
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.PaginationDTO`1.PageCount">
            <summary>
            Page count information.
            </summary>
        </member>
        <member name="P:Milvasoft.Core.Utils.Models.PaginationDTO`1.TotalDataCount">
            <summary>
            Total data count of all pages.
            </summary>
        </member>
    </members>
</doc>
