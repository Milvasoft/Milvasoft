<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.Identity</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.Identity.Abstract.ILoginDTO">
            <summary>
            Login and sign up processes are happens with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ILoginDTO.UserName">
            <summary>
            UserName of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ILoginDTO.Email">
            <summary>
            Email of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ILoginDTO.Password">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ILoginDTO.Persistent">
            <summary>
            Remember me option.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Abstract.ILoginResultDTO`1">
            <summary>
            Login result DTO for DI.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ILoginResultDTO`1.ErrorMessages">
            <summary>
            Error messages of result.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ILoginResultDTO`1.Token">
            <summary>
            If result is success sets the token.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Abstract.IMilvaPasswordHasher">
            <summary>
            Implements the standard Identity password hashing
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaPasswordHasher.HashPassword(System.String)">
            <summary>
            Returns a hashed representation of the supplied <paramref name="password"/>.
            </summary>
            <param name="password">The password to hash.</param>
            <returns>A hashed representation of the supplied <paramref name="password"/>.</returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaPasswordHasher.VerifyHashedPassword(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> indicating the result of a password hash comparison.
            </summary>
            <param name="hashedPassword">The hash value for a user's stored password.</param>
            <param name="providedPassword">The password supplied for comparison.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result of a password hash comparison.</returns>
            <remarks>Implementations of this method should be time consistent.</remarks>
        </member>
        <member name="T:Milvasoft.Identity.Abstract.IMilvaUserManager`2">
            <summary>
            Implements the standard Identity password hashing
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.ConfigureForCreate(`0,System.String)">
            <summary>
            Validates user, sets password hash, set normalized columns.
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.CheckPassword(`0,System.String)">
            <summary>
            Check password hash.
            </summary>
            <param name="user">The user</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.SetPasswordHash(`0,System.String)">
            <summary>
            Hashes password and sets user's password hash property.
            </summary>
            <param name="user">The user</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.ValidateAndSetPasswordHash(`0,System.String)">
            <summary>
            Validates and hashes password and sets user's password hash property. If validation failed throws exception.
            </summary>
            <param name="user">The user</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.ConfigureLockout(`0,System.Boolean)">
            <summary>
            Configures user's lockout. Use before login.
            </summary>
            <param name="user">The user</param>
            <param name="accessFailed"></param>
            <returns> If user locked returns true. </returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.PreLoginCheck(`0)">
            <summary>
            User confirmed props and locked check.
            </summary>
            <param name="user">The user</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.CanSignIn(`0)">
            <summary>
            User confirmed props check.
            </summary>
            <param name="user">The user whose sign-in status should be returned.</param>
            <returns> </returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.IsLockedOut(`0)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> his locked out.
            </summary>
            <param name="user">The user whose locked out status should be retrieved.</param>
            <returns>
            True if the specified <paramref name="user "/> is locked out, otherwise false.
            </returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.ValidateUser(`0,System.String)">
            <summary>
            Validates user.
            </summary>
            <param name="user"></param>
            <param name="password"></param>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.ValidatePassword(System.String)">
            <summary>
            Validates a password.
            </summary>
            <param name="password">The password supplied for validation</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.ValidateUserName(System.String)">
            <summary>
            Validates username.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.ValidateEmail(System.String)">
            <summary>
            Validates email.
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.GenerateUserToken(`0,Milvasoft.Identity.TokenProvider.Purpose,System.String)">
            <summary>
            Generates a token for the given <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be for.</param>
            <param name="value"></param>
            <param name="user">The user the token will be for.</param>
            <returns> </returns>
        </member>
        <member name="M:Milvasoft.Identity.Abstract.IMilvaUserManager`2.VerifyUserToken(`0,Milvasoft.Identity.TokenProvider.Purpose,System.String,System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="token"/> is valid for the given <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="purpose">The purpose the token should be generated for.</param>
            <param name="token">The token to validate</param>
            <param name="value"></param>
            <returns>
            True if the <paramref name="token"/>
            is valid, otherwise false.
            </returns>
        </member>
        <member name="T:Milvasoft.Identity.Abstract.ISignUpDTO">
            <summary>
            Login and sign up processes are happens with this dto.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ISignUpDTO.UserName">
            <summary>
            UserName of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ISignUpDTO.Email">
            <summary>
            Email of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ISignUpDTO.Password">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ISignUpDTO.PhoneNumber">
            <summary>
            Password of user.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Abstract.IToken">
            <summary>
            Login result DTO for DI.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.IToken.AccessToken">
            <summary>
            If result is success sets the token.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.IToken.Expiration">
            <summary>
            Expiration data of <see cref="P:Milvasoft.Identity.Abstract.IToken.AccessToken"/>.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.IToken.RefreshToken">
            <summary>
            Refresh token.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Abstract.ITokenManagement">
            <summary>
            Token management DTO for DI.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ITokenManagement.Secret">
            <summary>
            Gets or sets Secret key of token.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ITokenManagement.Issuer">
            <summary>
            Gets or sets Authorization issuer.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ITokenManagement.Audience">
            <summary>
            Gets or sets Authorization audience.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ITokenManagement.LoginProvider">
            <summary>
            Gets or sets Authorization issuer.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ITokenManagement.TokenName">
            <summary>
            Gets or sets Authorization audience.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ITokenManagement.AccessExpiration">
            <summary>
            Gets or sets AccessExpiration of token.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Abstract.ITokenManagement.RefreshExpiration">
            <summary>
            Gets or sets RefreshExpiration of token.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Builder.MilvaIdentityBuilder`2">
            <summary>
            Implements the standard Identity password hashing.
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Builder.MilvaIdentityBuilder`2.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationManager)">
            <summary>
            Creates new instance of <see cref="T:Milvasoft.Identity.Builder.MilvaIdentityBuilder`2"/>.
            </summary>
            <param name="services"></param>
            <param name="configurationManager"></param>
        </member>
        <member name="M:Milvasoft.Identity.Builder.MilvaIdentityBuilder`2.WithUserManager``1">
            <summary>
            Adds and configures the identity system for the specified User and Role types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Builder.MilvaIdentityBuilder`2.WithOptions(System.Action{Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions})">
            <summary>
            Adds and configures the identity system for the specified User and Role types.
            </summary>
            <param name="identityOptions">An action to configure the <see cref="T:Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Builder.MilvaIdentityBuilder`2.WithOptions">
            <summary>
            Adds and configures the identity system for the specified User and Role types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Builder.MilvaIdentityBuilder`2.PostConfigureIdentityOptions(System.Action{Milvasoft.Identity.Concrete.Options.MilvaIdentityPostConfigureOptions})">
            <summary>
            Adds and configures the identity system for the specified User and Role types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Identity.Builder.MilvaIdentityServiceCollectionExtensions">
            <summary>
            Implements the standard Milva Identity.
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Builder.MilvaIdentityServiceCollectionExtensions.AddMilvaIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationManager)">
            <summary>
            Adds the default identity system configuration for the specified User and Role types.
            </summary>
            <typeparam name="TUser">The type representing a User in the system.</typeparam>
            <typeparam name="TKey">The type representing a Key in the system.</typeparam>
            <param name="services">The services available in the application.</param>
            <param name="configurationManager"></param>
            <returns>An <see cref="T:Milvasoft.Identity.Builder.MilvaIdentityBuilder`2"/> for creating and configuring the identity system.</returns>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.Entity.MilvaUser`1">
            <summary>
            Represents a user in the identity system
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.Id">
            <summary>
            Gets or sets the primary key for this user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.UserName">
            <summary>
            Gets or sets the user name for this user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.NormalizedUserName">
            <summary>
            Gets or sets the normalized user name for this user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.Email">
            <summary>
            Gets or sets the email address for this user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.NormalizedEmail">
            <summary>
            Gets or sets the normalized email address for this user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.EmailConfirmed">
            <summary>
            Gets or sets a flag indicating if a user has confirmed their email address.
            </summary>
            <value>True if the email address has been confirmed, otherwise false.</value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.PasswordHash">
            <summary>
            Gets or sets a salted and hashed representation of the password for this user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.PhoneNumber">
            <summary>
            Gets or sets a telephone number for the user.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.PhoneNumberConfirmed">
            <summary>
            Gets or sets a flag indicating if a user has confirmed their telephone address.
            </summary>
            <value>True if the telephone number has been confirmed, otherwise false.</value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.TwoFactorEnabled">
            <summary>
            Gets or sets a flag indicating if two factor authentication is enabled for this user.
            </summary>
            <value>True if 2fa is enabled, otherwise false.</value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.LockoutEnd">
            <summary>
            Gets or sets the date and time, in UTC, when any user lockout ends.
            </summary>
            <remarks>
            A value in the past means the user is not locked out.
            </remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.LockoutEnabled">
            <summary>
            Gets or sets a flag indicating if the user could be locked out.
            </summary>
            <value>True if the user could be locked out, otherwise false.</value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Entity.MilvaUser`1.AccessFailedCount">
            <summary>
            Gets or sets the number of failed login attempts for the current user.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.IdentityHelpers">
            <summary>
            Identity helpers.
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.DescriptionJoin(Microsoft.AspNetCore.Identity.IdentityResult,System.Char)">
            <summary>
            Append joins <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/>.Description with <paramref name="seperator"/>.
            </summary>
            <param name="result"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.DescriptionJoin(Microsoft.AspNetCore.Identity.IdentityResult,System.String)">
            <summary>
            Append joins <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/>.Description with <paramref name="seperator"/>.
            </summary>
            <param name="result"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.DescriptionJoin(System.Collections.Generic.List{Microsoft.AspNetCore.Identity.IdentityError},System.Char)">
            <summary>
            Append joins <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/>.Description with <paramref name="seperator"/>.
            </summary>
            <param name="errorList"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.DescriptionJoin(System.Collections.Generic.List{Microsoft.AspNetCore.Identity.IdentityError},System.String)">
            <summary>
            Append joins <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/>.Description with <paramref name="seperator"/>.
            </summary>
            <param name="errorList"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.ThrowErrorMessagesIfNotSuccess(Microsoft.AspNetCore.Identity.IdentityResult)">
            <summary>
            If <paramref name="result"/> is not succeeded throwns <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.ThrowErrorMessagesIfNotSuccess(Microsoft.AspNetCore.Identity.IdentityResult,System.Char)">
            <summary>
            If <paramref name="result"/> is not succeeded throwns <see cref="T:Milvasoft.Core.Exceptions.MilvaUserFriendlyException"/>.
            </summary>
            <param name="result"></param>
            <param name="seperator"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.GenerateRandomPassword(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates random password.
            </summary>
            <param name="length"></param>
            <param name="nonAlphanumeric"></param>
            <param name="digit"></param>
            <param name="lowercase"></param>
            <param name="uppercase"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.GenerateRandomPassword(Microsoft.AspNetCore.Identity.PasswordOptions)">
            <summary>
            Generates random password according to <paramref name="passwordOptions"/>.
            </summary>
            <param name="passwordOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.IdentityHelpers.CreateRefreshToken">
            <summary>
            Creates random refresh token.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.MilvaIdentityDescriber">
            <summary>
            Provides localized identity error messages. All error's code is nameof(<see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/>) method. (e.g. Code = "DefaultError")
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.#ctor(Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer)">
            <summary>
            Constructor for localizer dependenct injection.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.DefaultError">
            <summary>
            An unknown failure has occurred. Localizer Key : IdentityDefaultError
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.DuplicateUserName(System.String)">
            <summary>
            There is another user with this username. Localizer Key : IdentityDuplicateUsername
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.DuplicateEmail(System.String)">
            <summary>
            There is another user with this email. Localizer Key : IdentityDuplicateEmail
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.InvalidUserName(System.String)">
            <summary>
            Invalid username. Localizer Key : IdentityInvalidUsername
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.InvalidEmail(System.String)">
            <summary>
            Invalid email. Localizer Key : IdentityInvalidEmail
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.ConcurrencyFailure">
            <summary>
            Concurrency failure, data has been modified. Localizer Key : IdentityConcurrencyFailure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.DuplicateRoleName(System.String)">
            <summary>
            This role is already exist. Localizer Key : IdentityDuplicateRoleName
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.InvalidRoleName(System.String)">
            <summary>
            Invalid role name. Localizer Key : IdentityInvalidRoleName
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.InvalidToken">
            <summary>
            Invalid credentials. Localizer Key : IdentityInvalidToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.LoginAlreadyAssociated">
            <summary>
            This user is already logged in. Localizer Key : IdentityLoginAlreadyAssociated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.PasswordMismatch">
            <summary>
            Incorrect password. Localizer Key : IdentityPasswordMismatch
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.PasswordRequiresDigit">
            <summary>
            Password must have at least one digit. Localizer Key : IdentityPasswordRequiresDigit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.PasswordRequiresLower">
            <summary>
            Password must have at least one lowercase. Localizer Key : IdentityPasswordRequiresLower
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.PasswordRequiresNonAlphanumeric">
            <summary>
            Password must have at least one alphanumeric character. Localizer Key : IdentityPasswordRequiresNonAlphanumeric
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.PasswordRequiresUniqueChars(System.Int32)">
            <summary>
            Password must have at least one special character. Localizer Key : IdentityPasswordRequiresUniqueChars
            </summary>
            <param name="uniqueChars"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.PasswordRequiresUpper">
            <summary>
            Password must have at least one uppercase. Localizer Key : IdentityPasswordRequiresUpper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.PasswordTooShort(System.Int32)">
            <summary>
            Password lenght is too short. Localizer Key : IdentityPasswordTooShort
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.RecoveryCodeRedemptionFailed">
            <summary>
            Recovery failed. Localizer Key : IdentityRecoveryCodeRedemptionFailed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.UserAlreadyHasPassword">
            <summary>
            User already has password. Localizer Key : IdentityUserAlreadyHasPassword
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.UserAlreadyInRole(System.String)">
            <summary>
            The user is already assigned to this role. Localizer Key : IdentityUserAlreadyInRole
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.UserLockoutNotEnabled">
            <summary>
            Lockout is not enabled for this user. Localizer Key : IdentityUserLockoutNotEnabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityDescriber.UserNotInRole(System.String)">
            <summary>
            User is not assigned to this role. Localizer Key : IdentityUserNotInRole
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower">
            <summary>
            Provides localized identity error messages. All error's code is nameof method. (e.g. Code = "DefaultError")
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowDefaultError">
            <summary>
            An unknown failure has occurred. Localizer Key : IdentityDefaultError
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowDuplicateUserName">
            <summary>
            There is another user with this username. Localizer Key : IdentityDuplicateUsername
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowDuplicateEmail">
            <summary>
            There is another user with this email. Localizer Key : IdentityDuplicateEmail
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowInvalidUserName">
            <summary>
            Invalid username. Localizer Key : IdentityInvalidUsername
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowInvalidEmail">
            <summary>
            Invalid email. Localizer Key : IdentityInvalidEmail
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowConcurrencyFailure">
            <summary>
            Concurrency failure, data has been modified. Localizer Key : IdentityConcurrencyFailure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowDuplicateRoleName">
            <summary>
            This role is already exist. Localizer Key : IdentityDuplicateRoleName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowInvalidRoleName">
            <summary>
            Invalid role name. Localizer Key : IdentityInvalidRoleName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowInvalidToken">
            <summary>
            Invalid credentials. Localizer Key : IdentityInvalidToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowLoginAlreadyAssociated">
            <summary>
            This user is already logged in. Localizer Key : IdentityLoginAlreadyAssociated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowPasswordMismatch">
            <summary>
            Incorrect password. Localizer Key : IdentityPasswordMismatch
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowPasswordRequiresDigit">
            <summary>
            Password must have at least one digit. Localizer Key : IdentityPasswordRequiresDigit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowPasswordRequiresLower">
            <summary>
            Password must have at least one lowercase. Localizer Key : IdentityPasswordRequiresLower
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowPasswordRequiresNonAlphanumeric">
            <summary>
            Password must have at least one alphanumeric character. Localizer Key : IdentityPasswordRequiresNonAlphanumeric
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowPasswordRequiresUniqueChars">
            <summary>
            Password must have at least one special character. Localizer Key : IdentityPasswordRequiresUniqueChars
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowPasswordRequiresUpper">
            <summary>
            Password must have at least one uppercase. Localizer Key : IdentityPasswordRequiresUpper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowPasswordTooShort">
            <summary>
            Password lenght is too short. Localizer Key : IdentityPasswordTooShort
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowRecoveryCodeRedemptionFailed">
            <summary>
            Recovery failed. Localizer Key : IdentityRecoveryCodeRedemptionFailed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowUserAlreadyHasPassword">
            <summary>
            User already has password. Localizer Key : IdentityUserAlreadyHasPassword
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowUserAlreadyInRole">
            <summary>
            The user is already assigned to this role. Localizer Key : IdentityUserAlreadyInRole
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowUserLockoutNotEnabled">
            <summary>
            Lockout is not enabled for this user. Localizer Key : IdentityUserLockoutNotEnabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowUserNotInRole">
            <summary>
            User is not assigned to this role. Localizer Key : IdentityUserNotInRole
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowNotAllowed">
            <summary>
            User is not assigned to this role. Localizer Key : NotAllowed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowLocked">
            <summary>
            User is not assigned to this role. Localizer Key : Locked
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaIdentityExceptionThrower.ThrowLockedWarning">
            <summary>
            User is not assigned to this role. Localizer Key : Locked
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.MilvaPasswordHasher">
            <summary>
            Implements the standard Identity password hashing.
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaPasswordHasher.#ctor(Microsoft.Extensions.Options.IOptions{Milvasoft.Identity.Concrete.Options.MilvaPasswordHasherOptions})">
            <summary>
            Creates a new instance of <see cref="T:Milvasoft.Identity.Concrete.MilvaPasswordHasher"/>.
            </summary>
            <param name="optionsAccessor"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaPasswordHasher.HashPassword(System.String)">
            <summary>
            Returns a hashed representation of the supplied <paramref name="password"/>.
            </summary>
            <param name="password">The password to hash.</param>
            <returns>A hashed representation of the supplied <paramref name="password"/>.</returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaPasswordHasher.VerifyHashedPassword(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> indicating the result of a password hash comparison.
            </summary>
            <param name="hashedPassword">The hash value for a user's stored password.</param>
            <param name="providedPassword">The password supplied for comparison.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result of a password hash comparison.</returns>
            <remarks>Implementations of this method should be time consistent.</remarks>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaPasswordHasher.ByteArraysEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays for equality. The method is specifically written so that the loop is not optimized.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.MilvaToken">
            <summary>
            Login result DTO for DI.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.MilvaToken.AccessToken">
            <summary>
            If result is success sets the token.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.MilvaToken.Expiration">
            <summary>
            Expiration data of <see cref="P:Milvasoft.Identity.Concrete.MilvaToken.AccessToken"/>.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.MilvaToken.RefreshToken">
            <summary>
            Refresh token.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.MilvaUserManager`2">
            <summary>
            Implements the standard Identity password hashing.
            </summary>
            <remarks>
            Creates a new instance of <see cref="T:Milvasoft.Identity.Concrete.MilvaUserManager`2"/>/
            </remarks>
            <param name="dataProtector"></param>
            <param name="options"></param>
            <param name="passwordHasher"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.#ctor(System.Lazy{Microsoft.AspNetCore.DataProtection.IDataProtectionProvider},Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions,System.Lazy{Milvasoft.Identity.Abstract.IMilvaPasswordHasher})">
            <summary>
            Implements the standard Identity password hashing.
            </summary>
            <remarks>
            Creates a new instance of <see cref="T:Milvasoft.Identity.Concrete.MilvaUserManager`2"/>/
            </remarks>
            <param name="dataProtector"></param>
            <param name="options"></param>
            <param name="passwordHasher"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.ConfigureForCreate(`0,System.String)">
            <summary>
            Validates user, sets password hash, set normalized columns.
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.CheckPassword(`0,System.String)">
            <summary>
            Check password hash.
            </summary>
            <param name="user">The user</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.SetPasswordHash(`0,System.String)">
            <summary>
            Hashes password and sets user's password hash property.
            </summary>
            <param name="user">The user</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.ValidateAndSetPasswordHash(`0,System.String)">
            <summary>
            Validates and hashes password and sets user's password hash property. If validation failed throws exception.
            </summary>
            <param name="user">The user</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.ConfigureLockout(`0,System.Boolean)">
            <summary>
            Configures user's lockout. Use before login.
            </summary>
            <param name="user">The user</param>
            <param name="accessFailed"></param>
            <returns> If user locked returns true. </returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.PreLoginCheck(`0)">
            <summary>
            User confirmed props and locked check.
            </summary>
            <param name="user">The user</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.CanSignIn(`0)">
            <summary>
            User confirmed props check.
            </summary>
            <param name="user">The user whose sign-in status should be returned.</param>
            <returns> </returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.IsLockedOut(`0)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> his locked out.
            </summary>
            <param name="user">The user whose locked out status should be retrieved.</param>
            <returns>
            True if the specified <paramref name="user "/> is locked out, otherwise false.
            </returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.ValidateUser(`0,System.String)">
            <summary>
            Validates user.
            </summary>
            <param name="user"></param>
            <param name="password"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.ValidatePassword(System.String)">
            <summary>
            Validates a password.
            </summary>
            <param name="password">The password supplied for validation</param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.ValidateUserName(System.String)">
            <summary>
            Validates username.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.ValidateEmail(System.String)">
            <summary>
            Validates email.
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.GenerateUserToken(`0,Milvasoft.Identity.TokenProvider.Purpose,System.String)">
            <summary>
            Generates a token for the given <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be for.</param>
            <param name="value"></param>
            <param name="user">The user the token will be for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, a token for
            the given user and purpose.
            </returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.VerifyUserToken(`0,Milvasoft.Identity.TokenProvider.Purpose,System.String,System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="token"/> is valid for the given <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="purpose">The purpose the token should be generated for.</param>
            <param name="token">The token to validate</param>
            <param name="value"></param>
            <returns>
            True if the <paramref name="token"/>
            is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.IsDigit(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is a digit.
            </summary>
            <param name="c">The character to check if it is a digit.</param>
            <returns>True if the character is a digit, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.IsLower(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is a lower case ASCII letter.
            </summary>
            <param name="c">The character to check if it is a lower case ASCII letter.</param>
            <returns>True if the character is a lower case ASCII letter, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.IsUpper(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is an upper case ASCII letter.
            </summary>
            <param name="c">The character to check if it is an upper case ASCII letter.</param>
            <returns>True if the character is an upper case ASCII letter, otherwise false.</returns>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserManager`2.IsLetterOrDigit(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is an ASCII letter or digit.
            </summary>
            <param name="c">The character to check if it is an ASCII letter or digit.</param>
            <returns>True if the character is an ASCII letter or digit, otherwise false.</returns>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.MilvaUserValidation`2">
            <summary>
            Provides an abstraction for user validation.
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserValidation`2.#ctor(Milvasoft.Core.Abstractions.Localization.IMilvaLocalizer)">
            <summary>
            Constructor for localizer dependenct injection.
            </summary>
            <param name="localizer"></param>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.MilvaUserValidation`2.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Validates the specified user as an asynchronous operation.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions">
            <summary>
            Provides localized identity error messages. All error's code is nameof method. (e.g. Code = "DefaultError")
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions.SectionName">
            <inheritdoc/>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions.User">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.UserOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.UserOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions.Password">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.PasswordOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.PasswordOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions.Lockout">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.LockoutOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.LockoutOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaIdentityOptions.SignIn">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.SignInOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.SignInOptions"/> for the identity system.
            </value>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.Options.MilvaIdentityPostConfigureOptions">
            <summary>
            Provides post congifure.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaIdentityPostConfigureOptions.RandomNumberGenerator">
            <summary>
            Random number generator.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.Options.MilvaLockoutOptions">
            <summary>
            Options for configuring user lockout.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaLockoutOptions.AllowedForNewUsers">
            <value>
            True if a newly created user can be locked out, otherwise false.
            </value>
            <remarks>
            Defaults to true.
            </remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaLockoutOptions.MaxFailedAccessAttempts">
            <summary>
            Gets or sets the number of failed access attempts allowed before a user is locked out,
            assuming lock out is enabled.
            </summary>
            <value>
            The number of failed access attempts allowed before a user is locked out, if lockout is enabled.
            </value>
            <remarks>Defaults to 5 failed attempts before an account is locked out.</remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaLockoutOptions.DefaultLockoutMinute">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> a user is locked out for when a lockout occurs.
            </summary>
            <value>The <see cref="T:System.TimeSpan"/> a user is locked out for when a lockout occurs.</value>
            <remarks>Defaults to 5 minutes.</remarks>
        </member>
        <member name="M:Milvasoft.Identity.Concrete.Options.MilvaLockoutOptions.GetLockoutMinute">
            <summary>
            Gets lockout minute as timespan.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.Options.MilvaPasswordHasherOptions">
            <summary>
            Password hasher options configuration.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordHasherOptions.IterationCount">
            <summary>
            Gets or sets the number of iterations used when hashing passwords using PBKDF2.
            </summary>
            <value>
            The number of iterations used when hashing passwords using PBKDF2.
            </value>
            <remarks>
            This value is only used when the compatibility mode is set to 'V3'.
            The value must be a positive integer. The default value is 10,000.
            </remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordHasherOptions.RandomNumberGenerator">
            <summary>
            Random number generator.
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.Options.MilvaPasswordOptions">
            <summary>
            Specifies options for password requirements.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordOptions.Hasher">
            <summary>
            Password hasher options.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordOptions.RequiredLength">
            <summary>
            Gets or sets the minimum length a password must be.
            </summary>
            <remarks>
            This defaults to 6.
            </remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordOptions.RequiredUniqueChars">
            <summary>
            Gets or sets the minimum number of unique chars a password must comprised of.
            </summary>
            <remarks>
            This defaults to 1.
            </remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordOptions.RequireNonAlphanumeric">
            <summary>
            Gets or sets a flag indicating if passwords must contain a non-alphanumeric character.
            </summary>
            <value>True if passwords must contain a non-alphanumeric character, otherwise false.</value>
            <remarks>
            This defaults to true.
            </remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordOptions.RequireLowercase">
            <summary>
            Gets or sets a flag indicating if passwords must contain a lower case ASCII character.
            </summary>
            <value>True if passwords must contain a lower case ASCII character.</value>
            <remarks>
            This defaults to true.
            </remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordOptions.RequireUppercase">
            <summary>
            Gets or sets a flag indicating if passwords must contain a upper case ASCII character.
            </summary>
            <value>True if passwords must contain a upper case ASCII character.</value>
            <remarks>
            This defaults to true.
            </remarks>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaPasswordOptions.RequireDigit">
            <summary>
            Gets or sets a flag indicating if passwords must contain a digit.
            </summary>
            <value>True if passwords must contain a digit.</value>
            <remarks>
            This defaults to true.
            </remarks>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.Options.MilvaSignInOptions">
            <summary>
            Options for user validation.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaSignInOptions.RequireConfirmedEmail">
            <summary>
            Gets or sets a flag indicating whether a confirmed email address is required to sign in.
            </summary>
            <value>True if a user must have a confirmed email address before they can sign in, otherwise false.</value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaSignInOptions.RequireConfirmedPhoneNumber">
            <summary>
            Gets or sets a flag indicating whether a confirmed telephone number is required to sign in.
            </summary>
            <value>True if a user must have a confirmed telephone number before they can sign in, otherwise false.</value>
        </member>
        <member name="T:Milvasoft.Identity.Concrete.Options.MilvaUserOptions">
            <summary>
            Options for user validation.
            </summary>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaUserOptions.AllowedUserNameCharacters">
            <summary>
            Gets or sets the list of allowed characters in the username used to validate user names.
            </summary>
            <value>
            The list of allowed characters in the username used to validate user names.
            </value>
        </member>
        <member name="P:Milvasoft.Identity.Concrete.Options.MilvaUserOptions.RequireUniqueEmail">
            <summary>
            Gets or sets a flag indicating whether the application requires unique emails for its users.
            </summary>
            <value>
            True if the application requires each user to have their own, unique email, otherwise false.
            </value>
        </member>
        <member name="T:Milvasoft.Identity.TokenProvider.DataProtectorExtensions">
            <summary>
            Provides protection and validation of identity tokens.
            </summary>
        </member>
        <member name="M:Milvasoft.Identity.TokenProvider.DataProtectorExtensions.Generate``1(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,System.String,``0)">
            <summary>
            Generates a protected token for the specified <paramref name="userId"/> as an asynchronous operation.
            </summary>
            <param name="protector"></param>
            <param name="purpose">The purpose the token will be used for.</param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Identity.TokenProvider.DataProtectorExtensions.Validate``1(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,System.String,System.String,``0)">
            <summary>
            Validates the protected <paramref name="token"/> for the specified <paramref name="actualUserId"/> and <paramref name="purpose"/> as an asynchronous operation.
            </summary>
            <param name="protector"></param>
            <param name="purpose">The purpose the token was be used for.</param>
            <param name="token">The token to validate.</param>
            <param name="actualUserId"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Identity.TokenProvider.StreamExtensions">
            <summary>
            Utility extensions to streams
            </summary>
        </member>
        <member name="T:Milvasoft.Identity.TokenProvider.DigitTokenProvider`2">
            <summary>
            Represents a token provider that generates time based codes using the user's security stamp.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
            <typeparam name="TKey">The type user's key.</typeparam>
        </member>
        <member name="M:Milvasoft.Identity.TokenProvider.DigitTokenProvider`2.Generate(Milvasoft.Identity.TokenProvider.Purpose,`0)">
            <summary>
            Generates a token for the specified <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be used for.</param>
            <param name="user">The user a token should be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the token for the specified 
            <paramref name="user"/> and <paramref name="purpose"/>.
            </returns>
            <remarks>
            The <paramref name="purpose"/> parameter allows a token generator to be used for multiple types of token whilst
            insuring a token for one purpose cannot be used for another. For example if you specified a purpose of "Email" 
            and validated it with the same purpose a token with the purpose of TOTP would not pass the check even if it was
            for the same user.
            
            Implementations of <see cref="T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1"/> should validate that purpose is not null or empty to
            help with token separation.
            </remarks>
        </member>
        <member name="M:Milvasoft.Identity.TokenProvider.DigitTokenProvider`2.Validate(Milvasoft.Identity.TokenProvider.Purpose,System.String,`0)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="token"/> is valid for the given
            <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be used for.</param>
            <param name="token">The token to validate.</param>
            <param name="user">The user a token should be validated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the a flag indicating the result
            of validating the <paramref name="token"> for the specified </paramref><paramref name="user"/> and <paramref name="purpose"/>.
            The task will return true if the token is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Milvasoft.Identity.TokenProvider.DigitTokenProvider`2.GetUserModifier(Milvasoft.Identity.TokenProvider.Purpose,`0)">
            <summary>
            Returns a constant, provider and user unique modifier used for entropy in generated tokens from user information.
            </summary>
            <param name="purpose">The purpose the token will be generated for.</param>
            <param name="user">The user a token should be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a constant modifier for the specified 
            <paramref name="user"/> and <paramref name="purpose"/>.
            </returns>
        </member>
        <member name="T:Milvasoft.Identity.TokenProvider.Purpose">
            <summary>
            Identity token generating purpose.
            </summary>
        </member>
        <member name="F:Milvasoft.Identity.TokenProvider.Purpose.EmailConfirm">
            <summary>
            Used when email confirmation.
            </summary>
        </member>
        <member name="F:Milvasoft.Identity.TokenProvider.Purpose.EmailChange">
            <summary>
            Used when email change.
            </summary>
        </member>
        <member name="F:Milvasoft.Identity.TokenProvider.Purpose.PasswordReset">
            <summary>
            USed when password reset.
            </summary>
        </member>
    </members>
</doc>
