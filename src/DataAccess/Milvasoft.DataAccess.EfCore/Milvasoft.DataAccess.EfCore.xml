<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.DataAccess.EfCore</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.DataAccess.EfCore.Configuration.AuditConfiguration">
            <summary>
            Entity auditing configuration. You can register this configuration in startup as singleton.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Configuration.AuditConfiguration.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Entity auditing configuration. You can register this configuration in startup as singleton.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Configuration.DataAccessConfiguration">
            <summary>
            IOptions aware custom MilvaDbContext configurations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DataAccessConfiguration.SectionName">
            <summary>
            Configuration section path in configuration file.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DataAccessConfiguration.DbContext">
            <summary>
            DbContext configuration.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DataAccessConfiguration.Repository">
            <summary>
            Audit configuration.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DataAccessConfiguration.Auditing">
            <summary>
            Audit configuration. Default is auditing only dates.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Configuration.DataAccessPostConfigureConfiguration">
            <summary>
            IOptions aware custom MilvaDbContext configurations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DataAccessPostConfigureConfiguration.GetCurrentUserNameMethod">
            <summary>
            Current user id getter method for auditing operations.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration">
            <summary>
            IOptions aware custom MilvaDbContext configurations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.UseUtcForDateTime">
            <summary>
            If it is true converts all saved DateTimes to UTC. Default value is false.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.DefaultSoftDeletionState">
            <summary>
            Soft delete state when delete operation. Default value is false.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.ResetSoftDeleteStateAfterEveryOperation">
            <summary>
            Soft delete state reset after every operation. Default value is true.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.GetCurrentUserNameMethod">
            <summary>
            Current user id getter method for auditing operations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.DynamicFetch">
            <summary>
            Dynamic data fetch configuration.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.InvokeGetCurrentUserMethod(System.IServiceProvider)">
            <summary>
            Invokes <see cref="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.GetCurrentUserNameMethod"/>.
            </summary>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Configuration.DynamicFetchConfiguration">
            <summary>
            IOptions aware custom MilvaDbContext configurations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DynamicFetchConfiguration.EntityAssemblyName">
            <summary>
            Entity assembly for <see cref="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.GetLookupsAsync(Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequest)"/> operations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DynamicFetchConfiguration.AllowedEntityNamesForLookup">
            <summary>
            Allowed entity names for <see cref="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.GetLookupsAsync(Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequest)"/> operations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.DynamicFetchConfiguration.MaxAllowedPropertyCountForLookup">
            <summary>
            Allowed entity count for dynamic fetch. Default value is 5.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Configuration.DynamicFetchConfiguration.GetEntityAssembly">
            <summary>
            Gets assembly for entity operations.    
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration">
            <summary>
            IOptions aware custom MilvaDbContext configurations.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration.DbContext">
            <summary>
            DbContext configuration.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration.Repository">
            <summary>
            Audit configuration.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration.Auditing">
            <summary>
            Audit configuration.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Configuration.RepositoryConfiguration">
            <summary>
            <see cref="T:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2"/> configuration.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.RepositoryConfiguration.DefaultSaveChangesChoice">
            <summary>
            All repository methods save changes(<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)"/>) after every operation. Except get operations. 
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.RepositoryConfiguration.DefaultSoftDeletedFetchState">
            <summary>
            Soft delete state. Default value is false.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Configuration.RepositoryConfiguration.ResetSoftDeletedFetchStateAfterEveryOperation">
            <summary>
            Soft delete state reset after every operation. Default value is true.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext">
            <summary>
            Handles all database operations with new features like soft deletion.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Handles all database operations with new features like soft deletion.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.ServiceProvider">
            <summary>
            Service provider for access DI contaniner in DbContext.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext._dbContextConfiguration">
            <summary>
            Milva specific db context configuration.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext._currentSoftDeleteState">
            <summary>
            Default prop for soft delete.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext._useUtcForDateTimes">
            <summary>
            Default prop for datetime configuration.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext._resetSoftDeleteStateAfterEveryOperation">
            <summary>
            It updates the state that determines whether soft delete state reset to default occurs after any operation.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration)">
            <summary>
            Initializes new instance.
            </summary>
            <param name="options"></param>
            <param name="dbContextConfiguration"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration,System.IServiceProvider)">
            <summary>
            Initializes new instance.
            </summary>
            <param name="options"></param>
            <param name="dbContextConfiguration"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Overrided the OnModelCreating for custom configurations to database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.SetDataAccessConfiguration(Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration)">
            <summary>
            Sets milva db context specific configuration.
            </summary>
            <param name="dbContextConfiguration"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.GetDataAccessConfiguration">
            <summary>
            Gets milva db context configuration object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.ChangeSoftDeletionState(Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState)">
            <summary>
            Changes soft deletion state.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.SetSoftDeletionStateToDefault">
            <summary>
            Sets soft deletion state to default state in <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.DataAccessConfiguration"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.SoftDeletionStateResetAfterOperation(System.Boolean)">
            <summary>
            It updates the state that determines whether soft delete state reset to default occurs after any operation.
            </summary>
            <param name="state">Soft delete reset state.</param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.GetCurrentSoftDeletionState">
            <summary>
            Gets current soft deletion state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.SaveChanges">
            <summary>
            Overrided the SaveChanges method for soft deleting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Overrided the SaveChangesAsync method for soft deleting.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.SaveChangesBulk(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChanges method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.SaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChangesAsync method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.AuditEntites">
            <summary>
            Provides auditing entities by AuditConfiguration.
            If deletion process happens then sets the IgnoreSoftDelete variable to true at the end of process.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.SoftDelete(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Soft delete operation.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.AuditDeletion(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Entity auditing for delete. 
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.AuditDate(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String,System.Boolean)">
            <summary>
            Entity auditing by date. 
            </summary>
            <param name="entry"></param>
            <param name="propertyName"></param>
            <param name="audit"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.AuditPerformerUser(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String,System.Boolean)">
            <summary>
            Entity auditing by performer user.
            </summary>
            <param name="entry"></param>
            <param name="propertyName"></param>
            <param name="audit"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.GetContentsAsync``1(Milvasoft.Components.Rest.Request.FilterRequest,Milvasoft.Components.Rest.Request.SortRequest,System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Gets requested contents by <typeparamref name="TEntity"/> DbSet.
            If this method gets soft deleted entities please override <see cref="M:Milvasoft.Core.Helpers.CommonHelper.CreateIsDeletedFalseExpression``1"/> method your own condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.GetLookupsAsync(Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequest)">
            <summary>
            Gets the lookup data for the specified <paramref name="lookupRequest"/>.
            </summary>
            <param name="lookupRequest">The lookup request containing the parameters for the lookup.</param>
            <returns>A list of lookup results containing the requested data.</returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext.GetUpdatablePropertiesBuilder``2(``1)">
            <summary>
            Gets <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> for entity's matching properties with <paramref name="dto"/>'s updatable properties.
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <param name="dto"></param>
            <remarks>
            
            This method is used to update the entity object with the values of the updatable properties in the DTO object.
            It iterates over the updatable properties in the DTO object and finds the matching property in the entity class.
            If a matching property is found and the property value is an instance of <see cref="T:Milvasoft.Types.Structs.IUpdateProperty"/> and IsUpdated property is true,
            the specified action is performed on the matching property in the entity object.
            
            <para></para>
            
            If entity implements <see cref="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModificationDate"/>, <see cref="F:Milvasoft.Core.Utils.Constants.EntityPropertyNames.LastModificationDate"/> property call will be added automatically.
            If entity implements <see cref="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModifier"/>, <see cref="F:Milvasoft.Core.Utils.Constants.EntityPropertyNames.LastModifierUserName"/> property call will be added automatically.
            If utc conversion requested in <see cref="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.UseUtcForDateTime"/>, <see cref="T:System.DateTime"/> typed property call will be added after converted to utc.
            
            </remarks>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaPooledDbContext">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaPooledDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Handles all database operations. Inherits <see cref="T:Milvasoft.DataAccess.EfCore.DbContextBase.MilvaDbContext"/>
            </summary>
            
            <remarks>
            <para> You must register <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration"/> in your application startup. </para>
            <para> If <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.IDataAccessConfiguration"/>'s AuditDeleter, AuditModifier or AuditCreator is true
                   and HttpMethod is POST,PUT or DELETE it will gets performer user in constructor from database.
                   This can affect performance little bit. But you want audit every record easily you must use this :( </para>
            </remarks>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions">
            <summary>
            Extension methods for MilvaDbContexts
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseTenantId(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> converters to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> typed properties.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseUtcDateTime(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Use UTC for datetime types.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseObjectId(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds <see cref="T:MongoDB.Bson.ObjectId"/> converters to <see cref="T:MongoDB.Bson.ObjectId"/> typed properties.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseAnnotationEncryption(Microsoft.EntityFrameworkCore.ModelBuilder,Milvasoft.Cryptography.Abstract.IMilvaCryptographyProvider)">
            <summary>
            Adds value converter(<see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter"/>) to string properties which marked with <see cref="T:Milvasoft.Attributes.Annotations.EncryptedAttribute"/>.
            </summary>
            <param name="modelBuilder"></param>
            <param name="encryptionProvider"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseEncryption(Microsoft.EntityFrameworkCore.ModelBuilder,Milvasoft.Cryptography.Abstract.IMilvaCryptographyProvider)">
            <summary>
            Adds value converter(<see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter"/>) to all strings properties.
            </summary>
            <param name="modelBuilder"></param>
            <param name="encryptionProvider"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseTurkishCollation(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            For PostgreSql, makes string properties for Turkish character compatible.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseIndexToIndelibleEntities(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds an index for each indelible entity for IsDeleted property.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseIndexToCreationAuditableEntities(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Adds an index for each creation auditable entity for CreationDate property.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseDefaultValue(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures default value for update database.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseSoftDeleteQueryFilter(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Enable the query filter for indelible entities.
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UsePrecision(Microsoft.EntityFrameworkCore.ModelBuilder,System.Int32,System.Int32)">
            <summary>
            Configures the decimal property of entities with decimal properties in decimal default(18,2) format.
            </summary>
            <param name="modelBuilder"></param>
            <param name="precision"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseAnnotationPrecision(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the decimal property of entities with decimal properties in decimal format according to <see cref="T:Milvasoft.Attributes.Annotations.DecimalPrecisionAttribute"/>.
            </summary>
            <remarks>
            You can use this method with <see cref="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UsePrecision(Microsoft.EntityFrameworkCore.ModelBuilder,System.Int32,System.Int32)"/> method. 
            </remarks>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UseTranslationEntityRelations(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Translation entities relationships.
            </summary>
            <remarks>
            You can use this method with <see cref="M:Milvasoft.DataAccess.EfCore.DbContextBase.ModelBuilderExtensions.UsePrecision(Microsoft.EntityFrameworkCore.ModelBuilder,System.Int32,System.Int32)"/> method. 
            </remarks>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2">
            <summary>
            Base repository for concrete repositories. All repositories must be have this methods.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ChangeSaveChangesChoice(Milvasoft.DataAccess.EfCore.Utils.Enums.SaveChangesChoice)">
            <summary>
            Determines whether save changes method called after every repository method.
            </summary>
            <param name="choice"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ResetSaveChangesChoiceToDefault">
            <summary>
            Resets SaveChanges choice to default.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.FetchSoftDeletedEntities(System.Boolean)">
            <summary>
            Determines whether soft deleted entities in the database are fetched from the database.
            </summary>
            <param name="state">Soft delete fetching state.</param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.SoftDeleteFetchStateResetAfterOperation(System.Boolean)">
            <summary>
            It updates the state that determines whether soft delete fetch state reset to default occurs after any fetch operation.
            </summary>
            <param name="state">Soft delete fetching reset state.</param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ResetSoftDeletedEntityFetchState">
            <summary>
            Resets soft deleted entity fetch style to default.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ResetSoftDeletedEntityFetchResetState">
            <summary>
            Resets soft deleted entity fetch style to default.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns first entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="condition"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetFirstOrDefaultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns first entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="conditionAfterProjection"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns single entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="condition"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetSingleOrDefaultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns single entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="conditionAfterProjection"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetByIdAsync(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetByIdAsync``1(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetAllAsync(Milvasoft.Components.Rest.Request.ListRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="listRequest"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetAllAsync``1(Milvasoft.Components.Rest.Request.ListRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="listRequest"></param>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetSomeAsync(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetSomeAsync``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <param name="conditionAfterProjection"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
             Adds single entity to database asynchronously. 
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
             Adds multiple entities to database asynchronously. 
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
             Updates specified entity in database asynchronously.
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.UpdateAsync(`0,System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <param name="propertySelectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <param name="propertySelectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
             Updates multiple entities in database asynchronously.
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
             Deletes single entity from database asynchronously.
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
             Deletes multiple entity from database asynchronously.
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ReplaceOldsWithNewsAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ReplaceOldsWithNewsInSeperateDatabaseProcessAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.RemoveAllAsync(System.Threading.CancellationToken)">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ExecuteUpdateAsync(System.Object,Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0},System.Threading.CancellationToken)">
            <summary>
            Runs execute update. Adds performer and perform time to to be updated properties.
            You can detect non null properties and create <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> with <see cref="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.GetUpdatablePropertiesBuilder``2(``1,System.Boolean)"/> method.
            </summary>
            <param name="id"></param>
            <param name="propertyBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ExecuteUpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0},System.Threading.CancellationToken)">
            <summary>
            Runs execute update with given <paramref name="predicate"/>. Adds performer and perform time to to be updated properties.
            </summary>
            <param name="predicate"></param>
            <param name="propertyBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ExecuteDeleteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Deletes all records that match the condition. If <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState"/> is active, it updates the soft delete properties of the relevant entity. 
            Note that this will not work with navigation properties.
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ExecuteDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Deletes all records that given <paramref name="predicate"/>. If <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState"/> is active, it updates the soft delete properties of the relevant entity. 
            Note that this will not work with navigation properties.
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkAddAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkUpdateAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkDeleteAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkAddWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkUpdateWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkDeleteWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.SaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetFirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns first entity or default value which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetFirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns first entity or default value which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="conditionAfterProjection"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetSingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns single entity or default value which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetSingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns single entity or default value which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="conditionAfterProjection"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetById(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns one entity by entity Id from database synchronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetById``1(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns one entity by entity Id from database synchronously.
            </summary>
            <param name="id"></param>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetAll(Milvasoft.Components.Rest.Request.ListRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="listRequest"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetAll``1(Milvasoft.Components.Rest.Request.ListRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="listRequest"></param>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetSome(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetSome``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <param name="conditionAfterProjection"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.Add(`0)">
            <summary>
             Adds single entity to database synchronously. 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database synchronously. 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.Update(`0)">
            <summary>
            Updates specified entity in database synchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates multiple entities in database synchronously.
            </summary>
            <param name="entities"></param>
            <param name="()()"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entity"></param>
            <param name="propertySelectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.Update(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entities"></param>
            <param name="propertySelectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.Delete(`0)">
            <summary>
             Deletes single entity from database synchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Deletes multiple entity from database synchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ReplaceOldsWithNews(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ReplaceOldsWithNewsInSeperateDatabaseProcess(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.RemoveAll">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ExecuteUpdate(System.Object,Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0})">
            <summary>
            Runs execute update. Adds performer and perform time to to be updated properties.
            You can detect non null properties and create <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> with <see cref="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.GetUpdatablePropertiesBuilder``2(``1,System.Boolean)"/> method.
            </summary>
            <param name="id"></param>
            <param name="propertyBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ExecuteUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0})">
            <summary>
            Runs execute update with given <paramref name="predicate"/>. Adds performer and perform time to to be updated properties.
            </summary>
            <param name="predicate"></param>
            <param name="propertyBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ExecuteDelete(System.Object)">
            <summary>
            Deletes all records that match the condition. If <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState"/> is active, it updates the soft delete properties of the relevant entity. 
            Note that this will not work with navigation properties.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.ExecuteDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes all records that given <paramref name="predicate"/>. If <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState"/> is active, it updates the soft delete properties of the relevant entity. 
            Note that this will not work with navigation properties.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkAdd(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkUpdate(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkDelete(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkAddWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkUpdateWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.BulkDeleteWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.SaveChanges">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.SaveChangesBulk(EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IBaseRepository`2.GetUpdatablePropertiesBuilder``1(``0)">
            <summary>
            Gets <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> for entity's matching properties with <paramref name="dto"/>'s updatable properties.
            </summary>
            <typeparam name="TDto"></typeparam>
            <param name="dto"></param>
            <remarks>
            
            This method is used to update the entity object with the values of the updatable properties in the DTO object.
            It iterates over the updatable properties in the DTO object and finds the matching property in the entity class.
            If a matching property is found and the property value is an instance of <see cref="T:Milvasoft.Types.Structs.IUpdateProperty"/> and IsUpdated property is true,
            the specified action is performed on the matching property in the entity object.
            
            <para></para>
            
            If entity implements <see cref="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModificationDate"/>, <see cref="F:Milvasoft.Core.Utils.Constants.EntityPropertyNames.LastModificationDate"/> property call will be added automatically.
            If entity implements <see cref="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModifier"/>, <see cref="F:Milvasoft.Core.Utils.Constants.EntityPropertyNames.LastModifierUserName"/> property call will be added automatically.
            If utc conversion requested in <see cref="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.UseUtcForDateTime"/>, <see cref="T:System.DateTime"/> typed property call will be added after converted to utc.
            
            </remarks>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IContextRepository`1">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IContextRepository`1.ChangeSoftDeletionState(Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState)">
            <summary>
            Changes soft deletion state.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Action,System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Action,System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase">
            <summary>
            Interface for base repository.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.ServiceProvider">
            <summary>
            Service provider for access DI contaniner in DbContext.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.SaveChangesBulk(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChanges method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.SaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Overrided the BulkSaveChangesAsync method for soft deleting.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.GetDataAccessConfiguration">
            <summary>
            Gets milva db context configuration object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.ChangeSoftDeletionState(Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState)">
            <summary>
            Changes soft deletion state.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.SetSoftDeletionStateToDefault">
            <summary>
            Sets soft deletion state to default state in <see cref="T:Milvasoft.DataAccess.EfCore.Configuration.DataAccessConfiguration"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.SoftDeletionStateResetAfterOperation(System.Boolean)">
            <summary>
            It updates the state that determines whether soft delete state reset to default occurs after any operation.
            </summary>
            <param name="state">Soft delete reset state.</param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.GetCurrentSoftDeletionState">
            <summary>
            Gets current soft deletion state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Abstract.IMilvaDbContextBase.GetUpdatablePropertiesBuilder``2(``1)">
            <summary>
            Gets <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> for entity's matching properties with <paramref name="dto"/>'s not null properties.
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <param name="dto"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
            <remarks>
            Constructor of ContextRepository for inject context.
            </remarks>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.#ctor(`0)">
            <summary>
            Helper repository for general DbContext(<typeparamref name="TContext"/>) operations.
            </summary>
            <remarks>
            Constructor of ContextRepository for inject context.
            </remarks>
            <param name="dbContext"></param>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1._dbContext">
            <summary>
            DbContext object.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.ChangeSoftDeletionState(Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState)">
            <summary>
            Changes soft deletion state.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.ApplyTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Action,System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.ApplyTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Action,System.Boolean)">
            <summary>
            Applies transaction process to requested function.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="rollbackFunction"></param>
            <param name="startTransaction"> When nested conditional transactions are desired, a transaction cannot be started for the transaction it contains. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.RepositoryBase.Concrete.ContextRepository`1.GetDbSet``1">
            <summary>
            Gets requested DbSet by <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.ServiceCollectionExtension">
            <summary>
            Service collection extension for configuring milva specific context features.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.ServiceCollectionExtension.ConfigureMilvaDataAccess(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Milvasoft.DataAccess.EfCore.Configuration.DataAccessConfiguration})">
            <summary>
            Adds required services to service collection for configuring milva specific context features.
            </summary>
            <param name="services"></param>
            <param name="dataAccessConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.ServiceCollectionExtension.ConfigureMilvaDataAccess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationManager)">
            <summary>
            Adds required services to service collection for configuring milva specific context features.
            </summary>
            <param name="services"></param>
            <param name="configurationManager"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.ServiceCollectionExtension.PostConfigureMilvaDataAccess(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Milvasoft.DataAccess.EfCore.Configuration.DataAccessPostConfigureConfiguration})">
            <summary>
            Adds required services to service collection for configuring milva specific context features.
            </summary>
            <param name="services"></param>
            <param name="postConfigureAction"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter">
            <summary>
            Defines the internal encryption converter for string values.
            </summary>
            <remarks>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter"/> instance.
            </remarks>
            <param name="encryptionProvider">Encryption provider</param>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter.#ctor(Milvasoft.Cryptography.Abstract.IMilvaCryptographyProvider,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
            Defines the internal encryption converter for string values.
            </summary>
            <remarks>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaEncryptionConverter"/> instance.
            </remarks>
            <param name="encryptionProvider">Encryption provider</param>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaObjectIdStringConverter">
            <summary>
            Converts <see cref="T:MongoDB.Bson.ObjectId"/> to <see cref="T:System.String"/> or <see cref="T:System.String"/> to <see cref="T:MongoDB.Bson.ObjectId"/>.
            </summary>
            <remarks>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaObjectIdStringConverter"/> instance.
            </remarks>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaObjectIdStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
            Converts <see cref="T:MongoDB.Bson.ObjectId"/> to <see cref="T:System.String"/> or <see cref="T:System.String"/> to <see cref="T:MongoDB.Bson.ObjectId"/>.
            </summary>
            <remarks>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.MilvaObjectIdStringConverter"/> instance.
            </remarks>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.Converters.TenantIdStringConverter">
            <summary>
            Converts <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> to <see cref="T:System.String"/> or <see cref="T:System.String"/> to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <remarks>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.TenantIdStringConverter"/> instance.
            </remarks>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.Converters.TenantIdStringConverter.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
            Converts <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/> to <see cref="T:System.String"/> or <see cref="T:System.String"/> to <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
            <remarks>
            Creates a new <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Converters.TenantIdStringConverter"/> instance.
            </remarks>
            <param name="mappingHints">Entity Framework mapping hints</param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SaveChangesChoice">
            <summary>
            Enumerates the choices for saving changes in a database context.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.Utils.Enums.SaveChangesChoice.AfterEveryOperation">
            <summary>
            Represents saving changes after every database operation.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.Utils.Enums.SaveChangesChoice.Manual">
            <summary>
            Represents manual saving of changes where the user is responsible for calling the save method.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState">
            <summary>
            Enumerates the states of soft deletion for database records.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState.Active">
            <summary>
            When SoftDeletion is active, the record is not deleted from the database, the <see cref="P:Milvasoft.Core.EntityBases.Abstract.Auditing.ISoftDeletable.IsDeleted"/> property is updated.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState.Passive">
            <summary>
            When SoftDeletion is disabled, the record is deleted from the database.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable">
            <summary>
            Supports queryable Include/ThenInclude chaining operators. 
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable`1">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable`2">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.Includable`1">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.Includable`2">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IncludableExtensions">
            <summary>
            Includable extension for Ops!yon API. For reason to use that class: We cannot use default include process which in EntityFramework. Because of mysql and context. 
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IncludableExtensions.Include``2(Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable{``0,``2},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable{``0,System.Collections.Generic.IEnumerable{``2}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IncludableExtensions.ThenInclude``3(Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable{``0,System.Collections.Generic.ICollection{``2}},System.Linq.Expressions.Expression{System.Func{``2,``1}})">
            <summary>
            Allows lazy loading.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOtherProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="includes"></param>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IncludeMultipleClass">
            <summary>
            Allows to include multiple class.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IncludeMultipleClass.IncludeMultiple``1(System.Linq.IQueryable{``0},System.Func{Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable{``0},Milvasoft.DataAccess.EfCore.Utils.IncludeLibrary.IIncludable})">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <example>
            var personnelTable = _personnelTableRepository.GetAllWithIncludes(i => i.Include(p=>p.personnel).Include(p=>p.tableSetting));
            </example>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupModel">
            <summary>
            Lookup result model.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupModel.PropertyName">
            <summary>
            Name of lookup property
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupModel.PropertyValue">
            <summary>
            Value of lookup property.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequest">
            <summary>
            For request content. 
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequest.Parameters">
            <summary>
            Requested parameters for lookups.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequestParameter">
            <summary>
            Lookup request parameters.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequestParameter.EntityName">
            <summary>
            Requested entity name.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequestParameter.RequestedPropertyNames">
            <summary>
            Requested properties.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequestParameter.Filtering">
            <summary>
            Filter criterias.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequestParameter.Sorting">
            <summary>
            Sort criterias.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupRequestParameter.UpdateFilterByForTranslationPropertyNames(System.Collections.Generic.List{System.String})">
            <summary>
            Updates the filter criteria for translation property names.
            </summary>
            <param name="translationPropertyNames">The list of translation property names.</param>
            <returns>The updated filter criteria.</returns>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupResult">
            <summary>
            For lookup requests. 
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupResult.EntityName">
            <summary>
            Lookup key. (e.g. Product)
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.LookupModels.LookupResult.Data">
            <summary>
            Result list.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions">
            <summary>
            Entity framework related extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.WithFiltering``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Applies filtering options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing filter options.</param>
            <returns>An IQueryable object with applied filtering.</returns>
            <remarks>
            This method applies filter options to the provided IQueryable data source based on the given <paramref name="listRequest"/> object.
            If the <paramref name="listRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.WithFiltering``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.FilterRequest)">
            <summary>
            Applies filtering options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="filteringRequest">The list request containing filter options.</param>
            <returns>An IQueryable object with applied filtering.</returns>
            <remarks>
            This method applies filter options to the provided IQueryable data source based on the given <paramref name="filteringRequest"/> object.
            If the <paramref name="filteringRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.WithSorting``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Applies sorting options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing sort options.</param>
            <returns>An IQueryable object with applied sorting.</returns>
            <remarks>
            This method applies sorting options to the provided IQueryable data source based on the given <paramref name="listRequest"/> object.
            If the <paramref name="listRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.WithSorting``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.SortRequest)">
            <summary>
            Applies sorting options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="sortingRequest">The list request containing sort options.</param>
            <returns>An IQueryable object with applied sorting.</returns>
            <remarks>
            This method applies sorting options to the provided IQueryable data source based on the given <paramref name="sortingRequest"/> object.
            If the <paramref name="sortingRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.WithFilteringAndSorting``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Applies sorting options to the IQueryable data source.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing sort options.</param>
            <returns>An IQueryable object with applied sorting.</returns>
            <remarks>
            This method applies sorting options to the provided IQueryable data source based on the given <paramref name="listRequest"/> object.
            If the <paramref name="listRequest"/> is null, the original IQueryable data is returned without any modifications.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.ToListResponseAsync``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paginated list result asynchronously from the provided IQueryable data source based on the specified list request parameters.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing pagination, filtering, and sorting options.</param>
            <param name="cancellationToken"></param>
            <returns>
            A Task representing the asynchronous operation that yields a ListResponse containing the paginated list result.
            </returns>
            <remarks>
            This method asynchronously retrieves a paginated list result from the provided IQueryable data source based on the specified list request parameters.
            It applies filtering, sorting, and pagination options to the IQueryable data before returning the paginated list result.
            The ListResponse object contains the retrieved data along with pagination metadata such as total data count, total page count, and current page number.
            If no pagination parameters are specified, the method returns the entire result set without pagination.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.ToListResponse``1(System.Linq.IQueryable{``0},Milvasoft.Components.Rest.Request.ListRequest)">
            <summary>
            Retrieves a paginated list result from the provided IQueryable data source based on the specified list request parameters.
            </summary>
            <typeparam name="TEntity">The type of entity in the IQueryable.</typeparam>
            <param name="query">The source IQueryable data.</param>
            <param name="listRequest">The list request containing pagination, filtering, and sorting options.</param>
            <returns>
            A ListResponse containing the paginated list result.
            </returns>
            <remarks>
            This method retrieves a paginated list result from the provided IQueryable data source based on the specified list request parameters.
            It applies filtering, sorting, and pagination options to the IQueryable data before returning the paginated list result.
            The ListResponse object contains the retrieved data along with pagination metadata such as total data count, total page count, and current page number.
            If no pagination parameters are specified, the method returns the entire result set without pagination.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.GetUpdatablePropertiesBuilder``2(``1,System.Boolean)">
            <summary>
            Gets <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> for entity's matching properties with <paramref name="dto"/>'s updatable properties.
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <param name="dto"></param>
            <param name="useUtcForDateTimes">Converts <see cref="T:System.DateTime"/> typed properties to utc.</param>
            <remarks>
            This method is used to update the entity object with the values of the updatable properties in the DTO object.
            It iterates over the updatable properties in the DTO object and finds the matching property in the entity class.
            If a matching property is found and the property value is an instance of <see cref="T:Milvasoft.Types.Structs.IUpdateProperty"/> and IsUpdated property is true,
            the specified action is performed on the matching property in the entity object.
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.IncludeAll``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Allows to all entities associated with deletions to be Included to the entity(s) to be included in the process.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.IncludeTranslations``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Allows to all entities associated with deletions to be Included to the entity(s) to be included in the process.
            Entities must be contains "Translations" navigation property for include process. (e.g. Poco.Translations)
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.IncludeTranslations``2(System.Linq.IQueryable{``0})">
            <summary>
            Allows to all entities associated with deletions to be Included to the entity(s) to be included in the process.
            Entities must be contains "Translations" navigation property for include process. (e.g. Poco.Translations)
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1">
            <summary>
            <see cref="T:Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1"/> expression builder for <see cref="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.ExecuteUpdate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0}}})"/>
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyValueMethodInfo">
            <summary>
            <see cref="M:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)"/> method info for reflection calls.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyCalls">
            <summary>
            Gets <see cref="T:Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1"/> expression. 
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Appends expressions to <see cref="P:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyCalls"/>
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Appends expressions to <see cref="P:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1.SetPropertyCalls"/>
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
            <param name="valueExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2">
            <summary>
            Base repository for concrete repositories. All Ops!yon repositories must be have this methods.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TContext"></typeparam>
            <summary>
             Base repository for concrete repositories. All Ops!yon repositories must be have this methods.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._dbContext">
            <summary>
            DbContext object.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._dbSet">
            <summary>
            DebSet object.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._dataAccessConfiguration">
            <summary>
            Data access configuration.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._resetSoftDeletedFetchState">
            <summary>
            It updates the state that determines whether soft delete fetch state reset occurs after any fetch operation.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._softDeletedFetching">
            <summary>
            Determines whether soft deleted entities in the database are fetched from the database.
            </summary>
        </member>
        <member name="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._saveChangesAfterEveryOperation">
            <summary>
            Determines whether save changes method called after every repository method.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.#ctor(`1)">
            <summary>
            Initializes new instance of <see cref="T:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2"/>
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ChangeSaveChangesChoice(Milvasoft.DataAccess.EfCore.Utils.Enums.SaveChangesChoice)">
            <summary>
            Determines whether save changes method called after every repository method.
            </summary>
            <param name="choice"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ResetSaveChangesChoiceToDefault">
            <summary>
            Resets SaveChanges choice to default.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.FetchSoftDeletedEntities(System.Boolean)">
            <summary>
            Determines whether soft deleted entities in the database are fetched from the database.
            </summary>
            <param name="state">Soft delete fetching state.</param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.SoftDeleteFetchStateResetAfterOperation(System.Boolean)">
            <summary>
            It updates the state that determines whether soft delete fetch state reset to default occurs after any fetch operation.
            </summary>
            <param name="state">Soft delete fetching reset state.</param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ResetSoftDeletedEntityFetchState">
            <summary>
            Resets soft deleted entity fetch style to default.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ResetSoftDeletedEntityFetchResetState">
            <summary>
            Resets soft deleted entity fetch style to default.
            </summary>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns first entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="condition"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetFirstOrDefaultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns first entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="conditionAfterProjection"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns single entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="condition"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetSingleOrDefaultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns single entity or default value which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="conditionAfterProjection"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetByIdAsync(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetByIdAsync``1(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetAllAsync(Milvasoft.Components.Rest.Request.ListRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="listRequest"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetAllAsync``1(Milvasoft.Components.Rest.Request.ListRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="listRequest"></param>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetSomeAsync(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetSomeAsync``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Returns all entities which IsDeleted condition is true from database asynchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <param name="conditionAfterProjection"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
             Adds single entity to database asynchronously. 
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
             Adds multiple entities to database asynchronously. 
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
             Updates specified entity in database asynchronously.
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
             Updates multiple entities in database asynchronously.
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.UpdateAsync(`0,System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <param name="propertySelectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <param name="propertySelectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
             Deletes single entity from database asynchronously.
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
             Deletes multiple entity from database asynchronously.
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ReplaceOldsWithNewsAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ReplaceOldsWithNewsInSeperateDatabaseProcessAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.RemoveAllAsync(System.Threading.CancellationToken)">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ExecuteUpdateAsync(System.Object,Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0},System.Threading.CancellationToken)">
            <summary>
            Runs execute update. Adds performer and perform time to to be updated properties.
            You can detect non null properties and create <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> with <see cref="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.GetUpdatablePropertiesBuilder``2(``1,System.Boolean)"/> method.
            </summary>
            <param name="id"></param>
            <param name="propertyBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ExecuteUpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0},System.Threading.CancellationToken)">
            <summary>
            Runs execute update with given <paramref name="predicate"/>. Adds performer and perform time to to be updated properties.
            </summary>
            <param name="predicate"></param>
            <param name="propertyBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ExecuteDeleteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Deletes all records that match the condition. If <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState"/> is active, it updates the soft delete properties of the relevant entity. 
            Note that this will not work with navigation properties.
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ExecuteDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Deletes all records that given <paramref name="predicate"/>. If <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState"/> is active, it updates the soft delete properties of the relevant entity. 
            Note that this will not work with navigation properties.
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkAddAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkUpdateAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkDeleteAsync(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig},System.Threading.CancellationToken)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkAddWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkUpdateWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkDeleteWithSaveChangesAsync(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetUpdatablePropertiesBuilder``1(``0)">
            <summary>
            Gets <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> for entity's matching properties with <paramref name="dto"/>'s updatable properties.
            </summary>
            <typeparam name="TDto"></typeparam>
            <param name="dto"></param>
            <remarks>
            
            This method is used to update the entity object with the values of the updatable properties in the DTO object.
            It iterates over the updatable properties in the DTO object and finds the matching property in the entity class.
            If a matching property is found and the property value is an instance of <see cref="T:Milvasoft.Types.Structs.IUpdateProperty"/> and IsUpdated property is true,
            the specified action is performed on the matching property in the entity object.
            
            <para></para>
            
            If entity implements <see cref="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModificationDate"/>, <see cref="F:Milvasoft.Core.Utils.Constants.EntityPropertyNames.LastModificationDate"/> property call will be added automatically.
            If entity implements <see cref="T:Milvasoft.Core.EntityBases.Abstract.Auditing.IHasModifier"/>, <see cref="F:Milvasoft.Core.Utils.Constants.EntityPropertyNames.LastModifierUserName"/> property call will be added automatically.
            If utc conversion requested in <see cref="P:Milvasoft.DataAccess.EfCore.Configuration.DbContextConfiguration.UseUtcForDateTime"/>, <see cref="T:System.DateTime"/> typed property call will be added after converted to utc.
            
            </remarks>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.SaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.DetachFromLocalIfExists(`0)">
            <summary>
            Detach entity if found in local store.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.CreateKeyEqualityExpressionWithIsDeletedFalse(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Creates Id == <paramref name="key"/> equality expression and append to <see cref="M:Milvasoft.Core.Helpers.CommonHelper.CreateIsDeletedFalseExpression``1"/>.
            </summary>
            <param name="key"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.CreateConditionExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            If <see cref="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._softDeletedFetching"/> is false,  appends is deleted false expression to <paramref name="conditionExpression"/>.
            Else does nothing to <paramref name="conditionExpression"/> but if <see cref="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._resetSoftDeletedFetchState"/> is true then sets <see cref="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._softDeletedFetching"/> false.
            </summary>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetQueryTrackingBehavior(System.Boolean)">
            <summary>
            Returns <see cref="T:Microsoft.EntityFrameworkCore.QueryTrackingBehavior"/> according to <paramref name="tracking"/>.
            </summary>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.InternalSaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Save changes according to <see cref="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._saveChangesAfterEveryOperation"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.InternalSaveChangesBulkAsync(EFCore.BulkExtensions.BulkConfig,System.Threading.CancellationToken)">
            <summary>
            Save changes according to <see cref="F:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2._saveChangesAfterEveryOperation"/>.
            </summary>
            <param name="bulkConfig"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.AddDeletionPropertyCalls(Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0})">
            <summary>
            Adds perform time, performer and IsDeleted proeperty calls to <paramref name="propertyBuilder"/>. 
            </summary>
            <param name="propertyBuilder"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.AddPerformTimePropertyCall(Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0},System.String)">
            <summary>
            Adds perform time property calls to <paramref name="propertyBuilder"/>.
            </summary>
            <param name="propertyBuilder"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.AddPerformerUserPropertyCall(Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0},System.String)">
            <summary>
            Adds performer user property calls to <paramref name="propertyBuilder"/>.
            </summary>
            <param name="propertyBuilder"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetFirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns first entity or default value which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetFirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns first entity or default value which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="conditionAfterProjection"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetSingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns single entity or default value which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetSingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns single entity or default value which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="conditionAfterProjection"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetById(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns one entity by entity Id from database synchronously.
            </summary>
            <param name="id"></param>
            <param name="conditionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetById``1(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns one entity by entity Id from database synchronously.
            </summary>
            <param name="id"></param>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projectionExpression"></param>
            <param name="tracking"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetAll(Milvasoft.Components.Rest.Request.ListRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="listRequest"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetAll``1(Milvasoft.Components.Rest.Request.ListRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="listRequest"></param>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="condition"></param>
            <param name="conditionAfterProjection"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetSome(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="tracking"></param>
            <param name="conditionExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.GetSome``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
             Returns all entities which IsDeleted condition is true from database synchronously. If the condition is requested, it also provides that condition.
            </summary>
            <param name="count"></param>
            <param name="condition"></param>
            <param name="projection"></param>
            <param name="tracking"></param>
            <param name="conditionAfterProjection"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.Add(`0)">
            <summary>
             Adds single entity to database synchronously. 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database synchronously. 
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.Update(`0)">
            <summary>
            Updates specified entity in database synchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates multiple entities in database synchronously.
            </summary>
            <param name="entities"></param>
            <param name="()()"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entity"></param>
            <param name="propertySelectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.Update(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specific properties updates.
            </summary>
            <param name="entities"></param>
            <param name="propertySelectors"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.Delete(`0)">
            <summary>
             Deletes single entity from database synchronously.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Deletes multiple entity from database synchronously.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ReplaceOldsWithNews(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ReplaceOldsWithNewsInSeperateDatabaseProcess(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces existing entities(<paramref name="oldEntities"/>) with new entities(<paramref name="newEntities"/>).
            </summary>
            <param name="oldEntities"></param>
            <param name="newEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.RemoveAll">
            <summary>
            Removes all entities from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ExecuteUpdate(System.Object,Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0})">
            <summary>
            Runs execute update. Adds performer and perform time to to be updated properties.
            You can detect non null properties and create <see cref="T:Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder`1"/> with <see cref="M:Milvasoft.DataAccess.EfCore.Utils.MilvaEfExtensions.GetUpdatablePropertiesBuilder``2(``1,System.Boolean)"/> method.
            </summary>
            <param name="id"></param>
            <param name="propertyBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ExecuteUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Milvasoft.DataAccess.EfCore.Utils.SetPropertyBuilder{`0})">
            <summary>
            Runs execute update with given <paramref name="predicate"/>. Adds performer and perform time to to be updated properties.
            </summary>
            <param name="predicate"></param>
            <param name="propertyBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ExecuteDelete(System.Object)">
            <summary>
            Deletes all records that match the condition. If <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState"/> is active, it updates the soft delete properties of the relevant entity. 
            Note that this will not work with navigation properties.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.ExecuteDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes all records that given <paramref name="predicate"/>. If <see cref="T:Milvasoft.DataAccess.EfCore.Utils.Enums.SoftDeletionState"/> is active, it updates the soft delete properties of the relevant entity. 
            Note that this will not work with navigation properties.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkAdd(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkUpdate(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkDelete(System.Collections.Generic.List{`0},System.Action{EFCore.BulkExtensions.BulkConfig})">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkAddWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk add operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkUpdateWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk update operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.BulkDeleteWithSaveChanges(System.Collections.Generic.List{`0},EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Bulk delete operation. 
            </summary>
            <param name="entities"></param>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.SaveChanges">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.SaveChangesBulk(EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.InternalSaveChanges">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.Helpers.DataAccess.EfCore.Concrete.BaseRepository`2.InternalSaveChangesBulk(EFCore.BulkExtensions.BulkConfig)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <param name="bulkConfig"></param>
            <returns></returns>
        </member>
    </members>
</doc>
