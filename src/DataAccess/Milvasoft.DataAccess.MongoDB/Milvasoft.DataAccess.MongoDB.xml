<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Milvasoft.DataAccess.MongoDB</name>
    </assembly>
    <members>
        <member name="T:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1">
            <summary>
            Base repository for concrete repositories. All repositories must be have this methods.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetMongoDatabaseInstance">
            <summary>
            Gets mongo database(<see cref="T:MongoDB.Driver.IMongoDatabase"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns all entities.
            </summary>
            <param name="filterExpression"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetAllAsync(MongoDB.Driver.FilterDefinition{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns all entities.
            </summary>
            <param name="filterDefinition"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetByIdAsync(MongoDB.Bson.ObjectId,System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="projectExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetFirstOrDefaultAsync(MongoDB.Driver.FilterDefinition{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="filter"></param>
            <param name="projectExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="filter"></param>
            <param name="projectExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetMaxAsync(MongoDB.Driver.FilterDefinition{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns all entities.
            </summary>
            <param name="filterDefinition"></param>
            <param name="propertySelector"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns entity count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetEmbeddedDocumentCountAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            Returns embedded document count.
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="unwindExpression"></param>
            <param name="filterDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetNestedArrayByEntityIdAsync``1(MongoDB.Bson.ObjectId,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Returns the nested list in the entity according to <paramref name="entityId"/>.
            
            <remarks>
            <para><b>Remarks ;</b></para>
            
            <para> We specify the nested list with <paramref name="unwindExpression"/>. </para>
            <para> You can send the filter value to the Nested list. See <paramref name="filterExpressionForTEmbedded"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            </remarks>
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="entityId"></param>
            <param name="unwindExpression"></param>
            <param name="filterExpressionForTEmbedded"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetAsPaginatedAsync(System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},MongoDB.Driver.FilterDefinition{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            
            You can bring up the page number you want with the number of data count you want.
            
            <para> You can sort when listing data. </para>
            <para> You can send the filter value to the Nested list. See <paramref name="filterDefinition"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="filterDefinition"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetNestedPropertyAsPaginatedAsync``1(MongoDB.Bson.ObjectId,System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            
            According to the <paramref name="entityId"/>, you can bring up the nested list with the page number you want and the number of data you want.
            
            <para> You can sort when listing data. </para>
            <para> You can send the filter value to the Nested list. See <paramref name="projectExpression"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            <para> We specify the nested list with <paramref name="unwindExpression"/>. </para>
            
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="entityId"></param>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="unwindExpression"></param>
            <param name="projectExpression"></param>
            <param name="filterDefinitionForEmbedded"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetNestedPropertyAsPaginatedAsync``1(System.Collections.Generic.List{MongoDB.Bson.ObjectId},System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            
            According to the <paramref name="entityIds"/>, you can bring up the nested list with the page number you want and the number of data you want.
            
            <para> You can send the filter value to the Nested list. See <paramref name="projectExpression"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            <para> We specify the nested list with <paramref name="unwindExpression"/>. </para>
            
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="entityIds"></param>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="unwindExpression"></param>
            <param name="projectExpression"></param>
            <param name="filterDefinitionForEmbedded"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.GetNestedPropertyAsPaginatedAsync``1(System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Driver.FilterDefinition{`0},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            
            You can bring up the nested list with the page number you want and the number of data you want.
            
            <para> You can send the filter value to the Nested list. See <paramref name="projectExpression"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            <para> We specify the nested list with <paramref name="unwindExpression"/>. </para>
            
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="unwindExpression"></param>
            <param name="filterDefinition"></param>
            <param name="projectExpression"></param>
            <param name="filterDefinitionForEmbedded"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.AddAsync(`0)">
            <summary>
             Adds single entity to database asynchronously.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database asynchronously.
            </summary>
            <param name="documents"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.UpdateAsync(`0)">
            <summary>
            Replaces existing entities with new entities(<paramref name="document"/>).
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.UpdateAsync(`0,MongoDB.Driver.UpdateDefinition{`0})">
            <summary>
            Updates existing assets according to <paramref name="updateDefinition"/>.
            </summary>
            <param name="document"></param>
            <param name="updateDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.UpdateAsync(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.UpdateDefinition{`0})">
            <summary>
            Updates existing assets according to <paramref name="updateDefinition"/> matching <paramref name="filterDefinition"/>.
            </summary>
            <param name="filterDefinition"></param>
            <param name="updateDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.UpdateRangeAsync(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Updates the data in multiple.
            
            <para> You can only update one property in multiple. See <paramref name="fieldDefinitions"/> </para>
            
            </summary>
            <param name="documents"></param>
            <param name="fieldDefinitions"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.DeleteRangeAsync(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
             Deletes multiple entity from database asynchronously. 
            </summary>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.DeleteAndReturnDeletedAsync(MongoDB.Bson.ObjectId)">
            <summary>
             Deletes single entity from database asynchronously..
            </summary>
            <param name="id"></param>
            <returns> The deleted document if one was deleted. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.DeleteAsync(MongoDB.Bson.ObjectId)">
            <summary>
             Deletes single entity from database asynchronously..
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Abstract.IBaseRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Deletes single entity from database asynchronously..
            </summary>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1">
            <summary>
            Base repository for concrete repositories. All repositories must be have this methods.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="F:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1._collection">
            <summary>
            Mongo collection instance.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1._mongoDatabase">
            <summary>
            Mongo database instance.
            </summary>
        </member>
        <member name="F:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1._useUtcForDateTimes">
            <summary>
            Mongo database instance.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.#ctor(Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings,MongoDB.Driver.IMongoClient)">
            <summary>
            Constructor of <see cref="T:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1"/>. Initializes new IMongoDatabase object from registered IMongoClient. Register IMongoClient object as singleton to your IoC to use this consructor.
            </summary>
            <param name="settings"></param>
            <param name="mongoClient"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetMongoDatabaseInstance">
            <summary>
            Returns <see cref="T:MongoDB.Driver.IMongoDatabase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns all entities.
            </summary>
            <param name="filterExpression"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetAllAsync(MongoDB.Driver.FilterDefinition{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns all entities.
            </summary>
            <param name="filterDefinition"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetMaxAsync(MongoDB.Driver.FilterDefinition{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns the max value of the property selected with <paramref name="propertySelector"/>.
            </summary>
            <param name="filterDefinition"></param>
            <param name="propertySelector"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns entity count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetEmbeddedDocumentCountAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            Returns embedded document count.
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="unwindExpression"></param>
            <param name="filterDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetByIdAsync(MongoDB.Bson.ObjectId,System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="id"></param>
            <param name="projectExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetFirstOrDefaultAsync(MongoDB.Driver.FilterDefinition{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="filter"></param>
            <param name="projectExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Returns one entity by entity Id from database asynchronously.
            </summary>
            <param name="filter"></param>
            <param name="projectExpression"></param>
            <returns> The entity found or null. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetNestedArrayByEntityIdAsync``1(MongoDB.Bson.ObjectId,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Returns the nested list in the entity according to <paramref name="entityId"/>.
            
            <remarks>
            <para><b>Remarks ;</b></para>
            
            <para> We specify the nested list with <paramref name="unwindExpression"/>. </para>
            <para> You can send the filter value to the Nested list. See <paramref name="filterExpressionForTEmbedded"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            </remarks>
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="entityId"></param>
            <param name="unwindExpression"></param>
            <param name="filterExpressionForTEmbedded"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetAsPaginatedAsync(System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},MongoDB.Driver.FilterDefinition{`0},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            
            You can bring up the page number you want with the number of data count you want.
            
            <para> You can sort when listing data. </para>
            <para> You can send the filter value to the Nested list. See <paramref name="filterDefinition"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="filterDefinition"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetNestedPropertyAsPaginatedAsync``1(MongoDB.Bson.ObjectId,System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            
            According to the <paramref name="entityId"/>, you can bring up the nested list with the page number you want and the number of data you want.
            
            <para> You can sort when listing data. </para>
            <para> You can send the filter value to the Nested list. See <paramref name="projectExpression"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            <para> We specify the nested list with <paramref name="unwindExpression"/>. </para>
            
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="entityId"></param>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="unwindExpression"></param>
            <param name="projectExpression"></param>
            <param name="filterDefinitionForEmbedded"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetNestedPropertyAsPaginatedAsync``1(System.Collections.Generic.List{MongoDB.Bson.ObjectId},System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            
            According to the <paramref name="entityIds"/>, you can bring up the nested list with the page number you want and the number of data you want.
            
            <para> You can send the filter value to the Nested list. See <paramref name="projectExpression"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            <para> We specify the nested list with <paramref name="unwindExpression"/>. </para>
            
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="entityIds"></param>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="unwindExpression"></param>
            <param name="projectExpression"></param>
            <param name="filterDefinitionForEmbedded"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetNestedPropertyAsPaginatedAsync``1(System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Driver.FilterDefinition{`0},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            
            You can bring up the nested list with the page number you want and the number of data you want.
            
            <para> You can send the filter value to the Nested list. See <paramref name="projectExpression"/>. </para>
            <para> You can get the specific properties. See <paramref name="projectExpression"/>. </para>
            <para> We specify the nested list with <paramref name="unwindExpression"/>. </para>
            
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="unwindExpression"></param>
            <param name="filterDefinition"></param>
            <param name="projectExpression"></param>
            <param name="filterDefinitionForEmbedded"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.AddAsync(`0)">
            <summary>
             Adds single entity to database asynchronously.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds multiple entities to database asynchronously.
            </summary>
            <param name="documents"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.UpdateAsync(`0)">
            <summary>
            Replaces existing entities with new entities(<paramref name="document"/>).
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.UpdateAsync(`0,MongoDB.Driver.UpdateDefinition{`0})">
            <summary>
            Updates existing assets according to <paramref name="updateDefinition"/>.
            </summary>
            <param name="document"></param>
            <param name="updateDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.UpdateAsync(MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.UpdateDefinition{`0})">
            <summary>
            Updates existing assets according to <paramref name="updateDefinition"/> matching <paramref name="filterDefinition"/>.
            </summary>
            <remarks>
            
            UTC convert operation cannot apply even if you set <see cref="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.UseUtcForDateTimes"/> to true when using this method.
            
            </remarks>
            <param name="filterDefinition"></param>
            <param name="updateDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.UpdateRangeAsync(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Updates the data in multiple.
            
            <para> You can only update one property in multiple. </para>
            
            </summary>
            <param name="documents"></param>
            <param name="fieldDefinitions"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.DeleteRangeAsync(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
             Deletes multiple entity from database asynchronously. 
            </summary>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
             Deletes single entity from database asynchronously..
            </summary>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.DeleteAsync(MongoDB.Bson.ObjectId)">
            <summary>
             Deletes single entity from database asynchronously..
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.DeleteAndReturnDeletedAsync(MongoDB.Bson.ObjectId)">
            <summary>
             Deletes single entity from database asynchronously..
            </summary>
            <param name="id"></param>
            <returns> The deleted document if one was deleted. </returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetProjectionQuery``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Returns projection query in sttring.
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="projectExpressions"></param>
            <param name="unwindExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetTotalDataCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,MongoDB.Driver.FilterDefinition{`0},MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            Returns total data count for <typeparamref name="TEmbedded"/>.
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="unwindExpression"></param>
            <param name="projectQuery"></param>
            <param name="filterExpression"></param>
            <param name="filterDefForTEmbedded"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetAggregateFacetForEmbeddedPagination``1(System.Int32,System.Int32,System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp},System.String,MongoDB.Driver.FilterDefinition{``0})">
            <summary>
            Prepare aggregate facet for embedded pagination operations.
            </summary>
            <typeparam name="TEmbedded"></typeparam>
            <param name="pageIndex"></param>
            <param name="requestedItemCount"></param>
            <param name="orderByProps"></param>
            <param name="projectQuery"></param>
            <param name="filterDefForTEmbedded"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.GetSortDefinitions``1(System.Collections.Generic.List{Milvasoft.Core.Utils.Models.OrderByProp})">
            <summary>
            Gets sort definition by <paramref name="orderByProps"/>.
            </summary>
            <param name="orderByProps"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.ValidatePaginationParameters(System.Int32,System.Int32)">
            <summary>
            Checks the parameters is valid.
            </summary>
            <param name="requestedPageNumber"></param>
            <param name="countOfRequestedRecordsInPage"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.ConvertDateTimePropertiesToUtc(`0)">
            <summary>
            Convert date times to UTC Zero.
            </summary>
            <remarks>
            
            This will applied when "useUtcForDateTimes" in constructor property is true.
            This will applied <see cref="T:System.DateTime"/> and nullable <see cref="T:System.DateTime"/>.
            
            </remarks>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Concrete.BaseRepository`1.ConvertDateTimePropertiesToUtc(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Convert date times to UTC Zero.
            </summary>
            <remarks>
            
            This will applied when "useUtcForDateTimes" in constructor property is true.
            This will applied <see cref="T:System.DateTime"/> and nullable <see cref="T:System.DateTime"/>.
            
            </remarks>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Entity.Abstract.IDocumentBase">
            <summary>
            Base interface for most obk entities.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Entity.Abstract.IEmbedded">
            <summary>
            Determines whether this entity is embedded.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Entity.Concrete.DocumentBase">
            <summary>
            Base entity for entities. 
            If <see cref="T:System.Environment"/>.ASPNETCORE_ENVIRONMENT variable is 'Development' you can set <see cref="P:Milvasoft.DataAccess.MongoDB.Entity.Concrete.DocumentBase.CreationDate"/> prop.
            If <see cref="T:System.Environment"/>.ASPNETCORE_ENVIRONMENT variable is 'Production' you cannot set <see cref="P:Milvasoft.DataAccess.MongoDB.Entity.Concrete.DocumentBase.CreationDate"/>, this prop gets <see cref="P:MongoDB.Bson.ObjectId.CreationTime"/>.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Entity.Concrete.DocumentBase.Id">
            <summary>
            Unique key of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Entity.Concrete.DocumentBase.LastModificationDate">
            <summary>
            Last modification date of entity.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Entity.Concrete.DocumentBase.CreationDate">
            <summary>
            Creation date of entity.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Entity.Concrete.DocumentBase.GetUniqueIdentifier">
            <summary>
            Gets the value of Id property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Utils.Attributes.BsonCollectionAttribute">
            <summary>
            Represents entity's collection name in MongoDB.
            </summary>
            <remarks>
            Creates new instance of <see cref="T:Milvasoft.DataAccess.MongoDB.Utils.Attributes.BsonCollectionAttribute"/>.
            </remarks>
            <param name="collectionName"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.Attributes.BsonCollectionAttribute.#ctor(System.String)">
            <summary>
            Represents entity's collection name in MongoDB.
            </summary>
            <remarks>
            Creates new instance of <see cref="T:Milvasoft.DataAccess.MongoDB.Utils.Attributes.BsonCollectionAttribute"/>.
            </remarks>
            <param name="collectionName"></param>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Attributes.BsonCollectionAttribute.CollectionName">
            <summary>
            Gets or sets collection name.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper">
            <summary>
            Extension methods for relational operations. Like "include approach" in RDBMS.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.DbName">
            <summary>
            Db name of your project. Dont forget enter this value for proper <see cref="T:MongoDB.Driver.MongoDBRef"/> documents.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.MapReferenceAsync``3(``0,MongoDB.Driver.IMongoDatabase,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``2,``2}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}})">
            <summary>
            Pulls and mapped the <paramref name="_"/> object inside the <paramref name="entity"/> object from the database.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TReferenceProperty"></typeparam>
            <typeparam name="TMapProperty"></typeparam>
            <param name="entity"> The document of collection. </param>
            <param name="mongoDatabase"> The mongo database. </param>
            <param name="_"> Reference property name for code readiness. The property that contains the MongoDbRef object. </param>
            <param name="toBeMappedPropertySelector"> To be mapped property. </param>
            <param name="filterExpression"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.MapReferenceAsync``3(``0,MongoDB.Driver.IMongoDatabase,System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.List{``1}}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.List{``2}}},System.Linq.Expressions.Expression{System.Func{``2,``2}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}})">
            <summary>
            Pulls and mapped the <paramref name="_"/> list inside the <paramref name="entity"/> object from the database.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TReferenceProperty"></typeparam>
            <typeparam name="TMapProperty"></typeparam>
            <param name="entity"> The document of collection. </param>
            <param name="mongoDatabase"> The mongo database. </param>
            <param name="_"> Reference property name for code readiness. The property that contains the MongoDbRef object. </param>
            <param name="toBeMappedPropertySelector"> To be mapped property. </param>
            <param name="filterExpression"></param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.MapReferenceAsync``3(System.Collections.Generic.List{``0},MongoDB.Driver.IMongoDatabase,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``2,``2}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}})">
            <summary>
            Pulls and mapped the <paramref name="_"/> object inside the <paramref name="entities"/> list from the database.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TReferenceProperty"></typeparam>
            <typeparam name="TMapProperty"></typeparam>
            <param name="entities"> The documents of collection. </param>
            <param name="mongoDatabase"> The mongo database. </param>
            <param name="_"> Reference property name for code readiness. The property that contains the MongoDbRef object. </param>
            <param name="toBeMappedPropertySelector"> To be mapped property. </param>
            <param name="projectExpression"></param>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.MapReferenceAsync``3(System.Collections.Generic.List{``0},MongoDB.Driver.IMongoDatabase,System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.List{``1}}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.List{``2}}},System.Linq.Expressions.Expression{System.Func{``2,``2}})">
            <summary>
            Pulls and mapped the <paramref name="_"/> list inside the <paramref name="entities"/> list from the database.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TReferenceProperty"></typeparam>
            <typeparam name="TMapProperty"></typeparam>
            <param name="entities"> The documents of collection. </param>
            <param name="mongoDatabase"> The mongo database. </param>
            <param name="_"> Reference property name for code readiness. The property that contains the MongoDbRef object. </param>
            <param name="toBeMappedPropertySelector"> To be mapped property. </param>
            <param name="projectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.StepIntoEmbedded``2(System.Collections.Generic.List{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Pulls and mapped the <paramref name="embeddedPropertySelector"/> object inside the <paramref name="entities"/> list from the database.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TEmbeddedProperty"></typeparam>
            <param name="entities"> The documents of collection. </param>
            <param name="embeddedPropertySelector"> Embedded document to be step into. </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.StepIntoEmbedded``2(System.Collections.Generic.List{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.List{``1}}})">
            <summary>
            Pulls and mapped the <paramref name="embeddedPropertySelector"/> list inside the <paramref name="entities"/> list from the database.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TEmbeddedProperty"></typeparam>
            <param name="entities"> The documents of collection. </param>
            <param name="embeddedPropertySelector"> Embedded document to be step into </param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.Contains``1(MongoDB.Driver.FilterDefinitionBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Creates contains query.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="filterDefinitionBuilder"></param>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.GetCollectionName(System.Type)">
            <summary>
            Returns collection name.
            </summary>
            <param name="documentType"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.GetMongoDBRef``1(MongoDB.Bson.ObjectId)">
            <summary>
            Returns <see cref="T:MongoDB.Driver.MongoDBRef"/>
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.GetMongoDBRef``1(System.Collections.Generic.List{MongoDB.Bson.ObjectId})">
            <summary>
            Returns <see cref="T:MongoDB.Driver.MongoDBRef"/>
            </summary>
            <param name="objectIds"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.NoSqlRelationHelper.ToObjectId(System.Int32)">
            <summary>
            Converts <paramref name="value"/>'s type to <see cref="T:MongoDB.Bson.ObjectId"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Utils.Serializers.EncryptedString">
            <summary>
            If property type is EncryptedString, client side encryption is applied to property.
            </summary>
            <remarks>
            Initializes new <see cref="T:Milvasoft.DataAccess.MongoDB.Utils.Serializers.EncryptedString"/>.
            </remarks>
            <param name="value"></param>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.Serializers.EncryptedString.#ctor(System.String)">
            <summary>
            If property type is EncryptedString, client side encryption is applied to property.
            </summary>
            <remarks>
            Initializes new <see cref="T:Milvasoft.DataAccess.MongoDB.Utils.Serializers.EncryptedString"/>.
            </remarks>
            <param name="value"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Utils.Serializers.TenantIdSerializer">
            <summary>
            Serializer for <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.Serializers.TenantIdSerializer.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="context"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.Serializers.TenantIdSerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,Milvasoft.Core.EntityBases.MultiTenancy.TenantId)">
            <summary>
            Serializes a value.
            </summary>
            <param name="context"></param>
            <param name="args"></param>
            <param name="value"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Utils.Serializers.NullableTenantIdSerializer">
            <summary>
            Serializer for nullable <see cref="T:Milvasoft.Core.EntityBases.MultiTenancy.TenantId"/>.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.Serializers.NullableTenantIdSerializer.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            Deserializes a value.
            </summary>
            <param name="context"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.Serializers.NullableTenantIdSerializer.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,System.Nullable{Milvasoft.Core.EntityBases.MultiTenancy.TenantId})">
            <summary>
            Serializes a value.
            </summary>
            <param name="context"></param>
            <param name="args"></param>
            <param name="value"></param>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Utils.ServiceCollectionExtensions">
            <summary>
            Mongodb service collection extensions.
            </summary>
        </member>
        <member name="M:Milvasoft.DataAccess.MongoDB.Utils.ServiceCollectionExtensions.AddMilvaMongoHelper(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings})">
            <summary>
            Adds related mongo services to service collection..
            </summary>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings">
            <summary>
            Interface of mongo connection settings.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.DatabaseName">
            <summary>
            Database name of to be connected database.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.ConnectionString">
            <summary>
            Connection string of to be connected database. You can provide this or <see cref="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.MongoClientSettings"/>.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.EncryptionKey">
            <summary>
            128 bit encryption key for client side encryption. If you don't provide this, the required services for encryption will not be added.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.UseUtcForDateTimes">
            <summary>
            Uses DateTime.UtcNow if its true.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.AddTenantIdSupport">
            <summary>
            Adds TenantId support.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.MongoClientSettings">
            <summary>
            Mongo client settings. You can provide this or <see cref="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.IMongoDbSettings.ConnectionString"/>.
            </summary>
        </member>
        <member name="T:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings">
            <summary>
            Mongo connection settings.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings.DatabaseName">
            <summary>
            Database name of to be connected database.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings.ConnectionString">
            <summary>
            Connection string of to be connected database. You can provide this or <see cref="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings.MongoClientSettings"/>.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings.EncryptionKey">
            <summary>
            128 bit encryption key for client side encryption. If you don't provide this, the required services for encryption will not be added.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings.UseUtcForDateTimes">
            <summary>
            Uses DateTime.UtcNow if its true.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings.AddTenantIdSupport">
            <summary>
            Adds TenantId support.
            </summary>
        </member>
        <member name="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings.MongoClientSettings">
            <summary>
            Mongo client settings. You can provide this or <see cref="P:Milvasoft.DataAccess.MongoDB.Utils.Settings.MongoDbSettings.ConnectionString"/>.
            </summary>
        </member>
    </members>
</doc>
